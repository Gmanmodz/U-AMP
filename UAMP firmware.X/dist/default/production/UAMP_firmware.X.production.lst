

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jan 01 13:02:47 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16LF15324
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.10
    32                           ; Generated 31/07/2019 GMT
    33                           ; 
    34                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16LF15324 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000E                     	;# 
    79  0012                     	;# 
    80  0014                     	;# 
    81  0018                     	;# 
    82  001A                     	;# 
    83  009B                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  009F                     	;# 
    89  0119                     	;# 
    90  0119                     	;# 
    91  0119                     	;# 
    92  011A                     	;# 
    93  011A                     	;# 
    94  011A                     	;# 
    95  011B                     	;# 
    96  011B                     	;# 
    97  011B                     	;# 
    98  011B                     	;# 
    99  011B                     	;# 
   100  011C                     	;# 
   101  011C                     	;# 
   102  011C                     	;# 
   103  011D                     	;# 
   104  011D                     	;# 
   105  011D                     	;# 
   106  011E                     	;# 
   107  011E                     	;# 
   108  011E                     	;# 
   109  011F                     	;# 
   110  011F                     	;# 
   111  011F                     	;# 
   112  011F                     	;# 
   113  011F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  018E                     	;# 
   117  018F                     	;# 
   118  0190                     	;# 
   119  0191                     	;# 
   120  0192                     	;# 
   121  020C                     	;# 
   122  020C                     	;# 
   123  020D                     	;# 
   124  020E                     	;# 
   125  020F                     	;# 
   126  020F                     	;# 
   127  0210                     	;# 
   128  0210                     	;# 
   129  0211                     	;# 
   130  0211                     	;# 
   131  028C                     	;# 
   132  028C                     	;# 
   133  028D                     	;# 
   134  028D                     	;# 
   135  028E                     	;# 
   136  028F                     	;# 
   137  0290                     	;# 
   138  0291                     	;# 
   139  030C                     	;# 
   140  030C                     	;# 
   141  030D                     	;# 
   142  030E                     	;# 
   143  030F                     	;# 
   144  0310                     	;# 
   145  0310                     	;# 
   146  0311                     	;# 
   147  0312                     	;# 
   148  0313                     	;# 
   149  0314                     	;# 
   150  0314                     	;# 
   151  0315                     	;# 
   152  0316                     	;# 
   153  0318                     	;# 
   154  0318                     	;# 
   155  0319                     	;# 
   156  031A                     	;# 
   157  031C                     	;# 
   158  031C                     	;# 
   159  031D                     	;# 
   160  031E                     	;# 
   161  038C                     	;# 
   162  038C                     	;# 
   163  038D                     	;# 
   164  038E                     	;# 
   165  058C                     	;# 
   166  058C                     	;# 
   167  058D                     	;# 
   168  058E                     	;# 
   169  058F                     	;# 
   170  058F                     	;# 
   171  0590                     	;# 
   172  0591                     	;# 
   173  0592                     	;# 
   174  0593                     	;# 
   175  059C                     	;# 
   176  059C                     	;# 
   177  059D                     	;# 
   178  059D                     	;# 
   179  059E                     	;# 
   180  059F                     	;# 
   181  060C                     	;# 
   182  060D                     	;# 
   183  060E                     	;# 
   184  060F                     	;# 
   185  0610                     	;# 
   186  0611                     	;# 
   187  0612                     	;# 
   188  0613                     	;# 
   189  0614                     	;# 
   190  070C                     	;# 
   191  070D                     	;# 
   192  070E                     	;# 
   193  070F                     	;# 
   194  0710                     	;# 
   195  0711                     	;# 
   196  0712                     	;# 
   197  0713                     	;# 
   198  0716                     	;# 
   199  0717                     	;# 
   200  0718                     	;# 
   201  0719                     	;# 
   202  071A                     	;# 
   203  071B                     	;# 
   204  071C                     	;# 
   205  071D                     	;# 
   206  0796                     	;# 
   207  0797                     	;# 
   208  0798                     	;# 
   209  0799                     	;# 
   210  079A                     	;# 
   211  079B                     	;# 
   212  080C                     	;# 
   213  080D                     	;# 
   214  080E                     	;# 
   215  080F                     	;# 
   216  0810                     	;# 
   217  0811                     	;# 
   218  0813                     	;# 
   219  0814                     	;# 
   220  081A                     	;# 
   221  081A                     	;# 
   222  081B                     	;# 
   223  081C                     	;# 
   224  081C                     	;# 
   225  081D                     	;# 
   226  081E                     	;# 
   227  081F                     	;# 
   228  088C                     	;# 
   229  088D                     	;# 
   230  088E                     	;# 
   231  088F                     	;# 
   232  0890                     	;# 
   233  0891                     	;# 
   234  0892                     	;# 
   235  0893                     	;# 
   236  0895                     	;# 
   237  0896                     	;# 
   238  090C                     	;# 
   239  090E                     	;# 
   240  090F                     	;# 
   241  091F                     	;# 
   242  098F                     	;# 
   243  098F                     	;# 
   244  0990                     	;# 
   245  0991                     	;# 
   246  0992                     	;# 
   247  0993                     	;# 
   248  0994                     	;# 
   249  0995                     	;# 
   250  0996                     	;# 
   251  0997                     	;# 
   252  0A19                     	;# 
   253  0A19                     	;# 
   254  0A1A                     	;# 
   255  0A1A                     	;# 
   256  0A1B                     	;# 
   257  0A1B                     	;# 
   258  0A1B                     	;# 
   259  0A1C                     	;# 
   260  0A1C                     	;# 
   261  0A1D                     	;# 
   262  0A1D                     	;# 
   263  0A1E                     	;# 
   264  0A1E                     	;# 
   265  0A1F                     	;# 
   266  0A1F                     	;# 
   267  0A1F                     	;# 
   268  1E0F                     	;# 
   269  1E10                     	;# 
   270  1E11                     	;# 
   271  1E12                     	;# 
   272  1E13                     	;# 
   273  1E14                     	;# 
   274  1E15                     	;# 
   275  1E16                     	;# 
   276  1E17                     	;# 
   277  1E18                     	;# 
   278  1E19                     	;# 
   279  1E1A                     	;# 
   280  1E1B                     	;# 
   281  1E1C                     	;# 
   282  1E1D                     	;# 
   283  1E1E                     	;# 
   284  1E1F                     	;# 
   285  1E20                     	;# 
   286  1E21                     	;# 
   287  1E22                     	;# 
   288  1E23                     	;# 
   289  1E24                     	;# 
   290  1E25                     	;# 
   291  1E26                     	;# 
   292  1E27                     	;# 
   293  1E28                     	;# 
   294  1E29                     	;# 
   295  1E2A                     	;# 
   296  1E2B                     	;# 
   297  1E2C                     	;# 
   298  1E2D                     	;# 
   299  1E2E                     	;# 
   300  1E2F                     	;# 
   301  1E30                     	;# 
   302  1E31                     	;# 
   303  1E32                     	;# 
   304  1E33                     	;# 
   305  1E34                     	;# 
   306  1E35                     	;# 
   307  1E36                     	;# 
   308  1E37                     	;# 
   309  1E8F                     	;# 
   310  1E90                     	;# 
   311  1E91                     	;# 
   312  1E92                     	;# 
   313  1E93                     	;# 
   314  1E9C                     	;# 
   315  1EA1                     	;# 
   316  1EA2                     	;# 
   317  1EB1                     	;# 
   318  1EBB                     	;# 
   319  1EBC                     	;# 
   320  1EBD                     	;# 
   321  1EBE                     	;# 
   322  1EC3                     	;# 
   323  1EC5                     	;# 
   324  1EC6                     	;# 
   325  1EC7                     	;# 
   326  1ECB                     	;# 
   327  1ECC                     	;# 
   328  1ECD                     	;# 
   329  1ECE                     	;# 
   330  1F10                     	;# 
   331  1F11                     	;# 
   332  1F12                     	;# 
   333  1F13                     	;# 
   334  1F14                     	;# 
   335  1F15                     	;# 
   336  1F20                     	;# 
   337  1F21                     	;# 
   338  1F22                     	;# 
   339  1F23                     	;# 
   340  1F24                     	;# 
   341  1F25                     	;# 
   342  1F38                     	;# 
   343  1F39                     	;# 
   344  1F3A                     	;# 
   345  1F3B                     	;# 
   346  1F3C                     	;# 
   347  1F3D                     	;# 
   348  1F3E                     	;# 
   349  1F3F                     	;# 
   350  1F4E                     	;# 
   351  1F4F                     	;# 
   352  1F50                     	;# 
   353  1F51                     	;# 
   354  1F52                     	;# 
   355  1F53                     	;# 
   356  1F54                     	;# 
   357  1F55                     	;# 
   358  1FE4                     	;# 
   359  1FE5                     	;# 
   360  1FE6                     	;# 
   361  1FE7                     	;# 
   362  1FE8                     	;# 
   363  1FE8                     	;# 
   364  1FE9                     	;# 
   365  1FEA                     	;# 
   366  1FEA                     	;# 
   367  1FEB                     	;# 
   368  1FED                     	;# 
   369  1FEE                     	;# 
   370  1FEF                     	;# 
   371  0000                     	;# 
   372  0001                     	;# 
   373  0002                     	;# 
   374  0003                     	;# 
   375  0004                     	;# 
   376  0005                     	;# 
   377  0006                     	;# 
   378  0007                     	;# 
   379  0008                     	;# 
   380  0009                     	;# 
   381  000A                     	;# 
   382  000B                     	;# 
   383  000C                     	;# 
   384  000E                     	;# 
   385  0012                     	;# 
   386  0014                     	;# 
   387  0018                     	;# 
   388  001A                     	;# 
   389  009B                     	;# 
   390  009B                     	;# 
   391  009C                     	;# 
   392  009D                     	;# 
   393  009E                     	;# 
   394  009F                     	;# 
   395  0119                     	;# 
   396  0119                     	;# 
   397  0119                     	;# 
   398  011A                     	;# 
   399  011A                     	;# 
   400  011A                     	;# 
   401  011B                     	;# 
   402  011B                     	;# 
   403  011B                     	;# 
   404  011B                     	;# 
   405  011B                     	;# 
   406  011C                     	;# 
   407  011C                     	;# 
   408  011C                     	;# 
   409  011D                     	;# 
   410  011D                     	;# 
   411  011D                     	;# 
   412  011E                     	;# 
   413  011E                     	;# 
   414  011E                     	;# 
   415  011F                     	;# 
   416  011F                     	;# 
   417  011F                     	;# 
   418  011F                     	;# 
   419  011F                     	;# 
   420  018C                     	;# 
   421  018D                     	;# 
   422  018E                     	;# 
   423  018F                     	;# 
   424  0190                     	;# 
   425  0191                     	;# 
   426  0192                     	;# 
   427  020C                     	;# 
   428  020C                     	;# 
   429  020D                     	;# 
   430  020E                     	;# 
   431  020F                     	;# 
   432  020F                     	;# 
   433  0210                     	;# 
   434  0210                     	;# 
   435  0211                     	;# 
   436  0211                     	;# 
   437  028C                     	;# 
   438  028C                     	;# 
   439  028D                     	;# 
   440  028D                     	;# 
   441  028E                     	;# 
   442  028F                     	;# 
   443  0290                     	;# 
   444  0291                     	;# 
   445  030C                     	;# 
   446  030C                     	;# 
   447  030D                     	;# 
   448  030E                     	;# 
   449  030F                     	;# 
   450  0310                     	;# 
   451  0310                     	;# 
   452  0311                     	;# 
   453  0312                     	;# 
   454  0313                     	;# 
   455  0314                     	;# 
   456  0314                     	;# 
   457  0315                     	;# 
   458  0316                     	;# 
   459  0318                     	;# 
   460  0318                     	;# 
   461  0319                     	;# 
   462  031A                     	;# 
   463  031C                     	;# 
   464  031C                     	;# 
   465  031D                     	;# 
   466  031E                     	;# 
   467  038C                     	;# 
   468  038C                     	;# 
   469  038D                     	;# 
   470  038E                     	;# 
   471  058C                     	;# 
   472  058C                     	;# 
   473  058D                     	;# 
   474  058E                     	;# 
   475  058F                     	;# 
   476  058F                     	;# 
   477  0590                     	;# 
   478  0591                     	;# 
   479  0592                     	;# 
   480  0593                     	;# 
   481  059C                     	;# 
   482  059C                     	;# 
   483  059D                     	;# 
   484  059D                     	;# 
   485  059E                     	;# 
   486  059F                     	;# 
   487  060C                     	;# 
   488  060D                     	;# 
   489  060E                     	;# 
   490  060F                     	;# 
   491  0610                     	;# 
   492  0611                     	;# 
   493  0612                     	;# 
   494  0613                     	;# 
   495  0614                     	;# 
   496  070C                     	;# 
   497  070D                     	;# 
   498  070E                     	;# 
   499  070F                     	;# 
   500  0710                     	;# 
   501  0711                     	;# 
   502  0712                     	;# 
   503  0713                     	;# 
   504  0716                     	;# 
   505  0717                     	;# 
   506  0718                     	;# 
   507  0719                     	;# 
   508  071A                     	;# 
   509  071B                     	;# 
   510  071C                     	;# 
   511  071D                     	;# 
   512  0796                     	;# 
   513  0797                     	;# 
   514  0798                     	;# 
   515  0799                     	;# 
   516  079A                     	;# 
   517  079B                     	;# 
   518  080C                     	;# 
   519  080D                     	;# 
   520  080E                     	;# 
   521  080F                     	;# 
   522  0810                     	;# 
   523  0811                     	;# 
   524  0813                     	;# 
   525  0814                     	;# 
   526  081A                     	;# 
   527  081A                     	;# 
   528  081B                     	;# 
   529  081C                     	;# 
   530  081C                     	;# 
   531  081D                     	;# 
   532  081E                     	;# 
   533  081F                     	;# 
   534  088C                     	;# 
   535  088D                     	;# 
   536  088E                     	;# 
   537  088F                     	;# 
   538  0890                     	;# 
   539  0891                     	;# 
   540  0892                     	;# 
   541  0893                     	;# 
   542  0895                     	;# 
   543  0896                     	;# 
   544  090C                     	;# 
   545  090E                     	;# 
   546  090F                     	;# 
   547  091F                     	;# 
   548  098F                     	;# 
   549  098F                     	;# 
   550  0990                     	;# 
   551  0991                     	;# 
   552  0992                     	;# 
   553  0993                     	;# 
   554  0994                     	;# 
   555  0995                     	;# 
   556  0996                     	;# 
   557  0997                     	;# 
   558  0A19                     	;# 
   559  0A19                     	;# 
   560  0A1A                     	;# 
   561  0A1A                     	;# 
   562  0A1B                     	;# 
   563  0A1B                     	;# 
   564  0A1B                     	;# 
   565  0A1C                     	;# 
   566  0A1C                     	;# 
   567  0A1D                     	;# 
   568  0A1D                     	;# 
   569  0A1E                     	;# 
   570  0A1E                     	;# 
   571  0A1F                     	;# 
   572  0A1F                     	;# 
   573  0A1F                     	;# 
   574  1E0F                     	;# 
   575  1E10                     	;# 
   576  1E11                     	;# 
   577  1E12                     	;# 
   578  1E13                     	;# 
   579  1E14                     	;# 
   580  1E15                     	;# 
   581  1E16                     	;# 
   582  1E17                     	;# 
   583  1E18                     	;# 
   584  1E19                     	;# 
   585  1E1A                     	;# 
   586  1E1B                     	;# 
   587  1E1C                     	;# 
   588  1E1D                     	;# 
   589  1E1E                     	;# 
   590  1E1F                     	;# 
   591  1E20                     	;# 
   592  1E21                     	;# 
   593  1E22                     	;# 
   594  1E23                     	;# 
   595  1E24                     	;# 
   596  1E25                     	;# 
   597  1E26                     	;# 
   598  1E27                     	;# 
   599  1E28                     	;# 
   600  1E29                     	;# 
   601  1E2A                     	;# 
   602  1E2B                     	;# 
   603  1E2C                     	;# 
   604  1E2D                     	;# 
   605  1E2E                     	;# 
   606  1E2F                     	;# 
   607  1E30                     	;# 
   608  1E31                     	;# 
   609  1E32                     	;# 
   610  1E33                     	;# 
   611  1E34                     	;# 
   612  1E35                     	;# 
   613  1E36                     	;# 
   614  1E37                     	;# 
   615  1E8F                     	;# 
   616  1E90                     	;# 
   617  1E91                     	;# 
   618  1E92                     	;# 
   619  1E93                     	;# 
   620  1E9C                     	;# 
   621  1EA1                     	;# 
   622  1EA2                     	;# 
   623  1EB1                     	;# 
   624  1EBB                     	;# 
   625  1EBC                     	;# 
   626  1EBD                     	;# 
   627  1EBE                     	;# 
   628  1EC3                     	;# 
   629  1EC5                     	;# 
   630  1EC6                     	;# 
   631  1EC7                     	;# 
   632  1ECB                     	;# 
   633  1ECC                     	;# 
   634  1ECD                     	;# 
   635  1ECE                     	;# 
   636  1F10                     	;# 
   637  1F11                     	;# 
   638  1F12                     	;# 
   639  1F13                     	;# 
   640  1F14                     	;# 
   641  1F15                     	;# 
   642  1F20                     	;# 
   643  1F21                     	;# 
   644  1F22                     	;# 
   645  1F23                     	;# 
   646  1F24                     	;# 
   647  1F25                     	;# 
   648  1F38                     	;# 
   649  1F39                     	;# 
   650  1F3A                     	;# 
   651  1F3B                     	;# 
   652  1F3C                     	;# 
   653  1F3D                     	;# 
   654  1F3E                     	;# 
   655  1F3F                     	;# 
   656  1F4E                     	;# 
   657  1F4F                     	;# 
   658  1F50                     	;# 
   659  1F51                     	;# 
   660  1F52                     	;# 
   661  1F53                     	;# 
   662  1F54                     	;# 
   663  1F55                     	;# 
   664  1FE4                     	;# 
   665  1FE5                     	;# 
   666  1FE6                     	;# 
   667  1FE7                     	;# 
   668  1FE8                     	;# 
   669  1FE8                     	;# 
   670  1FE9                     	;# 
   671  1FEA                     	;# 
   672  1FEA                     	;# 
   673  1FEB                     	;# 
   674  1FED                     	;# 
   675  1FEE                     	;# 
   676  1FEF                     	;# 
   677  0000                     	;# 
   678  0001                     	;# 
   679  0002                     	;# 
   680  0003                     	;# 
   681  0004                     	;# 
   682  0005                     	;# 
   683  0006                     	;# 
   684  0007                     	;# 
   685  0008                     	;# 
   686  0009                     	;# 
   687  000A                     	;# 
   688  000B                     	;# 
   689  000C                     	;# 
   690  000E                     	;# 
   691  0012                     	;# 
   692  0014                     	;# 
   693  0018                     	;# 
   694  001A                     	;# 
   695  009B                     	;# 
   696  009B                     	;# 
   697  009C                     	;# 
   698  009D                     	;# 
   699  009E                     	;# 
   700  009F                     	;# 
   701  0119                     	;# 
   702  0119                     	;# 
   703  0119                     	;# 
   704  011A                     	;# 
   705  011A                     	;# 
   706  011A                     	;# 
   707  011B                     	;# 
   708  011B                     	;# 
   709  011B                     	;# 
   710  011B                     	;# 
   711  011B                     	;# 
   712  011C                     	;# 
   713  011C                     	;# 
   714  011C                     	;# 
   715  011D                     	;# 
   716  011D                     	;# 
   717  011D                     	;# 
   718  011E                     	;# 
   719  011E                     	;# 
   720  011E                     	;# 
   721  011F                     	;# 
   722  011F                     	;# 
   723  011F                     	;# 
   724  011F                     	;# 
   725  011F                     	;# 
   726  018C                     	;# 
   727  018D                     	;# 
   728  018E                     	;# 
   729  018F                     	;# 
   730  0190                     	;# 
   731  0191                     	;# 
   732  0192                     	;# 
   733  020C                     	;# 
   734  020C                     	;# 
   735  020D                     	;# 
   736  020E                     	;# 
   737  020F                     	;# 
   738  020F                     	;# 
   739  0210                     	;# 
   740  0210                     	;# 
   741  0211                     	;# 
   742  0211                     	;# 
   743  028C                     	;# 
   744  028C                     	;# 
   745  028D                     	;# 
   746  028D                     	;# 
   747  028E                     	;# 
   748  028F                     	;# 
   749  0290                     	;# 
   750  0291                     	;# 
   751  030C                     	;# 
   752  030C                     	;# 
   753  030D                     	;# 
   754  030E                     	;# 
   755  030F                     	;# 
   756  0310                     	;# 
   757  0310                     	;# 
   758  0311                     	;# 
   759  0312                     	;# 
   760  0313                     	;# 
   761  0314                     	;# 
   762  0314                     	;# 
   763  0315                     	;# 
   764  0316                     	;# 
   765  0318                     	;# 
   766  0318                     	;# 
   767  0319                     	;# 
   768  031A                     	;# 
   769  031C                     	;# 
   770  031C                     	;# 
   771  031D                     	;# 
   772  031E                     	;# 
   773  038C                     	;# 
   774  038C                     	;# 
   775  038D                     	;# 
   776  038E                     	;# 
   777  058C                     	;# 
   778  058C                     	;# 
   779  058D                     	;# 
   780  058E                     	;# 
   781  058F                     	;# 
   782  058F                     	;# 
   783  0590                     	;# 
   784  0591                     	;# 
   785  0592                     	;# 
   786  0593                     	;# 
   787  059C                     	;# 
   788  059C                     	;# 
   789  059D                     	;# 
   790  059D                     	;# 
   791  059E                     	;# 
   792  059F                     	;# 
   793  060C                     	;# 
   794  060D                     	;# 
   795  060E                     	;# 
   796  060F                     	;# 
   797  0610                     	;# 
   798  0611                     	;# 
   799  0612                     	;# 
   800  0613                     	;# 
   801  0614                     	;# 
   802  070C                     	;# 
   803  070D                     	;# 
   804  070E                     	;# 
   805  070F                     	;# 
   806  0710                     	;# 
   807  0711                     	;# 
   808  0712                     	;# 
   809  0713                     	;# 
   810  0716                     	;# 
   811  0717                     	;# 
   812  0718                     	;# 
   813  0719                     	;# 
   814  071A                     	;# 
   815  071B                     	;# 
   816  071C                     	;# 
   817  071D                     	;# 
   818  0796                     	;# 
   819  0797                     	;# 
   820  0798                     	;# 
   821  0799                     	;# 
   822  079A                     	;# 
   823  079B                     	;# 
   824  080C                     	;# 
   825  080D                     	;# 
   826  080E                     	;# 
   827  080F                     	;# 
   828  0810                     	;# 
   829  0811                     	;# 
   830  0813                     	;# 
   831  0814                     	;# 
   832  081A                     	;# 
   833  081A                     	;# 
   834  081B                     	;# 
   835  081C                     	;# 
   836  081C                     	;# 
   837  081D                     	;# 
   838  081E                     	;# 
   839  081F                     	;# 
   840  088C                     	;# 
   841  088D                     	;# 
   842  088E                     	;# 
   843  088F                     	;# 
   844  0890                     	;# 
   845  0891                     	;# 
   846  0892                     	;# 
   847  0893                     	;# 
   848  0895                     	;# 
   849  0896                     	;# 
   850  090C                     	;# 
   851  090E                     	;# 
   852  090F                     	;# 
   853  091F                     	;# 
   854  098F                     	;# 
   855  098F                     	;# 
   856  0990                     	;# 
   857  0991                     	;# 
   858  0992                     	;# 
   859  0993                     	;# 
   860  0994                     	;# 
   861  0995                     	;# 
   862  0996                     	;# 
   863  0997                     	;# 
   864  0A19                     	;# 
   865  0A19                     	;# 
   866  0A1A                     	;# 
   867  0A1A                     	;# 
   868  0A1B                     	;# 
   869  0A1B                     	;# 
   870  0A1B                     	;# 
   871  0A1C                     	;# 
   872  0A1C                     	;# 
   873  0A1D                     	;# 
   874  0A1D                     	;# 
   875  0A1E                     	;# 
   876  0A1E                     	;# 
   877  0A1F                     	;# 
   878  0A1F                     	;# 
   879  0A1F                     	;# 
   880  1E0F                     	;# 
   881  1E10                     	;# 
   882  1E11                     	;# 
   883  1E12                     	;# 
   884  1E13                     	;# 
   885  1E14                     	;# 
   886  1E15                     	;# 
   887  1E16                     	;# 
   888  1E17                     	;# 
   889  1E18                     	;# 
   890  1E19                     	;# 
   891  1E1A                     	;# 
   892  1E1B                     	;# 
   893  1E1C                     	;# 
   894  1E1D                     	;# 
   895  1E1E                     	;# 
   896  1E1F                     	;# 
   897  1E20                     	;# 
   898  1E21                     	;# 
   899  1E22                     	;# 
   900  1E23                     	;# 
   901  1E24                     	;# 
   902  1E25                     	;# 
   903  1E26                     	;# 
   904  1E27                     	;# 
   905  1E28                     	;# 
   906  1E29                     	;# 
   907  1E2A                     	;# 
   908  1E2B                     	;# 
   909  1E2C                     	;# 
   910  1E2D                     	;# 
   911  1E2E                     	;# 
   912  1E2F                     	;# 
   913  1E30                     	;# 
   914  1E31                     	;# 
   915  1E32                     	;# 
   916  1E33                     	;# 
   917  1E34                     	;# 
   918  1E35                     	;# 
   919  1E36                     	;# 
   920  1E37                     	;# 
   921  1E8F                     	;# 
   922  1E90                     	;# 
   923  1E91                     	;# 
   924  1E92                     	;# 
   925  1E93                     	;# 
   926  1E9C                     	;# 
   927  1EA1                     	;# 
   928  1EA2                     	;# 
   929  1EB1                     	;# 
   930  1EBB                     	;# 
   931  1EBC                     	;# 
   932  1EBD                     	;# 
   933  1EBE                     	;# 
   934  1EC3                     	;# 
   935  1EC5                     	;# 
   936  1EC6                     	;# 
   937  1EC7                     	;# 
   938  1ECB                     	;# 
   939  1ECC                     	;# 
   940  1ECD                     	;# 
   941  1ECE                     	;# 
   942  1F10                     	;# 
   943  1F11                     	;# 
   944  1F12                     	;# 
   945  1F13                     	;# 
   946  1F14                     	;# 
   947  1F15                     	;# 
   948  1F20                     	;# 
   949  1F21                     	;# 
   950  1F22                     	;# 
   951  1F23                     	;# 
   952  1F24                     	;# 
   953  1F25                     	;# 
   954  1F38                     	;# 
   955  1F39                     	;# 
   956  1F3A                     	;# 
   957  1F3B                     	;# 
   958  1F3C                     	;# 
   959  1F3D                     	;# 
   960  1F3E                     	;# 
   961  1F3F                     	;# 
   962  1F4E                     	;# 
   963  1F4F                     	;# 
   964  1F50                     	;# 
   965  1F51                     	;# 
   966  1F52                     	;# 
   967  1F53                     	;# 
   968  1F54                     	;# 
   969  1F55                     	;# 
   970  1FE4                     	;# 
   971  1FE5                     	;# 
   972  1FE6                     	;# 
   973  1FE7                     	;# 
   974  1FE8                     	;# 
   975  1FE8                     	;# 
   976  1FE9                     	;# 
   977  1FEA                     	;# 
   978  1FEA                     	;# 
   979  1FEB                     	;# 
   980  1FED                     	;# 
   981  1FEE                     	;# 
   982  1FEF                     	;# 
   983  0000                     	;# 
   984  0001                     	;# 
   985  0002                     	;# 
   986  0003                     	;# 
   987  0004                     	;# 
   988  0005                     	;# 
   989  0006                     	;# 
   990  0007                     	;# 
   991  0008                     	;# 
   992  0009                     	;# 
   993  000A                     	;# 
   994  000B                     	;# 
   995  000C                     	;# 
   996  000E                     	;# 
   997  0012                     	;# 
   998  0014                     	;# 
   999  0018                     	;# 
  1000  001A                     	;# 
  1001  009B                     	;# 
  1002  009B                     	;# 
  1003  009C                     	;# 
  1004  009D                     	;# 
  1005  009E                     	;# 
  1006  009F                     	;# 
  1007  0119                     	;# 
  1008  0119                     	;# 
  1009  0119                     	;# 
  1010  011A                     	;# 
  1011  011A                     	;# 
  1012  011A                     	;# 
  1013  011B                     	;# 
  1014  011B                     	;# 
  1015  011B                     	;# 
  1016  011B                     	;# 
  1017  011B                     	;# 
  1018  011C                     	;# 
  1019  011C                     	;# 
  1020  011C                     	;# 
  1021  011D                     	;# 
  1022  011D                     	;# 
  1023  011D                     	;# 
  1024  011E                     	;# 
  1025  011E                     	;# 
  1026  011E                     	;# 
  1027  011F                     	;# 
  1028  011F                     	;# 
  1029  011F                     	;# 
  1030  011F                     	;# 
  1031  011F                     	;# 
  1032  018C                     	;# 
  1033  018D                     	;# 
  1034  018E                     	;# 
  1035  018F                     	;# 
  1036  0190                     	;# 
  1037  0191                     	;# 
  1038  0192                     	;# 
  1039  020C                     	;# 
  1040  020C                     	;# 
  1041  020D                     	;# 
  1042  020E                     	;# 
  1043  020F                     	;# 
  1044  020F                     	;# 
  1045  0210                     	;# 
  1046  0210                     	;# 
  1047  0211                     	;# 
  1048  0211                     	;# 
  1049  028C                     	;# 
  1050  028C                     	;# 
  1051  028D                     	;# 
  1052  028D                     	;# 
  1053  028E                     	;# 
  1054  028F                     	;# 
  1055  0290                     	;# 
  1056  0291                     	;# 
  1057  030C                     	;# 
  1058  030C                     	;# 
  1059  030D                     	;# 
  1060  030E                     	;# 
  1061  030F                     	;# 
  1062  0310                     	;# 
  1063  0310                     	;# 
  1064  0311                     	;# 
  1065  0312                     	;# 
  1066  0313                     	;# 
  1067  0314                     	;# 
  1068  0314                     	;# 
  1069  0315                     	;# 
  1070  0316                     	;# 
  1071  0318                     	;# 
  1072  0318                     	;# 
  1073  0319                     	;# 
  1074  031A                     	;# 
  1075  031C                     	;# 
  1076  031C                     	;# 
  1077  031D                     	;# 
  1078  031E                     	;# 
  1079  038C                     	;# 
  1080  038C                     	;# 
  1081  038D                     	;# 
  1082  038E                     	;# 
  1083  058C                     	;# 
  1084  058C                     	;# 
  1085  058D                     	;# 
  1086  058E                     	;# 
  1087  058F                     	;# 
  1088  058F                     	;# 
  1089  0590                     	;# 
  1090  0591                     	;# 
  1091  0592                     	;# 
  1092  0593                     	;# 
  1093  059C                     	;# 
  1094  059C                     	;# 
  1095  059D                     	;# 
  1096  059D                     	;# 
  1097  059E                     	;# 
  1098  059F                     	;# 
  1099  060C                     	;# 
  1100  060D                     	;# 
  1101  060E                     	;# 
  1102  060F                     	;# 
  1103  0610                     	;# 
  1104  0611                     	;# 
  1105  0612                     	;# 
  1106  0613                     	;# 
  1107  0614                     	;# 
  1108  070C                     	;# 
  1109  070D                     	;# 
  1110  070E                     	;# 
  1111  070F                     	;# 
  1112  0710                     	;# 
  1113  0711                     	;# 
  1114  0712                     	;# 
  1115  0713                     	;# 
  1116  0716                     	;# 
  1117  0717                     	;# 
  1118  0718                     	;# 
  1119  0719                     	;# 
  1120  071A                     	;# 
  1121  071B                     	;# 
  1122  071C                     	;# 
  1123  071D                     	;# 
  1124  0796                     	;# 
  1125  0797                     	;# 
  1126  0798                     	;# 
  1127  0799                     	;# 
  1128  079A                     	;# 
  1129  079B                     	;# 
  1130  080C                     	;# 
  1131  080D                     	;# 
  1132  080E                     	;# 
  1133  080F                     	;# 
  1134  0810                     	;# 
  1135  0811                     	;# 
  1136  0813                     	;# 
  1137  0814                     	;# 
  1138  081A                     	;# 
  1139  081A                     	;# 
  1140  081B                     	;# 
  1141  081C                     	;# 
  1142  081C                     	;# 
  1143  081D                     	;# 
  1144  081E                     	;# 
  1145  081F                     	;# 
  1146  088C                     	;# 
  1147  088D                     	;# 
  1148  088E                     	;# 
  1149  088F                     	;# 
  1150  0890                     	;# 
  1151  0891                     	;# 
  1152  0892                     	;# 
  1153  0893                     	;# 
  1154  0895                     	;# 
  1155  0896                     	;# 
  1156  090C                     	;# 
  1157  090E                     	;# 
  1158  090F                     	;# 
  1159  091F                     	;# 
  1160  098F                     	;# 
  1161  098F                     	;# 
  1162  0990                     	;# 
  1163  0991                     	;# 
  1164  0992                     	;# 
  1165  0993                     	;# 
  1166  0994                     	;# 
  1167  0995                     	;# 
  1168  0996                     	;# 
  1169  0997                     	;# 
  1170  0A19                     	;# 
  1171  0A19                     	;# 
  1172  0A1A                     	;# 
  1173  0A1A                     	;# 
  1174  0A1B                     	;# 
  1175  0A1B                     	;# 
  1176  0A1B                     	;# 
  1177  0A1C                     	;# 
  1178  0A1C                     	;# 
  1179  0A1D                     	;# 
  1180  0A1D                     	;# 
  1181  0A1E                     	;# 
  1182  0A1E                     	;# 
  1183  0A1F                     	;# 
  1184  0A1F                     	;# 
  1185  0A1F                     	;# 
  1186  1E0F                     	;# 
  1187  1E10                     	;# 
  1188  1E11                     	;# 
  1189  1E12                     	;# 
  1190  1E13                     	;# 
  1191  1E14                     	;# 
  1192  1E15                     	;# 
  1193  1E16                     	;# 
  1194  1E17                     	;# 
  1195  1E18                     	;# 
  1196  1E19                     	;# 
  1197  1E1A                     	;# 
  1198  1E1B                     	;# 
  1199  1E1C                     	;# 
  1200  1E1D                     	;# 
  1201  1E1E                     	;# 
  1202  1E1F                     	;# 
  1203  1E20                     	;# 
  1204  1E21                     	;# 
  1205  1E22                     	;# 
  1206  1E23                     	;# 
  1207  1E24                     	;# 
  1208  1E25                     	;# 
  1209  1E26                     	;# 
  1210  1E27                     	;# 
  1211  1E28                     	;# 
  1212  1E29                     	;# 
  1213  1E2A                     	;# 
  1214  1E2B                     	;# 
  1215  1E2C                     	;# 
  1216  1E2D                     	;# 
  1217  1E2E                     	;# 
  1218  1E2F                     	;# 
  1219  1E30                     	;# 
  1220  1E31                     	;# 
  1221  1E32                     	;# 
  1222  1E33                     	;# 
  1223  1E34                     	;# 
  1224  1E35                     	;# 
  1225  1E36                     	;# 
  1226  1E37                     	;# 
  1227  1E8F                     	;# 
  1228  1E90                     	;# 
  1229  1E91                     	;# 
  1230  1E92                     	;# 
  1231  1E93                     	;# 
  1232  1E9C                     	;# 
  1233  1EA1                     	;# 
  1234  1EA2                     	;# 
  1235  1EB1                     	;# 
  1236  1EBB                     	;# 
  1237  1EBC                     	;# 
  1238  1EBD                     	;# 
  1239  1EBE                     	;# 
  1240  1EC3                     	;# 
  1241  1EC5                     	;# 
  1242  1EC6                     	;# 
  1243  1EC7                     	;# 
  1244  1ECB                     	;# 
  1245  1ECC                     	;# 
  1246  1ECD                     	;# 
  1247  1ECE                     	;# 
  1248  1F10                     	;# 
  1249  1F11                     	;# 
  1250  1F12                     	;# 
  1251  1F13                     	;# 
  1252  1F14                     	;# 
  1253  1F15                     	;# 
  1254  1F20                     	;# 
  1255  1F21                     	;# 
  1256  1F22                     	;# 
  1257  1F23                     	;# 
  1258  1F24                     	;# 
  1259  1F25                     	;# 
  1260  1F38                     	;# 
  1261  1F39                     	;# 
  1262  1F3A                     	;# 
  1263  1F3B                     	;# 
  1264  1F3C                     	;# 
  1265  1F3D                     	;# 
  1266  1F3E                     	;# 
  1267  1F3F                     	;# 
  1268  1F4E                     	;# 
  1269  1F4F                     	;# 
  1270  1F50                     	;# 
  1271  1F51                     	;# 
  1272  1F52                     	;# 
  1273  1F53                     	;# 
  1274  1F54                     	;# 
  1275  1F55                     	;# 
  1276  1FE4                     	;# 
  1277  1FE5                     	;# 
  1278  1FE6                     	;# 
  1279  1FE7                     	;# 
  1280  1FE8                     	;# 
  1281  1FE8                     	;# 
  1282  1FE9                     	;# 
  1283  1FEA                     	;# 
  1284  1FEA                     	;# 
  1285  1FEB                     	;# 
  1286  1FED                     	;# 
  1287  1FEE                     	;# 
  1288  1FEF                     	;# 
  1289  0000                     	;# 
  1290  0001                     	;# 
  1291  0002                     	;# 
  1292  0003                     	;# 
  1293  0004                     	;# 
  1294  0005                     	;# 
  1295  0006                     	;# 
  1296  0007                     	;# 
  1297  0008                     	;# 
  1298  0009                     	;# 
  1299  000A                     	;# 
  1300  000B                     	;# 
  1301  000C                     	;# 
  1302  000E                     	;# 
  1303  0012                     	;# 
  1304  0014                     	;# 
  1305  0018                     	;# 
  1306  001A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  009F                     	;# 
  1313  0119                     	;# 
  1314  0119                     	;# 
  1315  0119                     	;# 
  1316  011A                     	;# 
  1317  011A                     	;# 
  1318  011A                     	;# 
  1319  011B                     	;# 
  1320  011B                     	;# 
  1321  011B                     	;# 
  1322  011B                     	;# 
  1323  011B                     	;# 
  1324  011C                     	;# 
  1325  011C                     	;# 
  1326  011C                     	;# 
  1327  011D                     	;# 
  1328  011D                     	;# 
  1329  011D                     	;# 
  1330  011E                     	;# 
  1331  011E                     	;# 
  1332  011E                     	;# 
  1333  011F                     	;# 
  1334  011F                     	;# 
  1335  011F                     	;# 
  1336  011F                     	;# 
  1337  011F                     	;# 
  1338  018C                     	;# 
  1339  018D                     	;# 
  1340  018E                     	;# 
  1341  018F                     	;# 
  1342  0190                     	;# 
  1343  0191                     	;# 
  1344  0192                     	;# 
  1345  020C                     	;# 
  1346  020C                     	;# 
  1347  020D                     	;# 
  1348  020E                     	;# 
  1349  020F                     	;# 
  1350  020F                     	;# 
  1351  0210                     	;# 
  1352  0210                     	;# 
  1353  0211                     	;# 
  1354  0211                     	;# 
  1355  028C                     	;# 
  1356  028C                     	;# 
  1357  028D                     	;# 
  1358  028D                     	;# 
  1359  028E                     	;# 
  1360  028F                     	;# 
  1361  0290                     	;# 
  1362  0291                     	;# 
  1363  030C                     	;# 
  1364  030C                     	;# 
  1365  030D                     	;# 
  1366  030E                     	;# 
  1367  030F                     	;# 
  1368  0310                     	;# 
  1369  0310                     	;# 
  1370  0311                     	;# 
  1371  0312                     	;# 
  1372  0313                     	;# 
  1373  0314                     	;# 
  1374  0314                     	;# 
  1375  0315                     	;# 
  1376  0316                     	;# 
  1377  0318                     	;# 
  1378  0318                     	;# 
  1379  0319                     	;# 
  1380  031A                     	;# 
  1381  031C                     	;# 
  1382  031C                     	;# 
  1383  031D                     	;# 
  1384  031E                     	;# 
  1385  038C                     	;# 
  1386  038C                     	;# 
  1387  038D                     	;# 
  1388  038E                     	;# 
  1389  058C                     	;# 
  1390  058C                     	;# 
  1391  058D                     	;# 
  1392  058E                     	;# 
  1393  058F                     	;# 
  1394  058F                     	;# 
  1395  0590                     	;# 
  1396  0591                     	;# 
  1397  0592                     	;# 
  1398  0593                     	;# 
  1399  059C                     	;# 
  1400  059C                     	;# 
  1401  059D                     	;# 
  1402  059D                     	;# 
  1403  059E                     	;# 
  1404  059F                     	;# 
  1405  060C                     	;# 
  1406  060D                     	;# 
  1407  060E                     	;# 
  1408  060F                     	;# 
  1409  0610                     	;# 
  1410  0611                     	;# 
  1411  0612                     	;# 
  1412  0613                     	;# 
  1413  0614                     	;# 
  1414  070C                     	;# 
  1415  070D                     	;# 
  1416  070E                     	;# 
  1417  070F                     	;# 
  1418  0710                     	;# 
  1419  0711                     	;# 
  1420  0712                     	;# 
  1421  0713                     	;# 
  1422  0716                     	;# 
  1423  0717                     	;# 
  1424  0718                     	;# 
  1425  0719                     	;# 
  1426  071A                     	;# 
  1427  071B                     	;# 
  1428  071C                     	;# 
  1429  071D                     	;# 
  1430  0796                     	;# 
  1431  0797                     	;# 
  1432  0798                     	;# 
  1433  0799                     	;# 
  1434  079A                     	;# 
  1435  079B                     	;# 
  1436  080C                     	;# 
  1437  080D                     	;# 
  1438  080E                     	;# 
  1439  080F                     	;# 
  1440  0810                     	;# 
  1441  0811                     	;# 
  1442  0813                     	;# 
  1443  0814                     	;# 
  1444  081A                     	;# 
  1445  081A                     	;# 
  1446  081B                     	;# 
  1447  081C                     	;# 
  1448  081C                     	;# 
  1449  081D                     	;# 
  1450  081E                     	;# 
  1451  081F                     	;# 
  1452  088C                     	;# 
  1453  088D                     	;# 
  1454  088E                     	;# 
  1455  088F                     	;# 
  1456  0890                     	;# 
  1457  0891                     	;# 
  1458  0892                     	;# 
  1459  0893                     	;# 
  1460  0895                     	;# 
  1461  0896                     	;# 
  1462  090C                     	;# 
  1463  090E                     	;# 
  1464  090F                     	;# 
  1465  091F                     	;# 
  1466  098F                     	;# 
  1467  098F                     	;# 
  1468  0990                     	;# 
  1469  0991                     	;# 
  1470  0992                     	;# 
  1471  0993                     	;# 
  1472  0994                     	;# 
  1473  0995                     	;# 
  1474  0996                     	;# 
  1475  0997                     	;# 
  1476  0A19                     	;# 
  1477  0A19                     	;# 
  1478  0A1A                     	;# 
  1479  0A1A                     	;# 
  1480  0A1B                     	;# 
  1481  0A1B                     	;# 
  1482  0A1B                     	;# 
  1483  0A1C                     	;# 
  1484  0A1C                     	;# 
  1485  0A1D                     	;# 
  1486  0A1D                     	;# 
  1487  0A1E                     	;# 
  1488  0A1E                     	;# 
  1489  0A1F                     	;# 
  1490  0A1F                     	;# 
  1491  0A1F                     	;# 
  1492  1E0F                     	;# 
  1493  1E10                     	;# 
  1494  1E11                     	;# 
  1495  1E12                     	;# 
  1496  1E13                     	;# 
  1497  1E14                     	;# 
  1498  1E15                     	;# 
  1499  1E16                     	;# 
  1500  1E17                     	;# 
  1501  1E18                     	;# 
  1502  1E19                     	;# 
  1503  1E1A                     	;# 
  1504  1E1B                     	;# 
  1505  1E1C                     	;# 
  1506  1E1D                     	;# 
  1507  1E1E                     	;# 
  1508  1E1F                     	;# 
  1509  1E20                     	;# 
  1510  1E21                     	;# 
  1511  1E22                     	;# 
  1512  1E23                     	;# 
  1513  1E24                     	;# 
  1514  1E25                     	;# 
  1515  1E26                     	;# 
  1516  1E27                     	;# 
  1517  1E28                     	;# 
  1518  1E29                     	;# 
  1519  1E2A                     	;# 
  1520  1E2B                     	;# 
  1521  1E2C                     	;# 
  1522  1E2D                     	;# 
  1523  1E2E                     	;# 
  1524  1E2F                     	;# 
  1525  1E30                     	;# 
  1526  1E31                     	;# 
  1527  1E32                     	;# 
  1528  1E33                     	;# 
  1529  1E34                     	;# 
  1530  1E35                     	;# 
  1531  1E36                     	;# 
  1532  1E37                     	;# 
  1533  1E8F                     	;# 
  1534  1E90                     	;# 
  1535  1E91                     	;# 
  1536  1E92                     	;# 
  1537  1E93                     	;# 
  1538  1E9C                     	;# 
  1539  1EA1                     	;# 
  1540  1EA2                     	;# 
  1541  1EB1                     	;# 
  1542  1EBB                     	;# 
  1543  1EBC                     	;# 
  1544  1EBD                     	;# 
  1545  1EBE                     	;# 
  1546  1EC3                     	;# 
  1547  1EC5                     	;# 
  1548  1EC6                     	;# 
  1549  1EC7                     	;# 
  1550  1ECB                     	;# 
  1551  1ECC                     	;# 
  1552  1ECD                     	;# 
  1553  1ECE                     	;# 
  1554  1F10                     	;# 
  1555  1F11                     	;# 
  1556  1F12                     	;# 
  1557  1F13                     	;# 
  1558  1F14                     	;# 
  1559  1F15                     	;# 
  1560  1F20                     	;# 
  1561  1F21                     	;# 
  1562  1F22                     	;# 
  1563  1F23                     	;# 
  1564  1F24                     	;# 
  1565  1F25                     	;# 
  1566  1F38                     	;# 
  1567  1F39                     	;# 
  1568  1F3A                     	;# 
  1569  1F3B                     	;# 
  1570  1F3C                     	;# 
  1571  1F3D                     	;# 
  1572  1F3E                     	;# 
  1573  1F3F                     	;# 
  1574  1F4E                     	;# 
  1575  1F4F                     	;# 
  1576  1F50                     	;# 
  1577  1F51                     	;# 
  1578  1F52                     	;# 
  1579  1F53                     	;# 
  1580  1F54                     	;# 
  1581  1F55                     	;# 
  1582  1FE4                     	;# 
  1583  1FE5                     	;# 
  1584  1FE6                     	;# 
  1585  1FE7                     	;# 
  1586  1FE8                     	;# 
  1587  1FE8                     	;# 
  1588  1FE9                     	;# 
  1589  1FEA                     	;# 
  1590  1FEA                     	;# 
  1591  1FEB                     	;# 
  1592  1FED                     	;# 
  1593  1FEE                     	;# 
  1594  1FEF                     	;# 
  1595                           
  1596                           	psect	idataBANK0
  1597  04B2                     __pidataBANK0:	
  1598                           
  1599                           ;initializer for _volume_hp_prev
  1600  04B2  340A               	retlw	10
  1601                           
  1602                           ;initializer for _volume_hp
  1603  04B3  340A               	retlw	10
  1604                           
  1605                           ;initializer for _volume_sp_prev
  1606  04B4  340A               	retlw	10
  1607                           
  1608                           ;initializer for _volume_sp
  1609  04B5  340A               	retlw	10
  1610  0014                     _TRISCbits	set	20
  1611  000B                     _INTCONbits	set	11
  1612  0014                     _TRISC	set	20
  1613  0012                     _TRISA	set	18
  1614  0070                     _RC0	set	112
  1615  0071                     _RC1	set	113
  1616  0064                     _RA4	set	100
  1617  0065                     _RA5	set	101
  1618  0072                     _RC2	set	114
  1619  0073                     _RC3	set	115
  1620  0074                     _RC4	set	116
  1621  018C                     _SSP1BUF	set	396
  1622  0191                     _SSP1CON2bits	set	401
  1623  018F                     _SSP1STAT	set	399
  1624  018D                     _SSP1ADD	set	397
  1625  0191                     _SSP1CON2	set	401
  1626  0190                     _SSP1CON1	set	400
  1627  020C                     _TMR1	set	524
  1628  0211                     _T1CLK	set	529
  1629  020F                     _T1GCONbits	set	527
  1630  020E                     _T1CONbits	set	526
  1631  071A                     _PIE4bits	set	1818
  1632  3880                     _TMR1IF	set	14464
  1633  1E8F                     _PPSLOCK	set	7823
  1634  1EC5                     _SSP1CLKPPS	set	7877
  1635  1EC6                     _SSP1DATPPS	set	7878
  1636  1F20                     _RC0PPS	set	7968
  1637  1F21                     _RC1PPS	set	7969
  1638  1F4F                     _WPUC	set	8015
  1639  1F39                     _WPUA	set	7993
  1640  1F4E                     _ANSELC	set	8014
  1641  1F38                     _ANSELA	set	7992
  1642                           
  1643                           ; #config settings
  1644  0000                     
  1645                           	psect	cinit
  1646  001E                     start_initialization:	
  1647  001E                     __initialization:	
  1648                           
  1649                           ; Initialize objects allocated to BANK0
  1650  001E  3184  24B2  3180   	fcall	__pidataBANK0	;fetch initializer
  1651  0021  00C6               	movwf	__pdataBANK0& (0+127)
  1652  0022  3184  24B3  3180   	fcall	__pidataBANK0+1	;fetch initializer
  1653  0025  00C7               	movwf	(__pdataBANK0+1)& (0+127)
  1654  0026  3184  24B4  3180   	fcall	__pidataBANK0+2	;fetch initializer
  1655  0029  00C8               	movwf	(__pdataBANK0+2)& (0+127)
  1656  002A  3184  24B5  3180   	fcall	__pidataBANK0+3	;fetch initializer
  1657  002D  00C9               	movwf	(__pdataBANK0+3)& (0+127)
  1658                           
  1659                           ; Clear objects allocated to BANK0
  1660  002E  3020               	movlw	low __pbssBANK0
  1661  002F  0084               	movwf	4
  1662  0030  3000               	movlw	high __pbssBANK0
  1663  0031  0085               	movwf	5
  1664  0032  301D               	movlw	29
  1665  0033  3184  24A0  3180   	fcall	clear_ram0
  1666  0036                     end_of_initialization:	
  1667                           ;End of C runtime variable initialization code
  1668                           
  1669  0036                     __end_of__initialization:	
  1670  0036  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1671  0037  0140               	movlb	0
  1672  0038  3180  283A         	ljmp	_main	;jump to C main() function
  1673                           
  1674                           	psect	bssBANK0
  1675  0020                     __pbssBANK0:	
  1676  0020                     _vol_minus_time_hold:	
  1677  0020                     	ds	4
  1678  0024                     _vol_minus_time_start:	
  1679  0024                     	ds	4
  1680  0028                     _vol_plus_time_hold:	
  1681  0028                     	ds	4
  1682  002C                     _vol_plus_time_start:	
  1683  002C                     	ds	4
  1684  0030                     _HPS_time_start:	
  1685  0030                     	ds	4
  1686  0034                     _timer_counter:	
  1687  0034                     	ds	4
  1688  0038                     _vol_minus_state:	
  1689  0038                     	ds	1
  1690  0039                     _vol_plus_state:	
  1691  0039                     	ds	1
  1692  003A                     _HPS_state:	
  1693  003A                     	ds	1
  1694  003B                     _mute_state:	
  1695  003B                     	ds	1
  1696  003C                     _mute_config:	
  1697  003C                     	ds	1
  1698                           
  1699                           	psect	dataBANK0
  1700  0046                     __pdataBANK0:	
  1701  0046                     _volume_hp_prev:	
  1702  0046                     	ds	1
  1703  0047                     _volume_hp:	
  1704  0047                     	ds	1
  1705  0048                     _volume_sp_prev:	
  1706  0048                     	ds	1
  1707  0049                     _volume_sp:	
  1708  0049                     	ds	1
  1709                           
  1710                           	psect	clrtext
  1711  04A0                     clear_ram0:	
  1712                           ;	Called with FSR0 containing the base address, and
  1713                           ;	WREG with the size to clear
  1714                           
  1715  04A0  0064               	clrwdt	;clear the watchdog before getting into this loop
  1716  04A1                     clrloop0:	
  1717  04A1  0180               	clrf	0	;clear RAM location pointed to by FSR
  1718  04A2  3101               	addfsr 0,1
  1719  04A3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1720  04A4  2CA1               	goto	clrloop0	;have we reached the end yet?
  1721  04A5  3400               	retlw	0	;all done for this memory range, return
  1722                           
  1723                           	psect	cstackCOMMON
  1724  0070                     __pcstackCOMMON:	
  1725  0070                     ?_PPS_unlock:	
  1726  0070                     ??_PPS_unlock:	
  1727                           ; 1 bytes @ 0x0
  1728                           
  1729  0070                     ?_PPS_lock:	
  1730                           ; 1 bytes @ 0x0
  1731                           
  1732  0070                     ??_PPS_lock:	
  1733                           ; 1 bytes @ 0x0
  1734                           
  1735  0070                     ?_LM49450_Wii_init:	
  1736                           ; 1 bytes @ 0x0
  1737                           
  1738  0070                     ?_LM49450_PS2_init:	
  1739                           ; 1 bytes @ 0x0
  1740                           
  1741  0070                     ?_LM49450_analog_init:	
  1742                           ; 1 bytes @ 0x0
  1743                           
  1744  0070                     ?_LM49450_DC_init:	
  1745                           ; 1 bytes @ 0x0
  1746                           
  1747  0070                     ?_PIC_SETUP:	
  1748                           ; 1 bytes @ 0x0
  1749                           
  1750  0070                     ??_PIC_SETUP:	
  1751                           ; 1 bytes @ 0x0
  1752                           
  1753  0070                     ?_ISR:	
  1754                           ; 1 bytes @ 0x0
  1755                           
  1756  0070                     ??_ISR:	
  1757                           ; 1 bytes @ 0x0
  1758                           
  1759  0070                     ?_main:	
  1760                           ; 1 bytes @ 0x0
  1761                           
  1762  0070                     ?_I2C_Master_Wait:	
  1763                           ; 1 bytes @ 0x0
  1764                           
  1765  0070                     ??_I2C_Master_Wait:	
  1766                           ; 1 bytes @ 0x0
  1767                           
  1768  0070                     ?_I2C_Master_Start:	
  1769                           ; 1 bytes @ 0x0
  1770                           
  1771  0070                     ??_I2C_Master_Start:	
  1772                           ; 1 bytes @ 0x0
  1773                           
  1774  0070                     ?_I2C_Master_Stop:	
  1775                           ; 1 bytes @ 0x0
  1776                           
  1777  0070                     ??_I2C_Master_Stop:	
  1778                           ; 1 bytes @ 0x0
  1779                           
  1780  0070                     ?_I2C_Master_Write:	
  1781                           ; 1 bytes @ 0x0
  1782                           
  1783  0070                     ??_I2C_Master_Write:	
  1784                           ; 1 bytes @ 0x0
  1785                           
  1786  0070                     ?_get_time:	
  1787                           ; 1 bytes @ 0x0
  1788                           
  1789  0070                     ?_timer_diff:	
  1790                           ; 4 bytes @ 0x0
  1791                           
  1792  0070                     ?___lldiv:	
  1793                           ; 4 bytes @ 0x0
  1794                           
  1795  0070                     I2C_Master_Write@data:	
  1796                           ; 4 bytes @ 0x0
  1797                           
  1798  0070                     timer_diff@t:	
  1799                           ; 1 bytes @ 0x0
  1800                           
  1801  0070                     ___lldiv@divisor:	
  1802                           ; 4 bytes @ 0x0
  1803                           
  1804                           
  1805                           ; 4 bytes @ 0x0
  1806  0070                     	ds	1
  1807  0071                     ?_LM49450_write:	
  1808  0071                     LM49450_write@data:	
  1809                           ; 1 bytes @ 0x1
  1810                           
  1811                           
  1812                           ; 1 bytes @ 0x1
  1813  0071                     	ds	1
  1814  0072                     ??_LM49450_write:	
  1815  0072                     LM49450_write@reg:	
  1816                           ; 1 bytes @ 0x2
  1817                           
  1818                           
  1819                           ; 1 bytes @ 0x2
  1820  0072                     	ds	1
  1821  0073                     ??_LM49450_Wii_init:	
  1822  0073                     ??_LM49450_PS2_init:	
  1823                           ; 1 bytes @ 0x3
  1824                           
  1825  0073                     ??_LM49450_analog_init:	
  1826                           ; 1 bytes @ 0x3
  1827                           
  1828  0073                     ??_LM49450_DC_init:	
  1829                           ; 1 bytes @ 0x3
  1830                           
  1831                           
  1832                           ; 1 bytes @ 0x3
  1833  0073                     	ds	1
  1834  0074                     ??_get_time:	
  1835  0074                     ??_timer_diff:	
  1836                           ; 1 bytes @ 0x4
  1837                           
  1838  0074                     ___lldiv@dividend:	
  1839                           ; 1 bytes @ 0x4
  1840                           
  1841                           
  1842                           ; 4 bytes @ 0x4
  1843  0074                     	ds	4
  1844  0078                     ??___lldiv:	
  1845                           
  1846                           ; 1 bytes @ 0x8
  1847  0078                     	ds	1
  1848  0079                     ___lldiv@quotient:	
  1849                           
  1850                           ; 4 bytes @ 0x9
  1851  0079                     	ds	4
  1852  007D                     ___lldiv@counter:	
  1853                           
  1854                           ; 1 bytes @ 0xD
  1855  007D                     	ds	1
  1856                           
  1857                           	psect	cstackBANK0
  1858  003D                     __pcstackBANK0:	
  1859  003D                     ?_I2C_Master_Init:	
  1860  003D                     I2C_Master_Init@clk:	
  1861                           ; 1 bytes @ 0x0
  1862                           
  1863                           
  1864                           ; 4 bytes @ 0x0
  1865  003D                     	ds	4
  1866  0041                     ??_I2C_Master_Init:	
  1867                           
  1868                           ; 1 bytes @ 0x4
  1869  0041                     	ds	4
  1870  0045                     ??_main:	
  1871                           
  1872                           ; 1 bytes @ 0x8
  1873  0045                     	ds	1
  1874                           
  1875                           	psect	maintext
  1876  003A                     __pmaintext:	
  1877 ;;
  1878 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1879 ;;
  1880 ;; *************** function _main *****************
  1881 ;; Defined at:
  1882 ;;		line 75 in file "main.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;		None
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;		None
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  1    wreg      void 
  1889 ;; Registers used:
  1890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : B3F/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1896 ;;      Params:         0       0       0       0       0       0       0       0
  1897 ;;      Locals:         0       0       0       0       0       0       0       0
  1898 ;;      Temps:          0       1       0       0       0       0       0       0
  1899 ;;      Totals:         0       1       0       0       0       0       0       0
  1900 ;;Total ram usage:        1 bytes
  1901 ;; Hardware stack levels required when called:    5
  1902 ;; This function calls:
  1903 ;;		_I2C_Master_Init
  1904 ;;		_LM49450_DC_init
  1905 ;;		_LM49450_PS2_init
  1906 ;;		_LM49450_Wii_init
  1907 ;;		_LM49450_analog_init
  1908 ;;		_LM49450_write
  1909 ;;		_PIC_SETUP
  1910 ;;		_PPS_lock
  1911 ;;		_PPS_unlock
  1912 ;;		_get_time
  1913 ;;		_timer_diff
  1914 ;; This function is called by:
  1915 ;;		Startup code after reset
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           
  1920                           ;psect for function _main
  1921  003A                     _main:	
  1922  003A                     l1421:	
  1923                           ;incstack = 0
  1924                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1925                           
  1926                           
  1927                           ;main.c: 77: PIC_SETUP();
  1928  003A  3184  2420  3180   	fcall	_PIC_SETUP
  1929                           
  1930                           ;main.c: 80: PPS_unlock();
  1931  003D  3184  2499  3180   	fcall	_PPS_unlock
  1932  0040                     l1423:	
  1933                           
  1934                           ;main.c: 81: SSP1DATPPS = 0x11;
  1935  0040  3011               	movlw	17
  1936  0041  017D               	movlb	61	; select bank61
  1937  0042  00C6               	movwf	70	;volatile
  1938  0043                     l1425:	
  1939                           
  1940                           ;main.c: 82: RC1PPS = 0x16;
  1941  0043  3016               	movlw	22
  1942  0044  017E               	movlb	62	; select bank62
  1943  0045  00A1               	movwf	33	;volatile
  1944  0046                     l1427:	
  1945                           
  1946                           ;main.c: 83: SSP1CLKPPS = 0x10;
  1947  0046  3010               	movlw	16
  1948  0047  017D               	movlb	61	; select bank61
  1949  0048  00C5               	movwf	69	;volatile
  1950  0049                     l1429:	
  1951                           
  1952                           ;main.c: 84: RC0PPS = 0x15;
  1953  0049  3015               	movlw	21
  1954  004A  017E               	movlb	62	; select bank62
  1955  004B  00A0               	movwf	32	;volatile
  1956                           
  1957                           ;main.c: 85: PPS_lock();
  1958  004C  3184  2489  3180   	fcall	_PPS_lock
  1959                           
  1960                           ;main.c: 86: I2C_Master_Init(100000);
  1961  004F  3000               	movlw	0
  1962  0050  0140               	movlb	0	; select bank0
  1963  0051  00C0               	movwf	I2C_Master_Init@clk+3
  1964  0052  3001               	movlw	1
  1965  0053  00BF               	movwf	I2C_Master_Init@clk+2
  1966  0054  3086               	movlw	134
  1967  0055  00BE               	movwf	I2C_Master_Init@clk+1
  1968  0056  30A0               	movlw	160
  1969  0057  00BD               	movwf	I2C_Master_Init@clk
  1970  0058  3183  2381  3180   	fcall	_I2C_Master_Init
  1971  005B                     l1431:	
  1972                           
  1973                           ;main.c: 89: if(RC4 && RC3) {
  1974  005B  0140               	movlb	0	; select bank0
  1975  005C  1E0E               	btfss	14,4	;volatile
  1976  005D  285F               	goto	u811
  1977  005E  2860               	goto	u810
  1978  005F                     u811:	
  1979  005F  286C               	goto	l108
  1980  0060                     u810:	
  1981  0060                     l1433:	
  1982  0060  1D8E               	btfss	14,3	;volatile
  1983  0061  2863               	goto	u821
  1984  0062  2864               	goto	u820
  1985  0063                     u821:	
  1986  0063  286C               	goto	l108
  1987  0064                     u820:	
  1988  0064                     l1435:	
  1989                           
  1990                           ;main.c: 90: mute_config = LM49450_Wii_init();
  1991  0064  3183  23D6  3180   	fcall	_LM49450_Wii_init
  1992  0067  0140               	movlb	0	; select bank0
  1993  0068  00C5               	movwf	??_main
  1994  0069  0845               	movf	??_main,w
  1995  006A  00BC               	movwf	_mute_config
  1996                           
  1997                           ;main.c: 91: }
  1998  006B  289B               	goto	l109
  1999  006C                     l108:	
  2000                           
  2001                           ;main.c: 92: else if(RC4 && !RC3) {
  2002  006C  1E0E               	btfss	14,4	;volatile
  2003  006D  286F               	goto	u831
  2004  006E  2870               	goto	u830
  2005  006F                     u831:	
  2006  006F  287C               	goto	l110
  2007  0070                     u830:	
  2008  0070                     l1437:	
  2009  0070  198E               	btfsc	14,3	;volatile
  2010  0071  2873               	goto	u841
  2011  0072  2874               	goto	u840
  2012  0073                     u841:	
  2013  0073  287C               	goto	l110
  2014  0074                     u840:	
  2015  0074                     l1439:	
  2016                           
  2017                           ;main.c: 93: mute_config = LM49450_PS2_init();
  2018  0074  3183  23AF  3180   	fcall	_LM49450_PS2_init
  2019  0077  0140               	movlb	0	; select bank0
  2020  0078  00C5               	movwf	??_main
  2021  0079  0845               	movf	??_main,w
  2022  007A  00BC               	movwf	_mute_config
  2023                           
  2024                           ;main.c: 94: }
  2025  007B  289B               	goto	l109
  2026  007C                     l110:	
  2027                           
  2028                           ;main.c: 95: else if(!RC4 && !RC3) {
  2029  007C  1A0E               	btfsc	14,4	;volatile
  2030  007D  287F               	goto	u851
  2031  007E  2880               	goto	u850
  2032  007F                     u851:	
  2033  007F  288C               	goto	l112
  2034  0080                     u850:	
  2035  0080                     l1441:	
  2036  0080  198E               	btfsc	14,3	;volatile
  2037  0081  2883               	goto	u861
  2038  0082  2884               	goto	u860
  2039  0083                     u861:	
  2040  0083  288C               	goto	l112
  2041  0084                     u860:	
  2042  0084                     l1443:	
  2043                           
  2044                           ;main.c: 96: mute_config = LM49450_analog_init();
  2045  0084  3184  247F  3180   	fcall	_LM49450_analog_init
  2046  0087  0140               	movlb	0	; select bank0
  2047  0088  00C5               	movwf	??_main
  2048  0089  0845               	movf	??_main,w
  2049  008A  00BC               	movwf	_mute_config
  2050                           
  2051                           ;main.c: 97: }
  2052  008B  289B               	goto	l109
  2053  008C                     l112:	
  2054                           
  2055                           ;main.c: 98: else if(!RC4 && RC3) {
  2056  008C  1A0E               	btfsc	14,4	;volatile
  2057  008D  288F               	goto	u871
  2058  008E  2890               	goto	u870
  2059  008F                     u871:	
  2060  008F  289B               	goto	l109
  2061  0090                     u870:	
  2062  0090                     l1445:	
  2063  0090  1D8E               	btfss	14,3	;volatile
  2064  0091  2893               	goto	u881
  2065  0092  2894               	goto	u880
  2066  0093                     u881:	
  2067  0093  289B               	goto	l109
  2068  0094                     u880:	
  2069  0094                     l1447:	
  2070                           
  2071                           ;main.c: 99: mute_config = LM49450_DC_init();
  2072  0094  3183  23FB  3180   	fcall	_LM49450_DC_init
  2073  0097  0140               	movlb	0	; select bank0
  2074  0098  00C5               	movwf	??_main
  2075  0099  0845               	movf	??_main,w
  2076  009A  00BC               	movwf	_mute_config
  2077  009B                     l109:	
  2078                           
  2079                           ;main.c: 100: };main.c: 103: LM49450_write(0x08, volume_sp);
  2080  009B  0849               	movf	_volume_sp,w
  2081  009C  00C5               	movwf	??_main
  2082  009D  0845               	movf	??_main,w
  2083  009E  00F1               	movwf	LM49450_write@data
  2084  009F  3008               	movlw	8
  2085  00A0  3184  2455  3180   	fcall	_LM49450_write
  2086                           
  2087                           ;main.c: 104: LM49450_write(0x07, volume_hp);
  2088  00A3  0140               	movlb	0	; select bank0
  2089  00A4  0847               	movf	_volume_hp,w
  2090  00A5  00C5               	movwf	??_main
  2091  00A6  0845               	movf	??_main,w
  2092  00A7  00F1               	movwf	LM49450_write@data
  2093  00A8  3007               	movlw	7
  2094  00A9  3184  2455  3180   	fcall	_LM49450_write
  2095  00AC                     l1449:	
  2096                           
  2097                           ;main.c: 109: if(RC2) {
  2098  00AC  0140               	movlb	0	; select bank0
  2099  00AD  1D0E               	btfss	14,2	;volatile
  2100  00AE  28B0               	goto	u891
  2101  00AF  28B1               	goto	u890
  2102  00B0                     u891:	
  2103  00B0  28FD               	goto	l1469
  2104  00B1                     u890:	
  2105  00B1                     l1451:	
  2106                           
  2107                           ;main.c: 110: if(HPS_state == 0) {
  2108  00B1  083A               	movf	_HPS_state,w
  2109  00B2  1D03               	btfss	3,2
  2110  00B3  28B5               	goto	u901
  2111  00B4  28B6               	goto	u900
  2112  00B5                     u901:	
  2113  00B5  28C5               	goto	l1457
  2114  00B6                     u900:	
  2115  00B6                     l1453:	
  2116                           
  2117                           ;main.c: 111: HPS_time_start = get_time();
  2118  00B6  3184  2475  3180   	fcall	_get_time
  2119  00B9  0873               	movf	?_get_time+3,w
  2120  00BA  0140               	movlb	0	; select bank0
  2121  00BB  00B3               	movwf	_HPS_time_start+3
  2122  00BC  0872               	movf	?_get_time+2,w
  2123  00BD  00B2               	movwf	_HPS_time_start+2
  2124  00BE  0871               	movf	?_get_time+1,w
  2125  00BF  00B1               	movwf	_HPS_time_start+1
  2126  00C0  0870               	movf	?_get_time,w
  2127  00C1  00B0               	movwf	_HPS_time_start
  2128  00C2                     l1455:	
  2129                           
  2130                           ;main.c: 112: HPS_state = 1;
  2131  00C2  01BA               	clrf	_HPS_state
  2132  00C3  0ABA               	incf	_HPS_state,f
  2133                           
  2134                           ;main.c: 113: }
  2135  00C4  2917               	goto	l1479
  2136  00C5                     l1457:	
  2137                           
  2138                           ;main.c: 114: else if(HPS_state == 1) {
  2139  00C5  033A               	decf	_HPS_state,w
  2140  00C6  1D03               	btfss	3,2
  2141  00C7  28C9               	goto	u911
  2142  00C8  28CA               	goto	u910
  2143  00C9                     u911:	
  2144  00C9  2917               	goto	l1479
  2145  00CA                     u910:	
  2146  00CA                     l1459:	
  2147                           
  2148                           ;main.c: 115: if(timer_diff(HPS_time_start) >= 4) {
  2149  00CA  0833               	movf	_HPS_time_start+3,w
  2150  00CB  00F3               	movwf	timer_diff@t+3
  2151  00CC  0832               	movf	_HPS_time_start+2,w
  2152  00CD  00F2               	movwf	timer_diff@t+2
  2153  00CE  0831               	movf	_HPS_time_start+1,w
  2154  00CF  00F1               	movwf	timer_diff@t+1
  2155  00D0  0830               	movf	_HPS_time_start,w
  2156  00D1  00F0               	movwf	timer_diff@t
  2157  00D2  3184  243F  3180   	fcall	_timer_diff
  2158  00D5  0873               	movf	?_timer_diff+3,w
  2159  00D6  1D03               	btfss	3,2
  2160  00D7  28E4               	goto	u920
  2161  00D8  0872               	movf	?_timer_diff+2,w
  2162  00D9  1D03               	btfss	3,2
  2163  00DA  28E4               	goto	u920
  2164  00DB  0871               	movf	?_timer_diff+1,w
  2165  00DC  1D03               	btfss	3,2
  2166  00DD  28E4               	goto	u920
  2167  00DE  3004               	movlw	4
  2168  00DF  0270               	subwf	?_timer_diff,w
  2169  00E0  1C03               	btfss	3,0
  2170  00E1  28E3               	goto	u921
  2171  00E2  28E4               	goto	u920
  2172  00E3                     u921:	
  2173  00E3  2917               	goto	l1479
  2174  00E4                     u920:	
  2175  00E4                     l1461:	
  2176                           
  2177                           ;main.c: 116: HPS_state = 2;
  2178  00E4  3002               	movlw	2
  2179  00E5  0140               	movlb	0	; select bank0
  2180  00E6  00C5               	movwf	??_main
  2181  00E7  0845               	movf	??_main,w
  2182  00E8  00BA               	movwf	_HPS_state
  2183  00E9                     l1463:	
  2184                           
  2185                           ;main.c: 117: if(volume_sp == 0 && mute_state == 0) {
  2186  00E9  0849               	movf	_volume_sp,w
  2187  00EA  1D03               	btfss	3,2
  2188  00EB  28ED               	goto	u931
  2189  00EC  28EE               	goto	u930
  2190  00ED                     u931:	
  2191  00ED  28FC               	goto	l118
  2192  00EE                     u930:	
  2193  00EE                     l1465:	
  2194  00EE  083B               	movf	_mute_state,w
  2195  00EF  1D03               	btfss	3,2
  2196  00F0  28F2               	goto	u941
  2197  00F1  28F3               	goto	u940
  2198  00F2                     u941:	
  2199  00F2  28FC               	goto	l118
  2200  00F3                     u940:	
  2201  00F3                     l1467:	
  2202                           
  2203                           ;main.c: 119: LM49450_write(0x00, mute_config);
  2204  00F3  083C               	movf	_mute_config,w
  2205  00F4  00C5               	movwf	??_main
  2206  00F5  0845               	movf	??_main,w
  2207  00F6  00F1               	movwf	LM49450_write@data
  2208  00F7  3000               	movlw	0
  2209  00F8  3184  2455  3180   	fcall	_LM49450_write
  2210  00FB  2917               	goto	l1479
  2211  00FC                     l118:	
  2212                           
  2213                           ;main.c: 120: };main.c: 121: };main.c: 122: };main.c: 123: }
  2214  00FC  2917               	goto	l1479
  2215  00FD                     l1469:	
  2216                           
  2217                           ;main.c: 124: else {;main.c: 125: if(HPS_state == 2) {
  2218  00FD  3002               	movlw	2
  2219  00FE  063A               	xorwf	_HPS_state,w
  2220  00FF  1D03               	btfss	3,2
  2221  0100  2902               	goto	u951
  2222  0101  2903               	goto	u950
  2223  0102                     u951:	
  2224  0102  2915               	goto	l1477
  2225  0103                     u950:	
  2226  0103                     l1471:	
  2227                           
  2228                           ;main.c: 126: if(volume_hp == 0 && mute_state == 0) {
  2229  0103  0847               	movf	_volume_hp,w
  2230  0104  1D03               	btfss	3,2
  2231  0105  2907               	goto	u961
  2232  0106  2908               	goto	u960
  2233  0107                     u961:	
  2234  0107  2915               	goto	l1477
  2235  0108                     u960:	
  2236  0108                     l1473:	
  2237  0108  083B               	movf	_mute_state,w
  2238  0109  1D03               	btfss	3,2
  2239  010A  290C               	goto	u971
  2240  010B  290D               	goto	u970
  2241  010C                     u971:	
  2242  010C  2915               	goto	l1477
  2243  010D                     u970:	
  2244  010D                     l1475:	
  2245                           
  2246                           ;main.c: 128: LM49450_write(0x00, mute_config);
  2247  010D  083C               	movf	_mute_config,w
  2248  010E  00C5               	movwf	??_main
  2249  010F  0845               	movf	??_main,w
  2250  0110  00F1               	movwf	LM49450_write@data
  2251  0111  3000               	movlw	0
  2252  0112  3184  2455  3180   	fcall	_LM49450_write
  2253  0115                     l1477:	
  2254                           
  2255                           ;main.c: 129: };main.c: 130: };main.c: 131: HPS_state = 0;
  2256  0115  0140               	movlb	0	; select bank0
  2257  0116  01BA               	clrf	_HPS_state
  2258  0117                     l1479:	
  2259                           
  2260                           ;main.c: 132: };main.c: 134: if(!RA5) {
  2261  0117  0140               	movlb	0	; select bank0
  2262  0118  1A8C               	btfsc	12,5	;volatile
  2263  0119  291B               	goto	u981
  2264  011A  291C               	goto	u980
  2265  011B                     u981:	
  2266  011B  29C0               	goto	l1525
  2267  011C                     u980:	
  2268  011C  29C2               	goto	l1527
  2269  011D                     l1483:	
  2270                           
  2271                           ;main.c: 138: vol_plus_time_start = get_time();
  2272  011D  3184  2475  3180   	fcall	_get_time
  2273  0120  0873               	movf	?_get_time+3,w
  2274  0121  0140               	movlb	0	; select bank0
  2275  0122  00AF               	movwf	_vol_plus_time_start+3
  2276  0123  0872               	movf	?_get_time+2,w
  2277  0124  00AE               	movwf	_vol_plus_time_start+2
  2278  0125  0871               	movf	?_get_time+1,w
  2279  0126  00AD               	movwf	_vol_plus_time_start+1
  2280  0127  0870               	movf	?_get_time,w
  2281  0128  00AC               	movwf	_vol_plus_time_start
  2282  0129                     l1485:	
  2283                           
  2284                           ;main.c: 139: vol_plus_state = 1;
  2285  0129  01B9               	clrf	_vol_plus_state
  2286  012A  0AB9               	incf	_vol_plus_state,f
  2287                           
  2288                           ;main.c: 140: break;
  2289  012B  29CD               	goto	l1531
  2290  012C                     l1487:	
  2291                           
  2292                           ;main.c: 143: if(timer_diff(vol_plus_time_start) >= 4) {
  2293  012C  082F               	movf	_vol_plus_time_start+3,w
  2294  012D  00F3               	movwf	timer_diff@t+3
  2295  012E  082E               	movf	_vol_plus_time_start+2,w
  2296  012F  00F2               	movwf	timer_diff@t+2
  2297  0130  082D               	movf	_vol_plus_time_start+1,w
  2298  0131  00F1               	movwf	timer_diff@t+1
  2299  0132  082C               	movf	_vol_plus_time_start,w
  2300  0133  00F0               	movwf	timer_diff@t
  2301  0134  3184  243F  3180   	fcall	_timer_diff
  2302  0137  0873               	movf	?_timer_diff+3,w
  2303  0138  1D03               	btfss	3,2
  2304  0139  2946               	goto	u990
  2305  013A  0872               	movf	?_timer_diff+2,w
  2306  013B  1D03               	btfss	3,2
  2307  013C  2946               	goto	u990
  2308  013D  0871               	movf	?_timer_diff+1,w
  2309  013E  1D03               	btfss	3,2
  2310  013F  2946               	goto	u990
  2311  0140  3004               	movlw	4
  2312  0141  0270               	subwf	?_timer_diff,w
  2313  0142  1C03               	btfss	3,0
  2314  0143  2945               	goto	u991
  2315  0144  2946               	goto	u990
  2316  0145                     u991:	
  2317  0145  29CD               	goto	l1531
  2318  0146                     u990:	
  2319  0146                     l1489:	
  2320                           
  2321                           ;main.c: 144: vol_plus_time_hold = get_time();
  2322  0146  3184  2475  3180   	fcall	_get_time
  2323  0149  0873               	movf	?_get_time+3,w
  2324  014A  0140               	movlb	0	; select bank0
  2325  014B  00AB               	movwf	_vol_plus_time_hold+3
  2326  014C  0872               	movf	?_get_time+2,w
  2327  014D  00AA               	movwf	_vol_plus_time_hold+2
  2328  014E  0871               	movf	?_get_time+1,w
  2329  014F  00A9               	movwf	_vol_plus_time_hold+1
  2330  0150  0870               	movf	?_get_time,w
  2331  0151  00A8               	movwf	_vol_plus_time_hold
  2332  0152                     l1491:	
  2333                           
  2334                           ;main.c: 145: vol_plus_state = 2;
  2335  0152  3002               	movlw	2
  2336  0153  00C5               	movwf	??_main
  2337  0154  0845               	movf	??_main,w
  2338  0155  00B9               	movwf	_vol_plus_state
  2339  0156                     l1493:	
  2340                           
  2341                           ;main.c: 146: if(HPS_state == 2) {
  2342  0156  3002               	movlw	2
  2343  0157  063A               	xorwf	_HPS_state,w
  2344  0158  1D03               	btfss	3,2
  2345  0159  295B               	goto	u1001
  2346  015A  295C               	goto	u1000
  2347  015B                     u1001:	
  2348  015B  296C               	goto	l1501
  2349  015C                     u1000:	
  2350  015C                     l1495:	
  2351                           
  2352                           ;main.c: 147: if((volume_hp < 31) && mute_state == 0) volume_hp++;
  2353  015C  301F               	movlw	31
  2354  015D  0247               	subwf	_volume_hp,w
  2355  015E  1803               	skipnc
  2356  015F  2961               	goto	u1011
  2357  0160  2962               	goto	u1010
  2358  0161                     u1011:	
  2359  0161  29CD               	goto	l128
  2360  0162                     u1010:	
  2361  0162                     l1497:	
  2362  0162  083B               	movf	_mute_state,w
  2363  0163  1D03               	btfss	3,2
  2364  0164  2966               	goto	u1021
  2365  0165  2967               	goto	u1020
  2366  0166                     u1021:	
  2367  0166  29CD               	goto	l128
  2368  0167                     u1020:	
  2369  0167                     l1499:	
  2370  0167  3001               	movlw	1
  2371  0168  00C5               	movwf	??_main
  2372  0169  0845               	movf	??_main,w
  2373  016A  07C7               	addwf	_volume_hp,f
  2374  016B  29CD               	goto	l1531
  2375  016C                     l1501:	
  2376                           
  2377                           ;main.c: 149: else if((volume_sp < 31) && mute_state == 0) volume_sp++;
  2378  016C  301F               	movlw	31
  2379  016D  0249               	subwf	_volume_sp,w
  2380  016E  1803               	skipnc
  2381  016F  2971               	goto	u1031
  2382  0170  2972               	goto	u1030
  2383  0171                     u1031:	
  2384  0171  29CD               	goto	l128
  2385  0172                     u1030:	
  2386  0172                     l1503:	
  2387  0172  083B               	movf	_mute_state,w
  2388  0173  1D03               	btfss	3,2
  2389  0174  2976               	goto	u1041
  2390  0175  2977               	goto	u1040
  2391  0176                     u1041:	
  2392  0176  29CD               	goto	l128
  2393  0177                     u1040:	
  2394  0177                     l1505:	
  2395  0177  3001               	movlw	1
  2396  0178  00C5               	movwf	??_main
  2397  0179  0845               	movf	??_main,w
  2398  017A  07C9               	addwf	_volume_sp,f
  2399  017B  29CD               	goto	l1531
  2400  017C                     l1507:	
  2401                           
  2402                           ;main.c: 154: if(timer_diff(vol_plus_time_hold) >= 20) {
  2403  017C  082B               	movf	_vol_plus_time_hold+3,w
  2404  017D  00F3               	movwf	timer_diff@t+3
  2405  017E  082A               	movf	_vol_plus_time_hold+2,w
  2406  017F  00F2               	movwf	timer_diff@t+2
  2407  0180  0829               	movf	_vol_plus_time_hold+1,w
  2408  0181  00F1               	movwf	timer_diff@t+1
  2409  0182  0828               	movf	_vol_plus_time_hold,w
  2410  0183  00F0               	movwf	timer_diff@t
  2411  0184  3184  243F  3180   	fcall	_timer_diff
  2412  0187  0873               	movf	?_timer_diff+3,w
  2413  0188  1D03               	btfss	3,2
  2414  0189  2996               	goto	u1050
  2415  018A  0872               	movf	?_timer_diff+2,w
  2416  018B  1D03               	btfss	3,2
  2417  018C  2996               	goto	u1050
  2418  018D  0871               	movf	?_timer_diff+1,w
  2419  018E  1D03               	btfss	3,2
  2420  018F  2996               	goto	u1050
  2421  0190  3014               	movlw	20
  2422  0191  0270               	subwf	?_timer_diff,w
  2423  0192  1C03               	btfss	3,0
  2424  0193  2995               	goto	u1051
  2425  0194  2996               	goto	u1050
  2426  0195                     u1051:	
  2427  0195  29CD               	goto	l1531
  2428  0196                     u1050:	
  2429  0196                     l1509:	
  2430                           
  2431                           ;main.c: 155: vol_plus_time_hold = get_time();
  2432  0196  3184  2475  3180   	fcall	_get_time
  2433  0199  0873               	movf	?_get_time+3,w
  2434  019A  0140               	movlb	0	; select bank0
  2435  019B  00AB               	movwf	_vol_plus_time_hold+3
  2436  019C  0872               	movf	?_get_time+2,w
  2437  019D  00AA               	movwf	_vol_plus_time_hold+2
  2438  019E  0871               	movf	?_get_time+1,w
  2439  019F  00A9               	movwf	_vol_plus_time_hold+1
  2440  01A0  0870               	movf	?_get_time,w
  2441  01A1  00A8               	movwf	_vol_plus_time_hold
  2442  01A2                     l1511:	
  2443                           
  2444                           ;main.c: 156: if(HPS_state == 2) {
  2445  01A2  3002               	movlw	2
  2446  01A3  063A               	xorwf	_HPS_state,w
  2447  01A4  1D03               	btfss	3,2
  2448  01A5  29A7               	goto	u1061
  2449  01A6  29A8               	goto	u1060
  2450  01A7                     u1061:	
  2451  01A7  29B4               	goto	l1519
  2452  01A8                     u1060:	
  2453  01A8                     l1513:	
  2454                           
  2455                           ;main.c: 157: if((volume_hp < 31) && mute_state == 0) volume_hp++;
  2456  01A8  301F               	movlw	31
  2457  01A9  0247               	subwf	_volume_hp,w
  2458  01AA  1803               	skipnc
  2459  01AB  29AD               	goto	u1071
  2460  01AC  29AE               	goto	u1070
  2461  01AD                     u1071:	
  2462  01AD  29CD               	goto	l1531
  2463  01AE                     u1070:	
  2464  01AE                     l1515:	
  2465  01AE  083B               	movf	_mute_state,w
  2466  01AF  1D03               	btfss	3,2
  2467  01B0  29B2               	goto	u1081
  2468  01B1  29B3               	goto	u1080
  2469  01B2                     u1081:	
  2470  01B2  29CD               	goto	l1531
  2471  01B3                     u1080:	
  2472  01B3  2967               	goto	l1499
  2473  01B4                     l1519:	
  2474                           
  2475                           ;main.c: 159: else if((volume_sp < 31) && mute_state == 0) volume_sp++;
  2476  01B4  301F               	movlw	31
  2477  01B5  0249               	subwf	_volume_sp,w
  2478  01B6  1803               	skipnc
  2479  01B7  29B9               	goto	u1091
  2480  01B8  29BA               	goto	u1090
  2481  01B9                     u1091:	
  2482  01B9  29CD               	goto	l1531
  2483  01BA                     u1090:	
  2484  01BA                     l1521:	
  2485  01BA  083B               	movf	_mute_state,w
  2486  01BB  1D03               	btfss	3,2
  2487  01BC  29BE               	goto	u1101
  2488  01BD  29BF               	goto	u1100
  2489  01BE                     u1101:	
  2490  01BE  29CD               	goto	l1531
  2491  01BF                     u1100:	
  2492  01BF  2977               	goto	l1505
  2493  01C0                     l1525:	
  2494                           
  2495                           ;main.c: 163: vol_plus_state = 0;
  2496  01C0  01B9               	clrf	_vol_plus_state
  2497                           
  2498                           ;main.c: 164: }
  2499  01C1  29CD               	goto	l1531
  2500  01C2                     l1527:	
  2501  01C2  0839               	movf	_vol_plus_state,w
  2502                           
  2503                           ; Switch size 1, requested type "simple"
  2504                           ; Number of cases is 3, Range of values is 0 to 2
  2505                           ; switch strategies available:
  2506                           ; Name         Instructions Cycles
  2507                           ; simple_byte           10     6 (average)
  2508                           ; direct_byte           12     6 (fixed)
  2509                           ; jumptable            260     6 (fixed)
  2510                           ;	Chosen strategy is simple_byte
  2511  01C3  3A00               	xorlw	0	; case 0
  2512  01C4  1903               	skipnz
  2513  01C5  291D               	goto	l1483
  2514  01C6  3A01               	xorlw	1	; case 1
  2515  01C7  1903               	skipnz
  2516  01C8  292C               	goto	l1487
  2517  01C9  3A03               	xorlw	3	; case 2
  2518  01CA  1903               	skipnz
  2519  01CB  297C               	goto	l1507
  2520  01CC  29C0               	goto	l1525
  2521  01CD                     l128:	
  2522  01CD                     l1531:	
  2523                           ;main.c: 165: }
  2524                           
  2525                           
  2526                           ;main.c: 168: };main.c: 170: if(!RA4) {
  2527  01CD  0140               	movlb	0	; select bank0
  2528  01CE  1A0C               	btfsc	12,4	;volatile
  2529  01CF  29D1               	goto	u1111
  2530  01D0  29D2               	goto	u1110
  2531  01D1                     u1111:	
  2532  01D1  2A6E               	goto	l1577
  2533  01D2                     u1110:	
  2534  01D2  2A70               	goto	l1579
  2535  01D3                     l1535:	
  2536                           
  2537                           ;main.c: 173: vol_minus_time_start = get_time();
  2538  01D3  3184  2475  3180   	fcall	_get_time
  2539  01D6  0873               	movf	?_get_time+3,w
  2540  01D7  0140               	movlb	0	; select bank0
  2541  01D8  00A7               	movwf	_vol_minus_time_start+3
  2542  01D9  0872               	movf	?_get_time+2,w
  2543  01DA  00A6               	movwf	_vol_minus_time_start+2
  2544  01DB  0871               	movf	?_get_time+1,w
  2545  01DC  00A5               	movwf	_vol_minus_time_start+1
  2546  01DD  0870               	movf	?_get_time,w
  2547  01DE  00A4               	movwf	_vol_minus_time_start
  2548  01DF                     l1537:	
  2549                           
  2550                           ;main.c: 174: vol_minus_state = 1;
  2551  01DF  01B8               	clrf	_vol_minus_state
  2552  01E0  0AB8               	incf	_vol_minus_state,f
  2553                           
  2554                           ;main.c: 175: break;
  2555  01E1  2A7B               	goto	l1583
  2556  01E2                     l1539:	
  2557                           
  2558                           ;main.c: 177: if(timer_diff(vol_minus_time_start) >= 4) {
  2559  01E2  0827               	movf	_vol_minus_time_start+3,w
  2560  01E3  00F3               	movwf	timer_diff@t+3
  2561  01E4  0826               	movf	_vol_minus_time_start+2,w
  2562  01E5  00F2               	movwf	timer_diff@t+2
  2563  01E6  0825               	movf	_vol_minus_time_start+1,w
  2564  01E7  00F1               	movwf	timer_diff@t+1
  2565  01E8  0824               	movf	_vol_minus_time_start,w
  2566  01E9  00F0               	movwf	timer_diff@t
  2567  01EA  3184  243F  3180   	fcall	_timer_diff
  2568  01ED  0873               	movf	?_timer_diff+3,w
  2569  01EE  1D03               	btfss	3,2
  2570  01EF  29FC               	goto	u1120
  2571  01F0  0872               	movf	?_timer_diff+2,w
  2572  01F1  1D03               	btfss	3,2
  2573  01F2  29FC               	goto	u1120
  2574  01F3  0871               	movf	?_timer_diff+1,w
  2575  01F4  1D03               	btfss	3,2
  2576  01F5  29FC               	goto	u1120
  2577  01F6  3004               	movlw	4
  2578  01F7  0270               	subwf	?_timer_diff,w
  2579  01F8  1C03               	btfss	3,0
  2580  01F9  29FB               	goto	u1121
  2581  01FA  29FC               	goto	u1120
  2582  01FB                     u1121:	
  2583  01FB  2A7B               	goto	l1583
  2584  01FC                     u1120:	
  2585  01FC                     l1541:	
  2586                           
  2587                           ;main.c: 178: vol_minus_time_hold = get_time();
  2588  01FC  3184  2475  3180   	fcall	_get_time
  2589  01FF  0873               	movf	?_get_time+3,w
  2590  0200  0140               	movlb	0	; select bank0
  2591  0201  00A3               	movwf	_vol_minus_time_hold+3
  2592  0202  0872               	movf	?_get_time+2,w
  2593  0203  00A2               	movwf	_vol_minus_time_hold+2
  2594  0204  0871               	movf	?_get_time+1,w
  2595  0205  00A1               	movwf	_vol_minus_time_hold+1
  2596  0206  0870               	movf	?_get_time,w
  2597  0207  00A0               	movwf	_vol_minus_time_hold
  2598  0208                     l1543:	
  2599                           
  2600                           ;main.c: 179: vol_minus_state = 2;
  2601  0208  3002               	movlw	2
  2602  0209  00C5               	movwf	??_main
  2603  020A  0845               	movf	??_main,w
  2604  020B  00B8               	movwf	_vol_minus_state
  2605  020C                     l1545:	
  2606                           
  2607                           ;main.c: 180: if(HPS_state == 2) {
  2608  020C  3002               	movlw	2
  2609  020D  063A               	xorwf	_HPS_state,w
  2610  020E  1D03               	btfss	3,2
  2611  020F  2A11               	goto	u1131
  2612  0210  2A12               	goto	u1130
  2613  0211                     u1131:	
  2614  0211  2A1F               	goto	l1553
  2615  0212                     u1130:	
  2616  0212                     l1547:	
  2617                           
  2618                           ;main.c: 181: if((volume_hp > 0) && mute_state == 0) volume_hp--;
  2619  0212  0847               	movf	_volume_hp,w
  2620  0213  1903               	btfsc	3,2
  2621  0214  2A16               	goto	u1141
  2622  0215  2A17               	goto	u1140
  2623  0216                     u1141:	
  2624  0216  2A7B               	goto	l146
  2625  0217                     u1140:	
  2626  0217                     l1549:	
  2627  0217  083B               	movf	_mute_state,w
  2628  0218  1D03               	btfss	3,2
  2629  0219  2A1B               	goto	u1151
  2630  021A  2A1C               	goto	u1150
  2631  021B                     u1151:	
  2632  021B  2A7B               	goto	l146
  2633  021C                     u1150:	
  2634  021C                     l1551:	
  2635  021C  3001               	movlw	1
  2636  021D  02C7               	subwf	_volume_hp,f
  2637  021E  2A7B               	goto	l1583
  2638  021F                     l1553:	
  2639                           
  2640                           ;main.c: 183: else if((volume_sp > 0) && mute_state == 0) volume_sp--;
  2641  021F  0849               	movf	_volume_sp,w
  2642  0220  1903               	btfsc	3,2
  2643  0221  2A23               	goto	u1161
  2644  0222  2A24               	goto	u1160
  2645  0223                     u1161:	
  2646  0223  2A7B               	goto	l146
  2647  0224                     u1160:	
  2648  0224                     l1555:	
  2649  0224  083B               	movf	_mute_state,w
  2650  0225  1D03               	btfss	3,2
  2651  0226  2A28               	goto	u1171
  2652  0227  2A29               	goto	u1170
  2653  0228                     u1171:	
  2654  0228  2A7B               	goto	l146
  2655  0229                     u1170:	
  2656  0229                     l1557:	
  2657  0229  3001               	movlw	1
  2658  022A  02C9               	subwf	_volume_sp,f
  2659  022B  2A7B               	goto	l1583
  2660  022C                     l1559:	
  2661                           
  2662                           ;main.c: 187: if(timer_diff(vol_minus_time_hold) >= 20) {
  2663  022C  0823               	movf	_vol_minus_time_hold+3,w
  2664  022D  00F3               	movwf	timer_diff@t+3
  2665  022E  0822               	movf	_vol_minus_time_hold+2,w
  2666  022F  00F2               	movwf	timer_diff@t+2
  2667  0230  0821               	movf	_vol_minus_time_hold+1,w
  2668  0231  00F1               	movwf	timer_diff@t+1
  2669  0232  0820               	movf	_vol_minus_time_hold,w
  2670  0233  00F0               	movwf	timer_diff@t
  2671  0234  3184  243F  3180   	fcall	_timer_diff
  2672  0237  0873               	movf	?_timer_diff+3,w
  2673  0238  1D03               	btfss	3,2
  2674  0239  2A46               	goto	u1180
  2675  023A  0872               	movf	?_timer_diff+2,w
  2676  023B  1D03               	btfss	3,2
  2677  023C  2A46               	goto	u1180
  2678  023D  0871               	movf	?_timer_diff+1,w
  2679  023E  1D03               	btfss	3,2
  2680  023F  2A46               	goto	u1180
  2681  0240  3014               	movlw	20
  2682  0241  0270               	subwf	?_timer_diff,w
  2683  0242  1C03               	btfss	3,0
  2684  0243  2A45               	goto	u1181
  2685  0244  2A46               	goto	u1180
  2686  0245                     u1181:	
  2687  0245  2A7B               	goto	l1583
  2688  0246                     u1180:	
  2689  0246                     l1561:	
  2690                           
  2691                           ;main.c: 188: vol_minus_time_hold = get_time();
  2692  0246  3184  2475  3180   	fcall	_get_time
  2693  0249  0873               	movf	?_get_time+3,w
  2694  024A  0140               	movlb	0	; select bank0
  2695  024B  00A3               	movwf	_vol_minus_time_hold+3
  2696  024C  0872               	movf	?_get_time+2,w
  2697  024D  00A2               	movwf	_vol_minus_time_hold+2
  2698  024E  0871               	movf	?_get_time+1,w
  2699  024F  00A1               	movwf	_vol_minus_time_hold+1
  2700  0250  0870               	movf	?_get_time,w
  2701  0251  00A0               	movwf	_vol_minus_time_hold
  2702  0252                     l1563:	
  2703                           
  2704                           ;main.c: 189: if(HPS_state == 2) {
  2705  0252  3002               	movlw	2
  2706  0253  063A               	xorwf	_HPS_state,w
  2707  0254  1D03               	btfss	3,2
  2708  0255  2A57               	goto	u1191
  2709  0256  2A58               	goto	u1190
  2710  0257                     u1191:	
  2711  0257  2A63               	goto	l1571
  2712  0258                     u1190:	
  2713  0258                     l1565:	
  2714                           
  2715                           ;main.c: 190: if((volume_hp > 0) && mute_state == 0) volume_hp--;
  2716  0258  0847               	movf	_volume_hp,w
  2717  0259  1903               	btfsc	3,2
  2718  025A  2A5C               	goto	u1201
  2719  025B  2A5D               	goto	u1200
  2720  025C                     u1201:	
  2721  025C  2A7B               	goto	l1583
  2722  025D                     u1200:	
  2723  025D                     l1567:	
  2724  025D  083B               	movf	_mute_state,w
  2725  025E  1D03               	btfss	3,2
  2726  025F  2A61               	goto	u1211
  2727  0260  2A62               	goto	u1210
  2728  0261                     u1211:	
  2729  0261  2A7B               	goto	l1583
  2730  0262                     u1210:	
  2731  0262  2A1C               	goto	l1551
  2732  0263                     l1571:	
  2733                           
  2734                           ;main.c: 192: else if((volume_sp > 0) && mute_state == 0) volume_sp--;
  2735  0263  0849               	movf	_volume_sp,w
  2736  0264  1903               	btfsc	3,2
  2737  0265  2A67               	goto	u1221
  2738  0266  2A68               	goto	u1220
  2739  0267                     u1221:	
  2740  0267  2A7B               	goto	l1583
  2741  0268                     u1220:	
  2742  0268                     l1573:	
  2743  0268  083B               	movf	_mute_state,w
  2744  0269  1D03               	btfss	3,2
  2745  026A  2A6C               	goto	u1231
  2746  026B  2A6D               	goto	u1230
  2747  026C                     u1231:	
  2748  026C  2A7B               	goto	l1583
  2749  026D                     u1230:	
  2750  026D  2A29               	goto	l1557
  2751  026E                     l1577:	
  2752                           
  2753                           ;main.c: 196: vol_minus_state = 0;
  2754  026E  01B8               	clrf	_vol_minus_state
  2755                           
  2756                           ;main.c: 197: }
  2757  026F  2A7B               	goto	l1583
  2758  0270                     l1579:	
  2759  0270  0838               	movf	_vol_minus_state,w
  2760                           
  2761                           ; Switch size 1, requested type "simple"
  2762                           ; Number of cases is 3, Range of values is 0 to 2
  2763                           ; switch strategies available:
  2764                           ; Name         Instructions Cycles
  2765                           ; simple_byte           10     6 (average)
  2766                           ; direct_byte           12     6 (fixed)
  2767                           ; jumptable            260     6 (fixed)
  2768                           ;	Chosen strategy is simple_byte
  2769  0271  3A00               	xorlw	0	; case 0
  2770  0272  1903               	skipnz
  2771  0273  29D3               	goto	l1535
  2772  0274  3A01               	xorlw	1	; case 1
  2773  0275  1903               	skipnz
  2774  0276  29E2               	goto	l1539
  2775  0277  3A03               	xorlw	3	; case 2
  2776  0278  1903               	skipnz
  2777  0279  2A2C               	goto	l1559
  2778  027A  2A6E               	goto	l1577
  2779  027B                     l146:	
  2780  027B                     l1583:	
  2781                           ;main.c: 198: }
  2782                           
  2783                           
  2784                           ;main.c: 201: };main.c: 204: if((vol_plus_state == 2) && (vol_minus_state == 2)) {
  2785  027B  3002               	movlw	2
  2786  027C  0140               	movlb	0	; select bank0
  2787  027D  0639               	xorwf	_vol_plus_state,w
  2788  027E  1D03               	btfss	3,2
  2789  027F  2A81               	goto	u1241
  2790  0280  2A82               	goto	u1240
  2791  0281                     u1241:	
  2792  0281  2AB4               	goto	l1601
  2793  0282                     u1240:	
  2794  0282                     l1585:	
  2795  0282  3002               	movlw	2
  2796  0283  0638               	xorwf	_vol_minus_state,w
  2797  0284  1D03               	btfss	3,2
  2798  0285  2A87               	goto	u1251
  2799  0286  2A88               	goto	u1250
  2800  0287                     u1251:	
  2801  0287  2AB4               	goto	l1601
  2802  0288                     u1250:	
  2803  0288  2AA6               	goto	l1599
  2804  0289                     l1589:	
  2805                           
  2806                           ;main.c: 208: LM49450_write(0x00, (mute_config | 0b100));
  2807  0289  083C               	movf	_mute_config,w
  2808  028A  3804               	iorlw	4
  2809  028B  00C5               	movwf	??_main
  2810  028C  0845               	movf	??_main,w
  2811  028D  00F1               	movwf	LM49450_write@data
  2812  028E  3000               	movlw	0
  2813  028F  3184  2455  3180   	fcall	_LM49450_write
  2814  0292                     l1591:	
  2815                           
  2816                           ;main.c: 209: mute_state = 1;
  2817  0292  0140               	movlb	0	; select bank0
  2818  0293  01BB               	clrf	_mute_state
  2819  0294  0ABB               	incf	_mute_state,f
  2820                           
  2821                           ;main.c: 210: break;
  2822  0295  2AC4               	goto	l1609
  2823  0296                     l1593:	
  2824                           
  2825                           ;main.c: 215: LM49450_write(0x00, mute_config);
  2826  0296  083C               	movf	_mute_config,w
  2827  0297  00C5               	movwf	??_main
  2828  0298  0845               	movf	??_main,w
  2829  0299  00F1               	movwf	LM49450_write@data
  2830  029A  3000               	movlw	0
  2831  029B  3184  2455  3180   	fcall	_LM49450_write
  2832  029E                     l1595:	
  2833                           
  2834                           ;main.c: 216: mute_state = 3;
  2835  029E  3003               	movlw	3
  2836  029F  0140               	movlb	0	; select bank0
  2837  02A0  00C5               	movwf	??_main
  2838  02A1  0845               	movf	??_main,w
  2839  02A2  00BB               	movwf	_mute_state
  2840                           
  2841                           ;main.c: 217: break;
  2842  02A3  2AC4               	goto	l1609
  2843  02A4                     l1597:	
  2844                           
  2845                           ;main.c: 222: mute_state = 0;
  2846  02A4  01BB               	clrf	_mute_state
  2847                           
  2848                           ;main.c: 223: }
  2849  02A5  2AC4               	goto	l1609
  2850  02A6                     l1599:	
  2851  02A6  083B               	movf	_mute_state,w
  2852                           
  2853                           ; Switch size 1, requested type "simple"
  2854                           ; Number of cases is 4, Range of values is 0 to 3
  2855                           ; switch strategies available:
  2856                           ; Name         Instructions Cycles
  2857                           ; simple_byte           13     7 (average)
  2858                           ; direct_byte           14     6 (fixed)
  2859                           ; jumptable            260     6 (fixed)
  2860                           ;	Chosen strategy is simple_byte
  2861  02A7  3A00               	xorlw	0	; case 0
  2862  02A8  1903               	skipnz
  2863  02A9  2A89               	goto	l1589
  2864  02AA  3A01               	xorlw	1	; case 1
  2865  02AB  1903               	skipnz
  2866  02AC  2AC4               	goto	l1609
  2867  02AD  3A03               	xorlw	3	; case 2
  2868  02AE  1903               	skipnz
  2869  02AF  2A96               	goto	l1593
  2870  02B0  3A01               	xorlw	1	; case 3
  2871  02B1  1903               	skipnz
  2872  02B2  2AC4               	goto	l1609
  2873  02B3  2AA4               	goto	l1597
  2874  02B4                     l1601:	
  2875                           
  2876                           ;main.c: 225: else {;main.c: 226: if(mute_state == 1) {
  2877  02B4  033B               	decf	_mute_state,w
  2878  02B5  1D03               	btfss	3,2
  2879  02B6  2AB8               	goto	u1261
  2880  02B7  2AB9               	goto	u1260
  2881  02B8                     u1261:	
  2882  02B8  2ABD               	goto	l1605
  2883  02B9                     u1260:	
  2884  02B9                     l1603:	
  2885                           
  2886                           ;main.c: 227: mute_state = 2;
  2887  02B9  3002               	movlw	2
  2888  02BA  00C5               	movwf	??_main
  2889  02BB  0845               	movf	??_main,w
  2890  02BC  00BB               	movwf	_mute_state
  2891  02BD                     l1605:	
  2892                           
  2893                           ;main.c: 228: };main.c: 229: if(mute_state == 3) {
  2894  02BD  3003               	movlw	3
  2895  02BE  063B               	xorwf	_mute_state,w
  2896  02BF  1D03               	btfss	3,2
  2897  02C0  2AC2               	goto	u1271
  2898  02C1  2AC3               	goto	u1270
  2899  02C2                     u1271:	
  2900  02C2  2AC4               	goto	l1609
  2901  02C3                     u1270:	
  2902  02C3  2AA4               	goto	l1597
  2903  02C4                     l1609:	
  2904                           
  2905                           ;main.c: 231: };main.c: 232: };main.c: 235: if((volume_sp != volume_sp_prev) && mute_sta
      +                          te == 0) {
  2906  02C4  0849               	movf	_volume_sp,w
  2907  02C5  0648               	xorwf	_volume_sp_prev,w
  2908  02C6  1903               	skipnz
  2909  02C7  2AC9               	goto	u1281
  2910  02C8  2ACA               	goto	u1280
  2911  02C9                     u1281:	
  2912  02C9  2AEF               	goto	l1621
  2913  02CA                     u1280:	
  2914  02CA                     l1611:	
  2915  02CA  083B               	movf	_mute_state,w
  2916  02CB  1D03               	btfss	3,2
  2917  02CC  2ACE               	goto	u1291
  2918  02CD  2ACF               	goto	u1290
  2919  02CE                     u1291:	
  2920  02CE  2AEF               	goto	l1621
  2921  02CF                     u1290:	
  2922  02CF                     l1613:	
  2923                           
  2924                           ;main.c: 236: LM49450_write(0x08, volume_sp);
  2925  02CF  0849               	movf	_volume_sp,w
  2926  02D0  00C5               	movwf	??_main
  2927  02D1  0845               	movf	??_main,w
  2928  02D2  00F1               	movwf	LM49450_write@data
  2929  02D3  3008               	movlw	8
  2930  02D4  3184  2455  3180   	fcall	_LM49450_write
  2931  02D7                     l1615:	
  2932                           
  2933                           ;main.c: 237: if(volume_sp == 0) {
  2934  02D7  0140               	movlb	0	; select bank0
  2935  02D8  0849               	movf	_volume_sp,w
  2936  02D9  1D03               	btfss	3,2
  2937  02DA  2ADC               	goto	u1301
  2938  02DB  2ADD               	goto	u1300
  2939  02DC                     u1301:	
  2940  02DC  2AE7               	goto	l1619
  2941  02DD                     u1300:	
  2942  02DD                     l1617:	
  2943                           
  2944                           ;main.c: 238: LM49450_write(0x00, (mute_config | 0b00000100));
  2945  02DD  083C               	movf	_mute_config,w
  2946  02DE  3804               	iorlw	4
  2947  02DF  00C5               	movwf	??_main
  2948  02E0  0845               	movf	??_main,w
  2949  02E1  00F1               	movwf	LM49450_write@data
  2950  02E2  3000               	movlw	0
  2951  02E3  3184  2455  3180   	fcall	_LM49450_write
  2952                           
  2953                           ;main.c: 239: }
  2954  02E6  2AEF               	goto	l1621
  2955  02E7                     l1619:	
  2956                           
  2957                           ;main.c: 240: else {;main.c: 241: LM49450_write(0x00, mute_config);
  2958  02E7  083C               	movf	_mute_config,w
  2959  02E8  00C5               	movwf	??_main
  2960  02E9  0845               	movf	??_main,w
  2961  02EA  00F1               	movwf	LM49450_write@data
  2962  02EB  3000               	movlw	0
  2963  02EC  3184  2455  3180   	fcall	_LM49450_write
  2964  02EF                     l1621:	
  2965                           
  2966                           ;main.c: 242: };main.c: 243: };main.c: 245: if((volume_hp != volume_hp_prev) && mute_sta
      +                          te == 0) {
  2967  02EF  0140               	movlb	0	; select bank0
  2968  02F0  0847               	movf	_volume_hp,w
  2969  02F1  0646               	xorwf	_volume_hp_prev,w
  2970  02F2  1903               	skipnz
  2971  02F3  2AF5               	goto	u1311
  2972  02F4  2AF6               	goto	u1310
  2973  02F5                     u1311:	
  2974  02F5  2B1B               	goto	l1633
  2975  02F6                     u1310:	
  2976  02F6                     l1623:	
  2977  02F6  083B               	movf	_mute_state,w
  2978  02F7  1D03               	btfss	3,2
  2979  02F8  2AFA               	goto	u1321
  2980  02F9  2AFB               	goto	u1320
  2981  02FA                     u1321:	
  2982  02FA  2B1B               	goto	l1633
  2983  02FB                     u1320:	
  2984  02FB                     l1625:	
  2985                           
  2986                           ;main.c: 246: LM49450_write(0x07, volume_hp);
  2987  02FB  0847               	movf	_volume_hp,w
  2988  02FC  00C5               	movwf	??_main
  2989  02FD  0845               	movf	??_main,w
  2990  02FE  00F1               	movwf	LM49450_write@data
  2991  02FF  3007               	movlw	7
  2992  0300  3184  2455  3180   	fcall	_LM49450_write
  2993  0303                     l1627:	
  2994                           
  2995                           ;main.c: 247: if(volume_hp == 0) {
  2996  0303  0140               	movlb	0	; select bank0
  2997  0304  0847               	movf	_volume_hp,w
  2998  0305  1D03               	btfss	3,2
  2999  0306  2B08               	goto	u1331
  3000  0307  2B09               	goto	u1330
  3001  0308                     u1331:	
  3002  0308  2B13               	goto	l1631
  3003  0309                     u1330:	
  3004  0309                     l1629:	
  3005                           
  3006                           ;main.c: 248: LM49450_write(0x00, (mute_config | 0b00000100));
  3007  0309  083C               	movf	_mute_config,w
  3008  030A  3804               	iorlw	4
  3009  030B  00C5               	movwf	??_main
  3010  030C  0845               	movf	??_main,w
  3011  030D  00F1               	movwf	LM49450_write@data
  3012  030E  3000               	movlw	0
  3013  030F  3184  2455  3180   	fcall	_LM49450_write
  3014                           
  3015                           ;main.c: 249: }
  3016  0312  2B1B               	goto	l1633
  3017  0313                     l1631:	
  3018                           
  3019                           ;main.c: 250: else {;main.c: 251: LM49450_write(0x00, mute_config);
  3020  0313  083C               	movf	_mute_config,w
  3021  0314  00C5               	movwf	??_main
  3022  0315  0845               	movf	??_main,w
  3023  0316  00F1               	movwf	LM49450_write@data
  3024  0317  3000               	movlw	0
  3025  0318  3184  2455  3180   	fcall	_LM49450_write
  3026  031B                     l1633:	
  3027                           
  3028                           ;main.c: 252: };main.c: 253: };main.c: 255: volume_sp_prev = volume_sp;
  3029  031B  0140               	movlb	0	; select bank0
  3030  031C  0849               	movf	_volume_sp,w
  3031  031D  00C5               	movwf	??_main
  3032  031E  0845               	movf	??_main,w
  3033  031F  00C8               	movwf	_volume_sp_prev
  3034  0320                     l1635:	
  3035                           
  3036                           ;main.c: 256: volume_hp_prev = volume_hp;
  3037  0320  0847               	movf	_volume_hp,w
  3038  0321  00C5               	movwf	??_main
  3039  0322  0845               	movf	??_main,w
  3040  0323  00C6               	movwf	_volume_hp_prev
  3041  0324  28AC               	goto	l1449
  3042  0325  3180  281C         	ljmp	start
  3043  0327                     __end_of_main:	
  3044                           
  3045                           	psect	text1
  3046  043F                     __ptext1:	
  3047 ;; *************** function _timer_diff *****************
  3048 ;; Defined at:
  3049 ;;		line 17 in file "time.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  t               4    0[COMMON] unsigned long 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;		None
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  4    0[COMMON] unsigned long 
  3056 ;; Registers used:
  3057 ;;		wreg
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3063 ;;      Params:         4       0       0       0       0       0       0       0
  3064 ;;      Locals:         0       0       0       0       0       0       0       0
  3065 ;;      Temps:          4       0       0       0       0       0       0       0
  3066 ;;      Totals:         8       0       0       0       0       0       0       0
  3067 ;;Total ram usage:        8 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    1
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_main
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           
  3078                           ;psect for function _timer_diff
  3079  043F                     _timer_diff:	
  3080  043F                     l1411:	
  3081                           ;incstack = 0
  3082                           ; Regs used in _timer_diff: [wreg]
  3083                           
  3084                           
  3085                           ;time.c: 18: return timer_counter - t;
  3086  043F  0870               	movf	timer_diff@t,w
  3087  0440  0140               	movlb	0	; select bank0
  3088  0441  0234               	subwf	_timer_counter,w
  3089  0442  00F4               	movwf	??_timer_diff
  3090  0443  0871               	movf	timer_diff@t+1,w
  3091  0444  3B35               	subwfb	_timer_counter+1,w
  3092  0445  00F5               	movwf	??_timer_diff+1
  3093  0446  0872               	movf	timer_diff@t+2,w
  3094  0447  3B36               	subwfb	_timer_counter+2,w
  3095  0448  00F6               	movwf	??_timer_diff+2
  3096  0449  0873               	movf	timer_diff@t+3,w
  3097  044A  3B37               	subwfb	_timer_counter+3,w
  3098  044B  00F7               	movwf	??_timer_diff+3
  3099  044C  0877               	movf	??_timer_diff+3,w
  3100  044D  00F3               	movwf	?_timer_diff+3
  3101  044E  0876               	movf	??_timer_diff+2,w
  3102  044F  00F2               	movwf	?_timer_diff+2
  3103  0450  0875               	movf	??_timer_diff+1,w
  3104  0451  00F1               	movwf	?_timer_diff+1
  3105  0452  0874               	movf	??_timer_diff,w
  3106  0453  00F0               	movwf	?_timer_diff
  3107  0454                     l260:	
  3108  0454  0008               	return
  3109  0455                     __end_of_timer_diff:	
  3110                           
  3111                           	psect	text2
  3112  0475                     __ptext2:	
  3113 ;; *************** function _get_time *****************
  3114 ;; Defined at:
  3115 ;;		line 13 in file "time.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;		None
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;		None
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  4    0[COMMON] unsigned long 
  3122 ;; Registers used:
  3123 ;;		wreg
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3129 ;;      Params:         4       0       0       0       0       0       0       0
  3130 ;;      Locals:         0       0       0       0       0       0       0       0
  3131 ;;      Temps:          0       0       0       0       0       0       0       0
  3132 ;;      Totals:         4       0       0       0       0       0       0       0
  3133 ;;Total ram usage:        4 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    1
  3136 ;; This function calls:
  3137 ;;		Nothing
  3138 ;; This function is called by:
  3139 ;;		_main
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           
  3144                           ;psect for function _get_time
  3145  0475                     _get_time:	
  3146  0475                     l1407:	
  3147                           ;incstack = 0
  3148                           ; Regs used in _get_time: [wreg]
  3149                           
  3150                           
  3151                           ;time.c: 14: return timer_counter;
  3152  0475  0140               	movlb	0	; select bank0
  3153  0476  0837               	movf	_timer_counter+3,w
  3154  0477  00F3               	movwf	?_get_time+3
  3155  0478  0836               	movf	_timer_counter+2,w
  3156  0479  00F2               	movwf	?_get_time+2
  3157  047A  0835               	movf	_timer_counter+1,w
  3158  047B  00F1               	movwf	?_get_time+1
  3159  047C  0834               	movf	_timer_counter,w
  3160  047D  00F0               	movwf	?_get_time
  3161  047E                     l257:	
  3162  047E  0008               	return
  3163  047F                     __end_of_get_time:	
  3164                           
  3165                           	psect	text3
  3166  0499                     __ptext3:	
  3167 ;; *************** function _PPS_unlock *****************
  3168 ;; Defined at:
  3169 ;;		line 11 in file "PPS.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  1    wreg      void 
  3176 ;; Registers used:
  3177 ;;		wreg, status,2
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3183 ;;      Params:         0       0       0       0       0       0       0       0
  3184 ;;      Locals:         0       0       0       0       0       0       0       0
  3185 ;;      Temps:          0       0       0       0       0       0       0       0
  3186 ;;      Totals:         0       0       0       0       0       0       0       0
  3187 ;;Total ram usage:        0 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    1
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_main
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           
  3198                           ;psect for function _PPS_unlock
  3199  0499                     _PPS_unlock:	
  3200  0499                     l1337:	
  3201                           ;incstack = 0
  3202                           ; Regs used in _PPS_unlock: [wreg+status,2]
  3203                           
  3204                           
  3205                           ;PPS.c: 12: PPSLOCK = 0x55;
  3206  0499  3055               	movlw	85
  3207  049A  017D               	movlb	61	; select bank61
  3208  049B  008F               	movwf	15	;volsfr
  3209                           
  3210                           ;PPS.c: 13: PPSLOCK = 0xAA;
  3211  049C  30AA               	movlw	170
  3212  049D  008F               	movwf	15	;volsfr
  3213  049E                     l1339:	
  3214                           
  3215                           ;PPS.c: 14: PPSLOCK = 0;
  3216  049E  018F               	clrf	15	;volsfr
  3217  049F                     l185:	
  3218  049F  0008               	return
  3219  04A0                     __end_of_PPS_unlock:	
  3220                           
  3221                           	psect	text4
  3222  0489                     __ptext4:	
  3223 ;; *************** function _PPS_lock *****************
  3224 ;; Defined at:
  3225 ;;		line 17 in file "PPS.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;		None
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3239 ;;      Params:         0       0       0       0       0       0       0       0
  3240 ;;      Locals:         0       0       0       0       0       0       0       0
  3241 ;;      Temps:          0       0       0       0       0       0       0       0
  3242 ;;      Totals:         0       0       0       0       0       0       0       0
  3243 ;;Total ram usage:        0 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    1
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		_main
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           
  3254                           ;psect for function _PPS_lock
  3255  0489                     _PPS_lock:	
  3256  0489                     l1341:	
  3257                           ;incstack = 0
  3258                           ; Regs used in _PPS_lock: [wreg]
  3259                           
  3260                           
  3261                           ;PPS.c: 18: PPSLOCK = 0x55;
  3262  0489  3055               	movlw	85
  3263  048A  017D               	movlb	61	; select bank61
  3264  048B  008F               	movwf	15	;volsfr
  3265                           
  3266                           ;PPS.c: 19: PPSLOCK = 0xAA;
  3267  048C  30AA               	movlw	170
  3268  048D  008F               	movwf	15	;volsfr
  3269                           
  3270                           ;PPS.c: 20: PPSLOCK = 1;
  3271  048E  3001               	movlw	1
  3272  048F  008F               	movwf	15	;volsfr
  3273  0490                     l188:	
  3274  0490  0008               	return
  3275  0491                     __end_of_PPS_lock:	
  3276                           
  3277                           	psect	text5
  3278  0420                     __ptext5:	
  3279 ;; *************** function _PIC_SETUP *****************
  3280 ;; Defined at:
  3281 ;;		line 16 in file "main.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;		None
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;		None
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      void 
  3288 ;; Registers used:
  3289 ;;		wreg, status,2, status,0
  3290 ;; Tracked objects:
  3291 ;;		On entry : 0/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3295 ;;      Params:         0       0       0       0       0       0       0       0
  3296 ;;      Locals:         0       0       0       0       0       0       0       0
  3297 ;;      Temps:          0       0       0       0       0       0       0       0
  3298 ;;      Totals:         0       0       0       0       0       0       0       0
  3299 ;;Total ram usage:        0 bytes
  3300 ;; Hardware stack levels used:    1
  3301 ;; Hardware stack levels required when called:    1
  3302 ;; This function calls:
  3303 ;;		Nothing
  3304 ;; This function is called by:
  3305 ;;		_main
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309                           
  3310                           ;psect for function _PIC_SETUP
  3311  0420                     _PIC_SETUP:	
  3312  0420                     l1311:	
  3313                           ;incstack = 0
  3314                           ; Regs used in _PIC_SETUP: [wreg+status,2+status,0]
  3315                           
  3316                           
  3317                           ;main.c: 19: TRISA = 0xFF;
  3318  0420  30FF               	movlw	255
  3319  0421  0140               	movlb	0	; select bank0
  3320  0422  0092               	movwf	18	;volatile
  3321                           
  3322                           ;main.c: 20: TRISC = 0xFF;
  3323  0423  30FF               	movlw	255
  3324  0424  0094               	movwf	20	;volatile
  3325  0425                     l1313:	
  3326                           
  3327                           ;main.c: 21: ANSELA = 0;
  3328  0425  017E               	movlb	62	; select bank62
  3329  0426  01B8               	clrf	56	;volatile
  3330  0427                     l1315:	
  3331                           
  3332                           ;main.c: 22: ANSELC = 0;
  3333  0427  01CE               	clrf	78	;volatile
  3334                           
  3335                           ;main.c: 23: WPUA = 0b00110000;
  3336  0428  3030               	movlw	48
  3337  0429  00B9               	movwf	57	;volatile
  3338                           
  3339                           ;main.c: 24: WPUC = 0b00011000;
  3340  042A  3018               	movlw	24
  3341  042B  00CF               	movwf	79	;volatile
  3342  042C                     l1317:	
  3343                           
  3344                           ;main.c: 27: T1CONbits.CKPS = 0b00;
  3345  042C  30CF               	movlw	-49
  3346  042D  0144               	movlb	4	; select bank4
  3347  042E  058E               	andwf	14,f	;volatile
  3348  042F                     l1319:	
  3349                           
  3350                           ;main.c: 28: T1CONbits.nSYNC = 0;
  3351  042F  110E               	bcf	14,2	;volatile
  3352  0430                     l1321:	
  3353                           
  3354                           ;main.c: 29: T1CONbits.RD16 = 1;
  3355  0430  148E               	bsf	14,1	;volatile
  3356  0431                     l1323:	
  3357                           
  3358                           ;main.c: 30: T1GCONbits.GE = 0;
  3359  0431  138F               	bcf	15,7	;volatile
  3360  0432                     l1325:	
  3361                           
  3362                           ;main.c: 31: T1CLK = 0b00000100;
  3363  0432  3004               	movlw	4
  3364  0433  0091               	movwf	17	;volatile
  3365  0434                     l1327:	
  3366                           
  3367                           ;main.c: 32: TMR1 = 65228;
  3368  0434  30FE               	movlw	254
  3369  0435  008D               	movwf	13	;volatile
  3370  0436  30CC               	movlw	204
  3371  0437  008C               	movwf	12	;volatile
  3372  0438                     l1329:	
  3373                           
  3374                           ;main.c: 33: PIE4bits.TMR1IE = 1;
  3375  0438  014E               	movlb	14	; select bank14
  3376  0439  141A               	bsf	26,0	;volatile
  3377  043A                     l1331:	
  3378                           
  3379                           ;main.c: 34: T1CONbits.ON = 1;
  3380  043A  0144               	movlb	4	; select bank4
  3381  043B  140E               	bsf	14,0	;volatile
  3382  043C                     l1333:	
  3383                           
  3384                           ;main.c: 36: INTCONbits.GIE = 1;
  3385  043C  178B               	bsf	11,7	;volatile
  3386  043D                     l1335:	
  3387                           
  3388                           ;main.c: 37: INTCONbits.PEIE = 1;
  3389  043D  170B               	bsf	11,6	;volatile
  3390  043E                     l69:	
  3391  043E  0008               	return
  3392  043F                     __end_of_PIC_SETUP:	
  3393                           
  3394                           	psect	text6
  3395  047F                     __ptext6:	
  3396 ;; *************** function _LM49450_analog_init *****************
  3397 ;; Defined at:
  3398 ;;		line 90 in file "LM49450.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  reg0_analog     1    0        unsigned char 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      unsigned char 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2, status,0, pclath, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3412 ;;      Params:         0       0       0       0       0       0       0       0
  3413 ;;      Locals:         1       0       0       0       0       0       0       0
  3414 ;;      Temps:          1       0       0       0       0       0       0       0
  3415 ;;      Totals:         2       0       0       0       0       0       0       0
  3416 ;;Total ram usage:        2 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    4
  3419 ;; This function calls:
  3420 ;;		_LM49450_write
  3421 ;; This function is called by:
  3422 ;;		_main
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           
  3427                           ;psect for function _LM49450_analog_init
  3428  047F                     _LM49450_analog_init:	
  3429  047F                     l1383:	
  3430                           ;incstack = 0
  3431                           ; Regs used in _LM49450_analog_init: [wreg+status,2+status,0+pclath+cstack]
  3432                           
  3433  047F                     l1385:	
  3434                           
  3435                           ;LM49450.c: 97: LM49450_write(0x00, reg0_analog);
  3436  047F  302B               	movlw	43
  3437  0480  00F3               	movwf	??_LM49450_analog_init
  3438  0481  0873               	movf	??_LM49450_analog_init,w
  3439  0482  00F1               	movwf	LM49450_write@data
  3440  0483  3000               	movlw	0
  3441  0484  3184  2455  3184   	fcall	_LM49450_write
  3442  0487                     l1387:	
  3443                           
  3444                           ;LM49450.c: 99: return reg0_analog;
  3445  0487  302B               	movlw	43
  3446  0488                     l281:	
  3447  0488  0008               	return
  3448  0489                     __end_of_LM49450_analog_init:	
  3449                           
  3450                           	psect	text7
  3451  03D6                     __ptext7:	
  3452 ;; *************** function _LM49450_Wii_init *****************
  3453 ;; Defined at:
  3454 ;;		line 46 in file "LM49450.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;  reg0_Wii        1    0        unsigned char 
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      unsigned char 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, status,0, pclath, cstack
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3468 ;;      Params:         0       0       0       0       0       0       0       0
  3469 ;;      Locals:         1       0       0       0       0       0       0       0
  3470 ;;      Temps:          1       0       0       0       0       0       0       0
  3471 ;;      Totals:         2       0       0       0       0       0       0       0
  3472 ;;Total ram usage:        2 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    4
  3475 ;; This function calls:
  3476 ;;		_LM49450_write
  3477 ;; This function is called by:
  3478 ;;		_main
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           
  3483                           ;psect for function _LM49450_Wii_init
  3484  03D6                     _LM49450_Wii_init:	
  3485  03D6                     l1351:	
  3486                           ;incstack = 0
  3487                           ; Regs used in _LM49450_Wii_init: [wreg+status,2+status,0+pclath+cstack]
  3488                           
  3489  03D6                     l1353:	
  3490                           
  3491                           ;LM49450.c: 52: LM49450_write(0x00, reg0_Wii);
  3492  03D6  3029               	movlw	41
  3493  03D7  00F3               	movwf	??_LM49450_Wii_init
  3494  03D8  0873               	movf	??_LM49450_Wii_init,w
  3495  03D9  00F1               	movwf	LM49450_write@data
  3496  03DA  3000               	movlw	0
  3497  03DB  3184  2455  3183   	fcall	_LM49450_write
  3498  03DE                     l1355:	
  3499                           
  3500                           ;LM49450.c: 55: LM49450_write(0x01, 0b00000001);
  3501  03DE  01F1               	clrf	LM49450_write@data
  3502  03DF  0AF1               	incf	LM49450_write@data,f
  3503  03E0  3001               	movlw	1
  3504  03E1  3184  2455  3183   	fcall	_LM49450_write
  3505  03E4                     l1357:	
  3506                           
  3507                           ;LM49450.c: 56: LM49450_write(0x02, 0x4B);
  3508  03E4  304B               	movlw	75
  3509  03E5  00F3               	movwf	??_LM49450_Wii_init
  3510  03E6  0873               	movf	??_LM49450_Wii_init,w
  3511  03E7  00F1               	movwf	LM49450_write@data
  3512  03E8  3002               	movlw	2
  3513  03E9  3184  2455  3183   	fcall	_LM49450_write
  3514  03EC                     l1359:	
  3515                           
  3516                           ;LM49450.c: 61: LM49450_write(0x03, 0b01110001);
  3517  03EC  3071               	movlw	113
  3518  03ED  00F3               	movwf	??_LM49450_Wii_init
  3519  03EE  0873               	movf	??_LM49450_Wii_init,w
  3520  03EF  00F1               	movwf	LM49450_write@data
  3521  03F0  3003               	movlw	3
  3522  03F1  3184  2455  3183   	fcall	_LM49450_write
  3523  03F4                     l1361:	
  3524                           
  3525                           ;LM49450.c: 63: LM49450_write(0x04, 0b00000000);
  3526  03F4  01F1               	clrf	LM49450_write@data
  3527  03F5  3004               	movlw	4
  3528  03F6  3184  2455  3183   	fcall	_LM49450_write
  3529  03F9                     l1363:	
  3530                           
  3531                           ;LM49450.c: 65: return reg0_Wii;
  3532  03F9  3029               	movlw	41
  3533  03FA                     l275:	
  3534  03FA  0008               	return
  3535  03FB                     __end_of_LM49450_Wii_init:	
  3536                           
  3537                           	psect	text8
  3538  03AF                     __ptext8:	
  3539 ;; *************** function _LM49450_PS2_init *****************
  3540 ;; Defined at:
  3541 ;;		line 68 in file "LM49450.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  reg0_PS2        1    0        unsigned char 
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      unsigned char 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0, pclath, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3555 ;;      Params:         0       0       0       0       0       0       0       0
  3556 ;;      Locals:         1       0       0       0       0       0       0       0
  3557 ;;      Temps:          1       0       0       0       0       0       0       0
  3558 ;;      Totals:         2       0       0       0       0       0       0       0
  3559 ;;Total ram usage:        2 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    4
  3562 ;; This function calls:
  3563 ;;		_LM49450_write
  3564 ;; This function is called by:
  3565 ;;		_main
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           
  3570                           ;psect for function _LM49450_PS2_init
  3571  03AF                     _LM49450_PS2_init:	
  3572  03AF                     l1367:	
  3573                           ;incstack = 0
  3574                           ; Regs used in _LM49450_PS2_init: [wreg+status,2+status,0+pclath+cstack]
  3575                           
  3576  03AF                     l1369:	
  3577                           
  3578                           ;LM49450.c: 74: LM49450_write(0x00, reg0_PS2);
  3579  03AF  3029               	movlw	41
  3580  03B0  00F3               	movwf	??_LM49450_PS2_init
  3581  03B1  0873               	movf	??_LM49450_PS2_init,w
  3582  03B2  00F1               	movwf	LM49450_write@data
  3583  03B3  3000               	movlw	0
  3584  03B4  3184  2455  3183   	fcall	_LM49450_write
  3585  03B7                     l1371:	
  3586                           
  3587                           ;LM49450.c: 77: LM49450_write(0x01, 0b00000010);
  3588  03B7  3002               	movlw	2
  3589  03B8  00F3               	movwf	??_LM49450_PS2_init
  3590  03B9  0873               	movf	??_LM49450_PS2_init,w
  3591  03BA  00F1               	movwf	LM49450_write@data
  3592  03BB  3001               	movlw	1
  3593  03BC  3184  2455  3183   	fcall	_LM49450_write
  3594  03BF                     l1373:	
  3595                           
  3596                           ;LM49450.c: 79: LM49450_write(0x02, 0x4B);
  3597  03BF  304B               	movlw	75
  3598  03C0  00F3               	movwf	??_LM49450_PS2_init
  3599  03C1  0873               	movf	??_LM49450_PS2_init,w
  3600  03C2  00F1               	movwf	LM49450_write@data
  3601  03C3  3002               	movlw	2
  3602  03C4  3184  2455  3183   	fcall	_LM49450_write
  3603  03C7                     l1375:	
  3604                           
  3605                           ;LM49450.c: 83: LM49450_write(0x03, 0b01110000);
  3606  03C7  3070               	movlw	112
  3607  03C8  00F3               	movwf	??_LM49450_PS2_init
  3608  03C9  0873               	movf	??_LM49450_PS2_init,w
  3609  03CA  00F1               	movwf	LM49450_write@data
  3610  03CB  3003               	movlw	3
  3611  03CC  3184  2455  3183   	fcall	_LM49450_write
  3612  03CF                     l1377:	
  3613                           
  3614                           ;LM49450.c: 85: LM49450_write(0x04, 0b00000000);
  3615  03CF  01F1               	clrf	LM49450_write@data
  3616  03D0  3004               	movlw	4
  3617  03D1  3184  2455  3183   	fcall	_LM49450_write
  3618  03D4                     l1379:	
  3619                           
  3620                           ;LM49450.c: 87: return reg0_PS2;
  3621  03D4  3029               	movlw	41
  3622  03D5                     l278:	
  3623  03D5  0008               	return
  3624  03D6                     __end_of_LM49450_PS2_init:	
  3625                           
  3626                           	psect	text9
  3627  03FB                     __ptext9:	
  3628 ;; *************** function _LM49450_DC_init *****************
  3629 ;; Defined at:
  3630 ;;		line 22 in file "LM49450.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;		None
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  reg0_DC         1    0        unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  1    wreg      unsigned char 
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, status,0, pclath, cstack
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3644 ;;      Params:         0       0       0       0       0       0       0       0
  3645 ;;      Locals:         1       0       0       0       0       0       0       0
  3646 ;;      Temps:          1       0       0       0       0       0       0       0
  3647 ;;      Totals:         2       0       0       0       0       0       0       0
  3648 ;;Total ram usage:        2 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    4
  3651 ;; This function calls:
  3652 ;;		_LM49450_write
  3653 ;; This function is called by:
  3654 ;;		_main
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           
  3659                           ;psect for function _LM49450_DC_init
  3660  03FB                     _LM49450_DC_init:	
  3661  03FB                     l1391:	
  3662                           ;incstack = 0
  3663                           ; Regs used in _LM49450_DC_init: [wreg+status,2+status,0+pclath+cstack]
  3664                           
  3665  03FB                     l1393:	
  3666                           
  3667                           ;LM49450.c: 29: LM49450_write(0x00, reg0_DC);
  3668  03FB  3029               	movlw	41
  3669  03FC  00F3               	movwf	??_LM49450_DC_init
  3670  03FD  0873               	movf	??_LM49450_DC_init,w
  3671  03FE  00F1               	movwf	LM49450_write@data
  3672  03FF  3000               	movlw	0
  3673  0400  3184  2455  3183   	fcall	_LM49450_write
  3674  0403                     l1395:	
  3675                           
  3676                           ;LM49450.c: 32: LM49450_write(0x01, 0b00000001);
  3677  0403  01F1               	clrf	LM49450_write@data
  3678  0404  0AF1               	incf	LM49450_write@data,f
  3679  0405  3001               	movlw	1
  3680  0406  3184  2455  3183   	fcall	_LM49450_write
  3681  0409                     l1397:	
  3682                           
  3683                           ;LM49450.c: 38: LM49450_write(0x04, 0b00000000);
  3684  0409  01F1               	clrf	LM49450_write@data
  3685  040A  3004               	movlw	4
  3686  040B  3184  2455  3183   	fcall	_LM49450_write
  3687  040E                     l1399:	
  3688                           
  3689                           ;LM49450.c: 40: LM49450_write(0x02, 0x44);
  3690  040E  3044               	movlw	68
  3691  040F  00F3               	movwf	??_LM49450_DC_init
  3692  0410  0873               	movf	??_LM49450_DC_init,w
  3693  0411  00F1               	movwf	LM49450_write@data
  3694  0412  3002               	movlw	2
  3695  0413  3184  2455  3183   	fcall	_LM49450_write
  3696  0416                     l1401:	
  3697                           
  3698                           ;LM49450.c: 41: LM49450_write(0x03, 0b00000010);
  3699  0416  3002               	movlw	2
  3700  0417  00F3               	movwf	??_LM49450_DC_init
  3701  0418  0873               	movf	??_LM49450_DC_init,w
  3702  0419  00F1               	movwf	LM49450_write@data
  3703  041A  3003               	movlw	3
  3704  041B  3184  2455  3183   	fcall	_LM49450_write
  3705  041E                     l1403:	
  3706                           
  3707                           ;LM49450.c: 43: return reg0_DC;
  3708  041E  3029               	movlw	41
  3709  041F                     l272:	
  3710  041F  0008               	return
  3711  0420                     __end_of_LM49450_DC_init:	
  3712                           
  3713                           	psect	text10
  3714  0455                     __ptext10:	
  3715 ;; *************** function _LM49450_write *****************
  3716 ;; Defined at:
  3717 ;;		line 14 in file "LM49450.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;  reg             1    wreg     unsigned char 
  3720 ;;  data            1    1[COMMON] unsigned char 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  reg             1    2[COMMON] unsigned char 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0, pclath, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3732 ;;      Params:         1       0       0       0       0       0       0       0
  3733 ;;      Locals:         1       0       0       0       0       0       0       0
  3734 ;;      Temps:          0       0       0       0       0       0       0       0
  3735 ;;      Totals:         2       0       0       0       0       0       0       0
  3736 ;;Total ram usage:        2 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    3
  3739 ;; This function calls:
  3740 ;;		_I2C_Master_Start
  3741 ;;		_I2C_Master_Stop
  3742 ;;		_I2C_Master_Write
  3743 ;; This function is called by:
  3744 ;;		_main
  3745 ;;		_LM49450_DC_init
  3746 ;;		_LM49450_Wii_init
  3747 ;;		_LM49450_PS2_init
  3748 ;;		_LM49450_analog_init
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           
  3753                           ;psect for function _LM49450_write
  3754  0455                     _LM49450_write:	
  3755                           
  3756                           ;incstack = 0
  3757                           ; Regs used in _LM49450_write: [wreg+status,2+status,0+pclath+cstack]
  3758                           ;LM49450_write@reg stored from wreg
  3759  0455  00F2               	movwf	LM49450_write@reg
  3760  0456                     l1285:	
  3761                           
  3762                           ;LM49450.c: 15: I2C_Master_Start();
  3763  0456  3184  24AC  3184   	fcall	_I2C_Master_Start
  3764                           
  3765                           ;LM49450.c: 16: I2C_Master_Write(0b1111101 << 1);
  3766  0459  30FA               	movlw	250
  3767  045A  3184  2491  3184   	fcall	_I2C_Master_Write
  3768                           
  3769                           ;LM49450.c: 17: I2C_Master_Write(reg);
  3770  045D  0872               	movf	LM49450_write@reg,w
  3771  045E  3184  2491  3184   	fcall	_I2C_Master_Write
  3772                           
  3773                           ;LM49450.c: 18: I2C_Master_Write(data);
  3774  0461  0871               	movf	LM49450_write@data,w
  3775  0462  3184  2491  3184   	fcall	_I2C_Master_Write
  3776                           
  3777                           ;LM49450.c: 19: I2C_Master_Stop();
  3778  0465  3184  24A6  3184   	fcall	_I2C_Master_Stop
  3779  0468                     l269:	
  3780  0468  0008               	return
  3781  0469                     __end_of_LM49450_write:	
  3782                           
  3783                           	psect	text11
  3784  0491                     __ptext11:	
  3785 ;; *************** function _I2C_Master_Write *****************
  3786 ;; Defined at:
  3787 ;;		line 76 in file "I2C.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;  data            1    wreg     unsigned char 
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  data            1    0[COMMON] unsigned char 
  3792 ;; Return value:  Size  Location     Type
  3793 ;;                  1    wreg      void 
  3794 ;; Registers used:
  3795 ;;		wreg, status,2, status,0, pclath, cstack
  3796 ;; Tracked objects:
  3797 ;;		On entry : 0/0
  3798 ;;		On exit  : 0/0
  3799 ;;		Unchanged: 0/0
  3800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3801 ;;      Params:         0       0       0       0       0       0       0       0
  3802 ;;      Locals:         1       0       0       0       0       0       0       0
  3803 ;;      Temps:          0       0       0       0       0       0       0       0
  3804 ;;      Totals:         1       0       0       0       0       0       0       0
  3805 ;;Total ram usage:        1 bytes
  3806 ;; Hardware stack levels used:    1
  3807 ;; Hardware stack levels required when called:    2
  3808 ;; This function calls:
  3809 ;;		_I2C_Master_Wait
  3810 ;; This function is called by:
  3811 ;;		_LM49450_write
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           
  3816                           ;psect for function _I2C_Master_Write
  3817  0491                     _I2C_Master_Write:	
  3818                           
  3819                           ;incstack = 0
  3820                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  3821                           ;I2C_Master_Write@data stored from wreg
  3822  0491  00F0               	movwf	I2C_Master_Write@data
  3823  0492                     l1281:	
  3824                           
  3825                           ;I2C.c: 78: I2C_Master_Wait();
  3826  0492  3184  2469  3184   	fcall	_I2C_Master_Wait
  3827  0495                     l1283:	
  3828                           
  3829                           ;I2C.c: 79: SSP1BUF = data;
  3830  0495  0870               	movf	I2C_Master_Write@data,w
  3831  0496  0143               	movlb	3	; select bank3
  3832  0497  008C               	movwf	12	;volatile
  3833  0498                     l241:	
  3834  0498  0008               	return
  3835  0499                     __end_of_I2C_Master_Write:	
  3836                           
  3837                           	psect	text12
  3838  04A6                     __ptext12:	
  3839 ;; *************** function _I2C_Master_Stop *****************
  3840 ;; Defined at:
  3841 ;;		line 70 in file "I2C.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;		None
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;		None
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, status,2, status,0, pclath, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3855 ;;      Params:         0       0       0       0       0       0       0       0
  3856 ;;      Locals:         0       0       0       0       0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0       0       0       0
  3858 ;;      Totals:         0       0       0       0       0       0       0       0
  3859 ;;Total ram usage:        0 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    2
  3862 ;; This function calls:
  3863 ;;		_I2C_Master_Wait
  3864 ;; This function is called by:
  3865 ;;		_LM49450_write
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _I2C_Master_Stop
  3871  04A6                     _I2C_Master_Stop:	
  3872  04A6                     l1277:	
  3873                           ;incstack = 0
  3874                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3875                           
  3876                           
  3877                           ;I2C.c: 72: I2C_Master_Wait();
  3878  04A6  3184  2469  3184   	fcall	_I2C_Master_Wait
  3879  04A9                     l1279:	
  3880                           
  3881                           ;I2C.c: 73: SSP1CON2bits.PEN = 1;
  3882  04A9  0143               	movlb	3	; select bank3
  3883  04AA  1511               	bsf	17,2	;volatile
  3884  04AB                     l238:	
  3885  04AB  0008               	return
  3886  04AC                     __end_of_I2C_Master_Stop:	
  3887                           
  3888                           	psect	text13
  3889  04AC                     __ptext13:	
  3890 ;; *************** function _I2C_Master_Start *****************
  3891 ;; Defined at:
  3892 ;;		line 58 in file "I2C.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;		None
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      void 
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0, pclath, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3906 ;;      Params:         0       0       0       0       0       0       0       0
  3907 ;;      Locals:         0       0       0       0       0       0       0       0
  3908 ;;      Temps:          0       0       0       0       0       0       0       0
  3909 ;;      Totals:         0       0       0       0       0       0       0       0
  3910 ;;Total ram usage:        0 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    2
  3913 ;; This function calls:
  3914 ;;		_I2C_Master_Wait
  3915 ;; This function is called by:
  3916 ;;		_LM49450_write
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _I2C_Master_Start
  3922  04AC                     _I2C_Master_Start:	
  3923  04AC                     l1273:	
  3924                           ;incstack = 0
  3925                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  3926                           
  3927                           
  3928                           ;I2C.c: 60: I2C_Master_Wait();
  3929  04AC  3184  2469  3184   	fcall	_I2C_Master_Wait
  3930  04AF                     l1275:	
  3931                           
  3932                           ;I2C.c: 61: SSP1CON2bits.SEN = 1;
  3933  04AF  0143               	movlb	3	; select bank3
  3934  04B0  1411               	bsf	17,0	;volatile
  3935  04B1                     l232:	
  3936  04B1  0008               	return
  3937  04B2                     __end_of_I2C_Master_Start:	
  3938                           
  3939                           	psect	text14
  3940  0469                     __ptext14:	
  3941 ;; *************** function _I2C_Master_Wait *****************
  3942 ;; Defined at:
  3943 ;;		line 53 in file "I2C.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;		None
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      void 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3957 ;;      Params:         0       0       0       0       0       0       0       0
  3958 ;;      Locals:         0       0       0       0       0       0       0       0
  3959 ;;      Temps:          0       0       0       0       0       0       0       0
  3960 ;;      Totals:         0       0       0       0       0       0       0       0
  3961 ;;Total ram usage:        0 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    1
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		_I2C_Master_Start
  3968 ;;		_I2C_Master_Stop
  3969 ;;		_I2C_Master_Write
  3970 ;;		_I2C_Master_Repeated_Start
  3971 ;;		_I2C_Master_Read
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           
  3976                           ;psect for function _I2C_Master_Wait
  3977  0469                     _I2C_Master_Wait:	
  3978  0469                     l1269:	
  3979                           ;incstack = 0
  3980                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  3981                           
  3982  0469                     l226:	
  3983                           ;I2C.c: 55: while ((SSP1STAT & 0x04) || (SSP1CON2 & 0x1F));
  3984                           
  3985  0469  0143               	movlb	3	; select bank3
  3986  046A  190F               	btfsc	15,2	;volatile
  3987  046B  2C6D               	goto	u701
  3988  046C  2C6E               	goto	u700
  3989  046D                     u701:	
  3990  046D  2C69               	goto	l226
  3991  046E                     u700:	
  3992  046E                     l1271:	
  3993  046E  0811               	movf	17,w	;volatile
  3994  046F  391F               	andlw	31
  3995  0470  1D03               	btfss	3,2
  3996  0471  2C73               	goto	u711
  3997  0472  2C74               	goto	u710
  3998  0473                     u711:	
  3999  0473  2C69               	goto	l226
  4000  0474                     u710:	
  4001  0474                     l229:	
  4002  0474  0008               	return
  4003  0475                     __end_of_I2C_Master_Wait:	
  4004                           
  4005                           	psect	text15
  4006  0381                     __ptext15:	
  4007 ;; *************** function _I2C_Master_Init *****************
  4008 ;; Defined at:
  4009 ;;		line 45 in file "I2C.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;  clk             4    0[BANK0 ] const unsigned long 
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;		None
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  1    wreg      void 
  4016 ;; Registers used:
  4017 ;;		wreg, status,2, status,0, pclath, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4023 ;;      Params:         0       4       0       0       0       0       0       0
  4024 ;;      Locals:         0       0       0       0       0       0       0       0
  4025 ;;      Temps:          0       4       0       0       0       0       0       0
  4026 ;;      Totals:         0       8       0       0       0       0       0       0
  4027 ;;Total ram usage:        8 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; Hardware stack levels required when called:    2
  4030 ;; This function calls:
  4031 ;;		___lldiv
  4032 ;; This function is called by:
  4033 ;;		_main
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           
  4038                           ;psect for function _I2C_Master_Init
  4039  0381                     _I2C_Master_Init:	
  4040  0381                     l1343:	
  4041                           ;incstack = 0
  4042                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  4043                           
  4044                           
  4045                           ;I2C.c: 47: SSP1CON1 = 0b00101000;
  4046  0381  3028               	movlw	40
  4047  0382  0143               	movlb	3	; select bank3
  4048  0383  0090               	movwf	16	;volatile
  4049  0384                     l1345:	
  4050                           
  4051                           ;I2C.c: 48: SSP1CON2 = 0x00;
  4052  0384  0191               	clrf	17	;volatile
  4053  0385                     l1347:	
  4054                           
  4055                           ;I2C.c: 49: SSP1ADD = (32000000 / (4*clk)) - 1;
  4056  0385  0140               	movlb	0	; select bank0
  4057  0386  083D               	movf	I2C_Master_Init@clk,w
  4058  0387  00C1               	movwf	??_I2C_Master_Init
  4059  0388  083E               	movf	I2C_Master_Init@clk+1,w
  4060  0389  00C2               	movwf	??_I2C_Master_Init+1
  4061  038A  083F               	movf	I2C_Master_Init@clk+2,w
  4062  038B  00C3               	movwf	??_I2C_Master_Init+2
  4063  038C  0840               	movf	I2C_Master_Init@clk+3,w
  4064  038D  00C4               	movwf	??_I2C_Master_Init+3
  4065  038E  3002               	movlw	2
  4066  038F                     u795:	
  4067  038F  35C1               	lslf	??_I2C_Master_Init,f
  4068  0390  0DC2               	rlf	??_I2C_Master_Init+1,f
  4069  0391  0DC3               	rlf	??_I2C_Master_Init+2,f
  4070  0392  0DC4               	rlf	??_I2C_Master_Init+3,f
  4071  0393                     u790:	
  4072  0393  0B89               	decfsz	9,f
  4073  0394  2B8F               	goto	u795
  4074  0395  0844               	movf	??_I2C_Master_Init+3,w
  4075  0396  00F3               	movwf	___lldiv@divisor+3
  4076  0397  0843               	movf	??_I2C_Master_Init+2,w
  4077  0398  00F2               	movwf	___lldiv@divisor+2
  4078  0399  0842               	movf	??_I2C_Master_Init+1,w
  4079  039A  00F1               	movwf	___lldiv@divisor+1
  4080  039B  0841               	movf	??_I2C_Master_Init,w
  4081  039C  00F0               	movwf	___lldiv@divisor
  4082  039D  3001               	movlw	1
  4083  039E  00F7               	movwf	___lldiv@dividend+3
  4084  039F  30E8               	movlw	232
  4085  03A0  00F6               	movwf	___lldiv@dividend+2
  4086  03A1  3048               	movlw	72
  4087  03A2  00F5               	movwf	___lldiv@dividend+1
  4088  03A3  3000               	movlw	0
  4089  03A4  00F4               	movwf	___lldiv@dividend
  4090  03A5  3183  2327  3183   	fcall	___lldiv
  4091  03A8  0870               	movf	?___lldiv,w
  4092  03A9  3EFF               	addlw	255
  4093  03AA  0143               	movlb	3	; select bank3
  4094  03AB  008D               	movwf	13	;volatile
  4095  03AC                     l1349:	
  4096                           
  4097                           ;I2C.c: 50: SSP1STAT = 0b10000000;
  4098  03AC  3080               	movlw	128
  4099  03AD  008F               	movwf	15	;volatile
  4100  03AE                     l223:	
  4101  03AE  0008               	return
  4102  03AF                     __end_of_I2C_Master_Init:	
  4103                           
  4104                           	psect	text16
  4105  0327                     __ptext16:	
  4106 ;; *************** function ___lldiv *****************
  4107 ;; Defined at:
  4108 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\__lldiv.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;  divisor         4    0[COMMON] unsigned long 
  4111 ;;  dividend        4    4[COMMON] unsigned long 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  quotient        4    9[COMMON] unsigned long 
  4114 ;;  counter         1   13[COMMON] unsigned char 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  4    0[COMMON] unsigned long 
  4117 ;; Registers used:
  4118 ;;		wreg, status,2, status,0
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4124 ;;      Params:         8       0       0       0       0       0       0       0
  4125 ;;      Locals:         5       0       0       0       0       0       0       0
  4126 ;;      Temps:          1       0       0       0       0       0       0       0
  4127 ;;      Totals:        14       0       0       0       0       0       0       0
  4128 ;;Total ram usage:       14 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:    1
  4131 ;; This function calls:
  4132 ;;		Nothing
  4133 ;; This function is called by:
  4134 ;;		_I2C_Master_Init
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           
  4139                           ;psect for function ___lldiv
  4140  0327                     ___lldiv:	
  4141  0327                     l1287:	
  4142                           ;incstack = 0
  4143                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4144                           
  4145  0327  3000               	movlw	0
  4146  0328  00FC               	movwf	___lldiv@quotient+3
  4147  0329  3000               	movlw	0
  4148  032A  00FB               	movwf	___lldiv@quotient+2
  4149  032B  3000               	movlw	0
  4150  032C  00FA               	movwf	___lldiv@quotient+1
  4151  032D  3000               	movlw	0
  4152  032E  00F9               	movwf	___lldiv@quotient
  4153  032F  0873               	movf	___lldiv@divisor+3,w
  4154  0330  0472               	iorwf	___lldiv@divisor+2,w
  4155  0331  0471               	iorwf	___lldiv@divisor+1,w
  4156  0332  0470               	iorwf	___lldiv@divisor,w
  4157  0333  1903               	skipnz
  4158  0334  2B36               	goto	u721
  4159  0335  2B37               	goto	u720
  4160  0336                     u721:	
  4161  0336  2B78               	goto	l1307
  4162  0337                     u720:	
  4163  0337                     l1289:	
  4164  0337  01FD               	clrf	___lldiv@counter
  4165  0338  0AFD               	incf	___lldiv@counter,f
  4166  0339  2B45               	goto	l1293
  4167  033A                     l1291:	
  4168  033A  3001               	movlw	1
  4169  033B                     u735:	
  4170  033B  35F0               	lslf	___lldiv@divisor,f
  4171  033C  0DF1               	rlf	___lldiv@divisor+1,f
  4172  033D  0DF2               	rlf	___lldiv@divisor+2,f
  4173  033E  0DF3               	rlf	___lldiv@divisor+3,f
  4174  033F  0B89               	decfsz	9,f
  4175  0340  2B3B               	goto	u735
  4176  0341  3001               	movlw	1
  4177  0342  00F8               	movwf	??___lldiv
  4178  0343  0878               	movf	??___lldiv,w
  4179  0344  07FD               	addwf	___lldiv@counter,f
  4180  0345                     l1293:	
  4181  0345  1FF3               	btfss	___lldiv@divisor+3,7
  4182  0346  2B48               	goto	u741
  4183  0347  2B49               	goto	u740
  4184  0348                     u741:	
  4185  0348  2B3A               	goto	l1291
  4186  0349                     u740:	
  4187  0349                     l1295:	
  4188  0349  3001               	movlw	1
  4189  034A                     u755:	
  4190  034A  35F9               	lslf	___lldiv@quotient,f
  4191  034B  0DFA               	rlf	___lldiv@quotient+1,f
  4192  034C  0DFB               	rlf	___lldiv@quotient+2,f
  4193  034D  0DFC               	rlf	___lldiv@quotient+3,f
  4194  034E  0B89               	decfsz	9,f
  4195  034F  2B4A               	goto	u755
  4196  0350                     l1297:	
  4197  0350  0873               	movf	___lldiv@divisor+3,w
  4198  0351  0277               	subwf	___lldiv@dividend+3,w
  4199  0352  1D03               	skipz
  4200  0353  2B5E               	goto	u765
  4201  0354  0872               	movf	___lldiv@divisor+2,w
  4202  0355  0276               	subwf	___lldiv@dividend+2,w
  4203  0356  1D03               	skipz
  4204  0357  2B5E               	goto	u765
  4205  0358  0871               	movf	___lldiv@divisor+1,w
  4206  0359  0275               	subwf	___lldiv@dividend+1,w
  4207  035A  1D03               	skipz
  4208  035B  2B5E               	goto	u765
  4209  035C  0870               	movf	___lldiv@divisor,w
  4210  035D  0274               	subwf	___lldiv@dividend,w
  4211  035E                     u765:	
  4212  035E  1C03               	skipc
  4213  035F  2B61               	goto	u761
  4214  0360  2B62               	goto	u760
  4215  0361                     u761:	
  4216  0361  2B6B               	goto	l1303
  4217  0362                     u760:	
  4218  0362                     l1299:	
  4219  0362  0870               	movf	___lldiv@divisor,w
  4220  0363  02F4               	subwf	___lldiv@dividend,f
  4221  0364  0871               	movf	___lldiv@divisor+1,w
  4222  0365  3BF5               	subwfb	___lldiv@dividend+1,f
  4223  0366  0872               	movf	___lldiv@divisor+2,w
  4224  0367  3BF6               	subwfb	___lldiv@dividend+2,f
  4225  0368  0873               	movf	___lldiv@divisor+3,w
  4226  0369  3BF7               	subwfb	___lldiv@dividend+3,f
  4227  036A                     l1301:	
  4228  036A  1479               	bsf	___lldiv@quotient,0
  4229  036B                     l1303:	
  4230  036B  3001               	movlw	1
  4231  036C                     u775:	
  4232  036C  36F3               	lsrf	___lldiv@divisor+3,f
  4233  036D  0CF2               	rrf	___lldiv@divisor+2,f
  4234  036E  0CF1               	rrf	___lldiv@divisor+1,f
  4235  036F  0CF0               	rrf	___lldiv@divisor,f
  4236  0370  0B89               	decfsz	9,f
  4237  0371  2B6C               	goto	u775
  4238  0372                     l1305:	
  4239  0372  3001               	movlw	1
  4240  0373  02FD               	subwf	___lldiv@counter,f
  4241  0374  1D03               	btfss	3,2
  4242  0375  2B77               	goto	u781
  4243  0376  2B78               	goto	u780
  4244  0377                     u781:	
  4245  0377  2B49               	goto	l1295
  4246  0378                     u780:	
  4247  0378                     l1307:	
  4248  0378  087C               	movf	___lldiv@quotient+3,w
  4249  0379  00F3               	movwf	?___lldiv+3
  4250  037A  087B               	movf	___lldiv@quotient+2,w
  4251  037B  00F2               	movwf	?___lldiv+2
  4252  037C  087A               	movf	___lldiv@quotient+1,w
  4253  037D  00F1               	movwf	?___lldiv+1
  4254  037E  0879               	movf	___lldiv@quotient,w
  4255  037F  00F0               	movwf	?___lldiv
  4256  0380                     l385:	
  4257  0380  0008               	return
  4258  0381                     __end_of___lldiv:	
  4259                           
  4260                           	psect	intentry
  4261  0004                     __pintentry:	
  4262 ;; *************** function _ISR *****************
  4263 ;; Defined at:
  4264 ;;		line 40 in file "main.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;		None
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;		None
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      void 
  4271 ;; Registers used:
  4272 ;;		wreg
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4278 ;;      Params:         0       0       0       0       0       0       0       0
  4279 ;;      Locals:         0       0       0       0       0       0       0       0
  4280 ;;      Temps:          0       0       0       0       0       0       0       0
  4281 ;;      Totals:         0       0       0       0       0       0       0       0
  4282 ;;Total ram usage:        0 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		Interrupt level 1
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291  0004                     _ISR:	
  4292                           
  4293                           ;incstack = 0
  4294  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4295                           
  4296                           ; Regs used in _ISR: [wreg]
  4297  0005  3180               	pagesel	$
  4298  0006                     i1l1415:	
  4299                           
  4300                           ;main.c: 42: if(TMR1IF) {
  4301  0006  014E               	movlb	14	; select bank14
  4302  0007  1C10               	btfss	16,0	;volatile
  4303  0008  280A               	goto	u80_21
  4304  0009  280B               	goto	u80_20
  4305  000A                     u80_21:	
  4306  000A  281A               	goto	i1l75
  4307  000B                     u80_20:	
  4308  000B                     i1l1417:	
  4309                           
  4310                           ;main.c: 43: TMR1IF = 0;
  4311  000B  1010               	bcf	16,0	;volatile
  4312                           
  4313                           ;main.c: 44: TMR1 = 65228;
  4314  000C  30FE               	movlw	254
  4315  000D  0144               	movlb	4	; select bank4
  4316  000E  008D               	movwf	13	;volatile
  4317  000F  30CC               	movlw	204
  4318  0010  008C               	movwf	12	;volatile
  4319  0011                     i1l1419:	
  4320                           
  4321                           ;main.c: 45: timer_counter++;
  4322  0011  3001               	movlw	1
  4323  0012  0140               	movlb	0	; select bank0
  4324  0013  07B4               	addwf	_timer_counter,f
  4325  0014  3000               	movlw	0
  4326  0015  3DB5               	addwfc	_timer_counter+1,f
  4327  0016  3000               	movlw	0
  4328  0017  3DB6               	addwfc	_timer_counter+2,f
  4329  0018  3000               	movlw	0
  4330  0019  3DB7               	addwfc	_timer_counter+3,f
  4331  001A                     i1l75:	
  4332  001A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4333  001B  0009               	retfie
  4334  001C                     __end_of_ISR:	
  4335  007E                     btemp	set	126	;btemp
  4336  007E                     int$flags	set	126
  4337  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         29
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      9      42
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _LM49450_analog_init->_LM49450_write
    _LM49450_Wii_init->_LM49450_write
    _LM49450_PS2_init->_LM49450_write
    _LM49450_DC_init->_LM49450_write
    _LM49450_write->_I2C_Master_Write
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_I2C_Master_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11964
                                              8 BANK0      1     1      0
                    _I2C_Master_Init
                    _LM49450_DC_init
                   _LM49450_PS2_init
                   _LM49450_Wii_init
                _LM49450_analog_init
                      _LM49450_write
                          _PIC_SETUP
                           _PPS_lock
                         _PPS_unlock
                           _get_time
                         _timer_diff
 ---------------------------------------------------------------------------------
 (1) _timer_diff                                           8     4      4     402
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _get_time                                             4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) _PPS_unlock                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PPS_lock                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIC_SETUP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LM49450_analog_init                                  2     2      0    2239
                                              3 COMMON     2     2      0
                      _LM49450_write
 ---------------------------------------------------------------------------------
 (1) _LM49450_Wii_init                                     2     2      0    2239
                                              3 COMMON     2     2      0
                      _LM49450_write
 ---------------------------------------------------------------------------------
 (1) _LM49450_PS2_init                                     2     2      0    2239
                                              3 COMMON     2     2      0
                      _LM49450_write
 ---------------------------------------------------------------------------------
 (1) _LM49450_DC_init                                      2     2      0    2239
                                              3 COMMON     2     2      0
                      _LM49450_write
 ---------------------------------------------------------------------------------
 (1) _LM49450_write                                        2     1      1    2194
                                              1 COMMON     2     1      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     1     1      0      22
                                              0 COMMON     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _LM49450_DC_init
     _LM49450_write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _LM49450_PS2_init
     _LM49450_write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _LM49450_Wii_init
     _LM49450_write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _LM49450_analog_init
     _LM49450_write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _LM49450_write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _PIC_SETUP
   _PPS_lock
   _PPS_unlock
   _get_time
   _timer_diff

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      38       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      2A       6       52.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      38      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jan 01 13:02:47 2020

       __end_of_LM49450_write 0469         ??_LM49450_analog_init 0073                   __CFG_CP$OFF 0000  
                          l69 043E                    _PPS_unlock 0499                           l110 007C  
                         l112 008C                           l108 006C                           l109 009B  
                         l118 00FC                           l223 03AE                           l232 04B1  
                         l128 01CD                           l241 0498                           l226 0469  
                         l146 027B                           l260 0454                           l229 0474  
                         l238 04AB                           l272 041F                           l281 0488  
                         l185 049F                           l257 047E                           l275 03FA  
                         l188 0490                           l269 0468                           l278 03D5  
                         l385 0380                           _RA4 0064                           _RC0 0070  
                         _RA5 0065                           _RC1 0071                           _RC2 0072  
                         _RC3 0073                           _RC4 0074                           u700 046E  
                         _ISR 0004                           u701 046D                           u710 0474  
                         u711 0473                           u720 0337                           u721 0336  
                         u810 0060                           u811 005F                           u740 0349  
                         u900 00B6                           u820 0064                           u741 0348  
                         u901 00B5                           u821 0063                           u910 00CA  
                         u830 0070                           u735 033B                           u911 00C9  
                         u831 006F                           u760 0362                           u920 00E4  
                         u840 0074                           u761 0361                           u921 00E3  
                         u841 0073                           u930 00EE                           u850 0080  
                         u755 034A                           u931 00ED                           u851 007F  
                         u780 0378                           u940 00F3                           u860 0084  
                         u781 0377                           u765 035E                           u941 00F2  
                         u861 0083                           u790 0393                           u950 0103  
                         u870 0090                           u775 036C                           u951 0102  
                         u871 008F                           u960 0108                           u880 0094  
                         u961 0107                           u881 0093                           u970 010D  
                         u890 00B1                           u795 038F                           u971 010C  
                         u891 00B0                           u980 011C                           u981 011B  
                         u990 0146                           u991 0145          _vol_minus_time_start 0024  
                __CFG_BORV$LO 0000                           wreg 0009                 __CFG_BBEN$OFF 0000  
                __CFG_LVP$OFF 0000                          ?_ISR 0070                  __CFG_ZCD$OFF 0000  
                        l1301 036A                          l1303 036B                          l1311 0420  
                        l1305 0372                          l1401 0416                          l1321 0430  
                        l1313 0425                          l1307 0378                          l1403 041E  
                        l1331 043A                          l1323 0431                          l1315 0427  
                        l1411 043F                          l1333 043C                          l1325 0432  
                        l1317 042C                          l1341 0489                          l1501 016C  
                        l1421 003A                          l1343 0381                          l1271 046E  
                        l1351 03D6                          l1335 043D                          l1327 0434  
                        l1319 042F                          l1407 0475                          l1511 01A2  
                        l1503 0172                          l1431 005B                          l1423 0040  
                        l1345 0384                          l1273 04AC                          l1281 0492  
                        l1361 03F4                          l1353 03D6                          l1329 0438  
                        l1337 0499                          l1601 02B4                          l1521 01BA  
                        l1513 01A8                          l1505 0177                          l1441 0080  
                        l1433 0060                          l1425 0043                          l1291 033A  
                        l1347 0385                          l1275 04AF                          l1283 0495  
                        l1371 03B7                          l1363 03F9                          l1355 03DE  
                        l1339 049E                          l1611 02CA                          l1603 02B9  
                        l1515 01AE                          l1507 017C                          l1531 01CD  
                        l1451 00B1                          l1443 0084                          l1435 0064  
                        l1427 0046                          l1293 0345                          l1349 03AC  
                        l1269 0469                          l1277 04A6                          l1285 0456  
                        l1373 03BF                          l1357 03E4                          l1613 02CF  
                        l1621 02EF                          l1605 02BD                          l1541 01FC  
                        l1509 0196                          l1525 01C0                          l1461 00E4  
                        l1453 00B6                          l1445 0090                          l1437 0070  
                        l1429 0049                          l1295 0349                          l1287 0327  
                        l1279 04A9                          l1391 03FB                          l1375 03C7  
                        l1367 03AF                          l1359 03EC                          l1383 047F  
                        l1631 0313                          l1623 02F6                          l1615 02D7  
                        l1551 021C                          l1543 0208                          l1535 01D3  
                        l1519 01B4                          l1527 01C2                          l1471 0103  
                        l1463 00E9                          l1455 00C2                          l1447 0094  
                        l1439 0074                          l1297 0350                          l1289 0337  
                        l1393 03FB                          l1377 03CF                          l1369 03AF  
                        l1385 047F                          l1625 02FB                          l1633 031B  
                        l1617 02DD                          l1609 02C4                          l1561 0246  
                        l1553 021F                          l1545 020C                          l1537 01DF  
                        l1473 0108                          l1465 00EE                          l1457 00C5  
                        l1449 00AC                          l1299 0362                          l1395 0403  
                        l1379 03D4                          l1387 0487                          l1635 0320  
                        l1627 0303                          l1619 02E7                          l1571 0263  
                        l1563 0252                          l1555 0224                          l1547 0212  
                        l1539 01E2                          l1491 0152                          l1483 011D  
                        l1475 010D                          l1467 00F3                          l1459 00CA  
                        l1397 0409                          l1629 0309                          l1573 0268  
                        l1565 0258                          l1557 0229                          l1549 0217  
                        l1493 0156                          l1485 0129                          l1477 0115  
                        l1469 00FD                          l1399 040E                          l1591 0292  
                        l1567 025D                          l1559 022C                          l1583 027B  
                        l1495 015C                          l1487 012C                          l1479 0117  
                        l1593 0296                          l1585 0282                          l1577 026E  
                        l1497 0162                          l1489 0146                          l1595 029E  
                        l1579 0270                          l1499 0167                          l1597 02A4  
                        l1589 0289                          l1599 02A6                          u1000 015C  
                        u1001 015B                          u1010 0162                          u1011 0161  
                        u1100 01BF                          u1020 0167                          u1101 01BE  
                        u1021 0166                          u1110 01D2                          u1030 0172  
                        u1111 01D1                          u1031 0171                          u1200 025D  
                        u1120 01FC                          u1040 0177                          u1201 025C  
                        u1121 01FB                          u1041 0176                          u1210 0262  
                        u1130 0212                          u1050 0196                          u1211 0261  
                        u1131 0211                          u1051 0195                          u1300 02DD  
                        u1220 0268                          u1140 0217                          u1060 01A8  
                        u1301 02DC                          u1221 0267                          u1141 0216  
                        u1061 01A7                          u1310 02F6                          u1230 026D  
                        u1150 021C                          u1070 01AE                          u1311 02F5  
                        u1231 026C                          u1151 021B                          u1071 01AD  
                        u1320 02FB                          u1240 0282                          u1160 0224  
                        u1080 01B3                          u1321 02FA                          u1241 0281  
                        u1161 0223                          u1081 01B2                          u1330 0309  
                        u1250 0288                          u1170 0229                          u1090 01BA  
                        u1331 0308                          u1251 0287                          u1171 0228  
                        u1091 01B9                          u1260 02B9                          u1180 0246  
                        u1261 02B8                          u1181 0245                          u1270 02C3  
                        u1190 0258                          u1271 02C2                          u1191 0257  
                        u1280 02CA                          u1281 02C9                          u1290 02CF  
                        u1291 02CE                          i1l75 001A                          _TMR1 020C  
                        _WPUA 1F39                          _WPUC 1F4F                 __CFG_FCMEN$ON 0000  
                        _main 003A                          fsr0h 0005                          indf0 0000  
                        fsr0l 0004                          btemp 007E                          start 001C  
               __CFG_CSWEN$ON 0000              ?_LM49450_DC_init 0070                         ??_ISR 0070  
          __size_of_PIC_SETUP 001F              ?_I2C_Master_Init 003D              ?_I2C_Master_Wait 0070  
            ?_I2C_Master_Stop 0070                         ?_main 0070                 __CFG_WDTE$OFF 0000  
             __end_of___lldiv 0381                         _T1CLK 0211                         u80_20 000B  
                       u80_21 000A                         _TRISA 0012                         _TRISC 0014  
               __CFG_WRTB$OFF 0000                 __CFG_WRTC$OFF 0000                __CFG_BOREN$OFF 0000  
            __end_of_PPS_lock 0491                         status 0003                         wtemp0 007E  
              __CFG_MCLRE$OFF 0000               __initialization 001E                  __end_of_main 0327  
              __CFG_SAFEN$OFF 0000             ?_LM49450_PS2_init 0070                   ?_PPS_unlock 0070  
                      ??_main 0045            ??_LM49450_PS2_init 0073             ?_I2C_Master_Start 0070  
           ?_I2C_Master_Write 0070            ??_I2C_Master_Start 0070            ??_I2C_Master_Write 0070  
                      _ANSELA 1F38                        _ANSELC 1F4E                        _RC0PPS 1F20  
                      _RC1PPS 1F21                        i1l1415 0006                        i1l1417 000B  
                      i1l1419 0011             __end_of_PIC_SETUP 043F                        _TMR1IF 3880  
              _HPS_time_start 0030                __CFG_PWRTE$OFF 0000              __end_of_get_time 047F  
              __CFG_STVREN$ON 0000                     ??___lldiv 0078             ?_LM49450_Wii_init 0070  
          ??_LM49450_Wii_init 0073       __end_of__initialization 0036           __size_of_PPS_unlock 0007  
              __pcstackCOMMON 0070                  __pidataBANK0 04B2                     ?_PPS_lock 0070  
                  __pbssBANK0 0020   __end_of_LM49450_analog_init 0489                    __pmaintext 003A  
                  __pintentry 0004           __CFG_RSTOSC$HFINT32 0000                    ??_PPS_lock 0070  
                     _SSP1ADD 018D                       _PPSLOCK 1E8F                       _SSP1BUF 018C  
              _vol_plus_state 0039        __size_of_LM49450_write 0014                     ?_get_time 0070  
                     ___lldiv 0327                  ??_PPS_unlock 0070                       __ptext1 043F  
                     __ptext2 0475                       __ptext3 0499                       __ptext4 0489  
                     __ptext5 0420                       __ptext6 047F                       __ptext7 03D6  
                     __ptext8 03AF                       __ptext9 03FB      __size_of_LM49450_DC_init 0025  
             __CFG_WRTAPP$OFF 0000                  __size_of_ISR 0018                     _T1CONbits 020E  
             __CFG_WRTSAF$OFF 0000      __size_of_I2C_Master_Init 002E      __size_of_I2C_Master_Wait 000C  
    __size_of_I2C_Master_Stop 0006                       clrloop0 04A1                    ??_get_time 0074  
        end_of_initialization 0036     __size_of_LM49450_PS2_init 0027     __size_of_I2C_Master_Start 0006  
          __end_of_PPS_unlock 04A0                     _PIC_SETUP 0420     __size_of_I2C_Master_Write 0008  
             ___lldiv@divisor 0070               ___lldiv@counter 007D                 _LM49450_write 0455  
                   _HPS_state 003A         __CFG_WDTCPS$WDTCPS_13 0000                    _timer_diff 043F  
                  _mute_state 003B             LM49450_write@data 0071          __CFG_WDTCCS$LFINTOSC 0000  
                   _TRISCbits 0014                   timer_diff@t 0070              __CFG_FEXTOSC$OFF 0000  
         _vol_minus_time_hold 0020     __size_of_LM49450_Wii_init 0025                    ?_PIC_SETUP 0070  
              ?_LM49450_write 0071             __size_of_PPS_lock 0008           start_initialization 001E  
                 __end_of_ISR 001C             ??_LM49450_DC_init 0073             ??_I2C_Master_Init 0041  
           ??_I2C_Master_Wait 0070             ??_I2C_Master_Stop 0070              __CFG_LPBOREN$OFF 0000  
                 __pdataBANK0 0046                   ?_timer_diff 0070                     ___latbits 0001  
               __pcstackBANK0 003D                _volume_hp_prev 0046              _LM49450_PS2_init 03AF  
              _volume_sp_prev 0048             __size_of_get_time 000A               _vol_minus_state 0038  
            _I2C_Master_Start 04AC                   ??_PIC_SETUP 0070              _I2C_Master_Write 0491  
             ??_LM49450_write 0072                      ?___lldiv 0070              __CFG_PPS1WAY$OFF 0000  
__size_of_LM49450_analog_init 000A          I2C_Master_Write@data 0070              _LM49450_Wii_init 03D6  
         __size_of_timer_diff 0016                     clear_ram0 04A0                      _PIE4bits 071A  
           __CFG_BBSIZE$BB512 0000                      _SSP1CON1 0190                      _SSP1CON2 0191  
                    _SSP1STAT 018F              LM49450_write@reg 0072                      _PPS_lock 0489  
                   _volume_hp 0047                     _volume_sp 0049              __size_of___lldiv 005A  
             _LM49450_DC_init 03FB               _I2C_Master_Init 0381               _I2C_Master_Wait 0469  
             _I2C_Master_Stop 04A6                      __ptext10 0455                      __ptext11 0491  
                    __ptext12 04A6                      __ptext13 04AC                    _T1GCONbits 020F  
                    __ptext14 0469                      __ptext15 0381                      __ptext16 0327  
                _SSP1CON2bits 0191                      _get_time 0475                 __size_of_main 02ED  
        __CFG_WDTCWS$WDTCWS_7 0000                      int$flags 007E      __end_of_LM49450_PS2_init 03D6  
               _timer_counter 0034                  ??_timer_diff 0074            I2C_Master_Init@clk 003D  
    __end_of_I2C_Master_Start 04B2      __end_of_I2C_Master_Write 0499                    _INTCONbits 000B  
                    intlevel1 0000           _LM49450_analog_init 047F              ___lldiv@dividend 0074  
           __CFG_CLKOUTEN$OFF 0000            __end_of_timer_diff 0455       __end_of_LM49450_DC_init 0420  
         _vol_plus_time_start 002C       __end_of_I2C_Master_Init 03AF       __end_of_I2C_Master_Wait 0475  
        ?_LM49450_analog_init 0070       __end_of_I2C_Master_Stop 04AC      __end_of_LM49450_Wii_init 03FB  
                  _SSP1DATPPS 1EC6                    _SSP1CLKPPS 1EC5              ___lldiv@quotient 0079  
          _vol_plus_time_hold 0028                   _mute_config 003C  
