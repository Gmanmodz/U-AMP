

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Nov 10 13:45:51 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15324
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.10
    32                           ; Generated 31/07/2019 GMT
    33                           ; 
    34                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F15324 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000E                     	;# 
    79  0012                     	;# 
    80  0014                     	;# 
    81  0018                     	;# 
    82  001A                     	;# 
    83  009B                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  009F                     	;# 
    89  0119                     	;# 
    90  0119                     	;# 
    91  0119                     	;# 
    92  011A                     	;# 
    93  011A                     	;# 
    94  011A                     	;# 
    95  011B                     	;# 
    96  011B                     	;# 
    97  011B                     	;# 
    98  011B                     	;# 
    99  011B                     	;# 
   100  011C                     	;# 
   101  011C                     	;# 
   102  011C                     	;# 
   103  011D                     	;# 
   104  011D                     	;# 
   105  011D                     	;# 
   106  011E                     	;# 
   107  011E                     	;# 
   108  011E                     	;# 
   109  011F                     	;# 
   110  011F                     	;# 
   111  011F                     	;# 
   112  011F                     	;# 
   113  011F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  018E                     	;# 
   117  018F                     	;# 
   118  0190                     	;# 
   119  0191                     	;# 
   120  0192                     	;# 
   121  020C                     	;# 
   122  020C                     	;# 
   123  020D                     	;# 
   124  020E                     	;# 
   125  020F                     	;# 
   126  020F                     	;# 
   127  0210                     	;# 
   128  0210                     	;# 
   129  0211                     	;# 
   130  0211                     	;# 
   131  028C                     	;# 
   132  028C                     	;# 
   133  028D                     	;# 
   134  028D                     	;# 
   135  028E                     	;# 
   136  028F                     	;# 
   137  0290                     	;# 
   138  0291                     	;# 
   139  030C                     	;# 
   140  030C                     	;# 
   141  030D                     	;# 
   142  030E                     	;# 
   143  030F                     	;# 
   144  0310                     	;# 
   145  0310                     	;# 
   146  0311                     	;# 
   147  0312                     	;# 
   148  0313                     	;# 
   149  0314                     	;# 
   150  0314                     	;# 
   151  0315                     	;# 
   152  0316                     	;# 
   153  0318                     	;# 
   154  0318                     	;# 
   155  0319                     	;# 
   156  031A                     	;# 
   157  031C                     	;# 
   158  031C                     	;# 
   159  031D                     	;# 
   160  031E                     	;# 
   161  038C                     	;# 
   162  038C                     	;# 
   163  038D                     	;# 
   164  038E                     	;# 
   165  058C                     	;# 
   166  058C                     	;# 
   167  058D                     	;# 
   168  058E                     	;# 
   169  058F                     	;# 
   170  058F                     	;# 
   171  0590                     	;# 
   172  0591                     	;# 
   173  0592                     	;# 
   174  0593                     	;# 
   175  059C                     	;# 
   176  059C                     	;# 
   177  059D                     	;# 
   178  059D                     	;# 
   179  059E                     	;# 
   180  059F                     	;# 
   181  060C                     	;# 
   182  060D                     	;# 
   183  060E                     	;# 
   184  060F                     	;# 
   185  0610                     	;# 
   186  0611                     	;# 
   187  0612                     	;# 
   188  0613                     	;# 
   189  0614                     	;# 
   190  070C                     	;# 
   191  070D                     	;# 
   192  070E                     	;# 
   193  070F                     	;# 
   194  0710                     	;# 
   195  0711                     	;# 
   196  0712                     	;# 
   197  0713                     	;# 
   198  0716                     	;# 
   199  0717                     	;# 
   200  0718                     	;# 
   201  0719                     	;# 
   202  071A                     	;# 
   203  071B                     	;# 
   204  071C                     	;# 
   205  071D                     	;# 
   206  0796                     	;# 
   207  0797                     	;# 
   208  0798                     	;# 
   209  0799                     	;# 
   210  079A                     	;# 
   211  079B                     	;# 
   212  080C                     	;# 
   213  080D                     	;# 
   214  080E                     	;# 
   215  080F                     	;# 
   216  0810                     	;# 
   217  0811                     	;# 
   218  0812                     	;# 
   219  0813                     	;# 
   220  0814                     	;# 
   221  081A                     	;# 
   222  081A                     	;# 
   223  081B                     	;# 
   224  081C                     	;# 
   225  081C                     	;# 
   226  081D                     	;# 
   227  081E                     	;# 
   228  081F                     	;# 
   229  088C                     	;# 
   230  088D                     	;# 
   231  088E                     	;# 
   232  088F                     	;# 
   233  0890                     	;# 
   234  0891                     	;# 
   235  0892                     	;# 
   236  0893                     	;# 
   237  0895                     	;# 
   238  0896                     	;# 
   239  090C                     	;# 
   240  090E                     	;# 
   241  090F                     	;# 
   242  091F                     	;# 
   243  098F                     	;# 
   244  098F                     	;# 
   245  0990                     	;# 
   246  0991                     	;# 
   247  0992                     	;# 
   248  0993                     	;# 
   249  0994                     	;# 
   250  0995                     	;# 
   251  0996                     	;# 
   252  0997                     	;# 
   253  0A19                     	;# 
   254  0A19                     	;# 
   255  0A1A                     	;# 
   256  0A1A                     	;# 
   257  0A1B                     	;# 
   258  0A1B                     	;# 
   259  0A1B                     	;# 
   260  0A1C                     	;# 
   261  0A1C                     	;# 
   262  0A1D                     	;# 
   263  0A1D                     	;# 
   264  0A1E                     	;# 
   265  0A1E                     	;# 
   266  0A1F                     	;# 
   267  0A1F                     	;# 
   268  0A1F                     	;# 
   269  1E0F                     	;# 
   270  1E10                     	;# 
   271  1E11                     	;# 
   272  1E12                     	;# 
   273  1E13                     	;# 
   274  1E14                     	;# 
   275  1E15                     	;# 
   276  1E16                     	;# 
   277  1E17                     	;# 
   278  1E18                     	;# 
   279  1E19                     	;# 
   280  1E1A                     	;# 
   281  1E1B                     	;# 
   282  1E1C                     	;# 
   283  1E1D                     	;# 
   284  1E1E                     	;# 
   285  1E1F                     	;# 
   286  1E20                     	;# 
   287  1E21                     	;# 
   288  1E22                     	;# 
   289  1E23                     	;# 
   290  1E24                     	;# 
   291  1E25                     	;# 
   292  1E26                     	;# 
   293  1E27                     	;# 
   294  1E28                     	;# 
   295  1E29                     	;# 
   296  1E2A                     	;# 
   297  1E2B                     	;# 
   298  1E2C                     	;# 
   299  1E2D                     	;# 
   300  1E2E                     	;# 
   301  1E2F                     	;# 
   302  1E30                     	;# 
   303  1E31                     	;# 
   304  1E32                     	;# 
   305  1E33                     	;# 
   306  1E34                     	;# 
   307  1E35                     	;# 
   308  1E36                     	;# 
   309  1E37                     	;# 
   310  1E8F                     	;# 
   311  1E90                     	;# 
   312  1E91                     	;# 
   313  1E92                     	;# 
   314  1E93                     	;# 
   315  1E9C                     	;# 
   316  1EA1                     	;# 
   317  1EA2                     	;# 
   318  1EB1                     	;# 
   319  1EBB                     	;# 
   320  1EBC                     	;# 
   321  1EBD                     	;# 
   322  1EBE                     	;# 
   323  1EC3                     	;# 
   324  1EC5                     	;# 
   325  1EC6                     	;# 
   326  1EC7                     	;# 
   327  1ECB                     	;# 
   328  1ECC                     	;# 
   329  1ECD                     	;# 
   330  1ECE                     	;# 
   331  1F10                     	;# 
   332  1F11                     	;# 
   333  1F12                     	;# 
   334  1F13                     	;# 
   335  1F14                     	;# 
   336  1F15                     	;# 
   337  1F20                     	;# 
   338  1F21                     	;# 
   339  1F22                     	;# 
   340  1F23                     	;# 
   341  1F24                     	;# 
   342  1F25                     	;# 
   343  1F38                     	;# 
   344  1F39                     	;# 
   345  1F3A                     	;# 
   346  1F3B                     	;# 
   347  1F3C                     	;# 
   348  1F3D                     	;# 
   349  1F3E                     	;# 
   350  1F3F                     	;# 
   351  1F4E                     	;# 
   352  1F4F                     	;# 
   353  1F50                     	;# 
   354  1F51                     	;# 
   355  1F52                     	;# 
   356  1F53                     	;# 
   357  1F54                     	;# 
   358  1F55                     	;# 
   359  1FE4                     	;# 
   360  1FE5                     	;# 
   361  1FE6                     	;# 
   362  1FE7                     	;# 
   363  1FE8                     	;# 
   364  1FE8                     	;# 
   365  1FE9                     	;# 
   366  1FEA                     	;# 
   367  1FEA                     	;# 
   368  1FEB                     	;# 
   369  1FED                     	;# 
   370  1FEE                     	;# 
   371  1FEF                     	;# 
   372  0000                     	;# 
   373  0001                     	;# 
   374  0002                     	;# 
   375  0003                     	;# 
   376  0004                     	;# 
   377  0005                     	;# 
   378  0006                     	;# 
   379  0007                     	;# 
   380  0008                     	;# 
   381  0009                     	;# 
   382  000A                     	;# 
   383  000B                     	;# 
   384  000C                     	;# 
   385  000E                     	;# 
   386  0012                     	;# 
   387  0014                     	;# 
   388  0018                     	;# 
   389  001A                     	;# 
   390  009B                     	;# 
   391  009B                     	;# 
   392  009C                     	;# 
   393  009D                     	;# 
   394  009E                     	;# 
   395  009F                     	;# 
   396  0119                     	;# 
   397  0119                     	;# 
   398  0119                     	;# 
   399  011A                     	;# 
   400  011A                     	;# 
   401  011A                     	;# 
   402  011B                     	;# 
   403  011B                     	;# 
   404  011B                     	;# 
   405  011B                     	;# 
   406  011B                     	;# 
   407  011C                     	;# 
   408  011C                     	;# 
   409  011C                     	;# 
   410  011D                     	;# 
   411  011D                     	;# 
   412  011D                     	;# 
   413  011E                     	;# 
   414  011E                     	;# 
   415  011E                     	;# 
   416  011F                     	;# 
   417  011F                     	;# 
   418  011F                     	;# 
   419  011F                     	;# 
   420  011F                     	;# 
   421  018C                     	;# 
   422  018D                     	;# 
   423  018E                     	;# 
   424  018F                     	;# 
   425  0190                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  020C                     	;# 
   429  020C                     	;# 
   430  020D                     	;# 
   431  020E                     	;# 
   432  020F                     	;# 
   433  020F                     	;# 
   434  0210                     	;# 
   435  0210                     	;# 
   436  0211                     	;# 
   437  0211                     	;# 
   438  028C                     	;# 
   439  028C                     	;# 
   440  028D                     	;# 
   441  028D                     	;# 
   442  028E                     	;# 
   443  028F                     	;# 
   444  0290                     	;# 
   445  0291                     	;# 
   446  030C                     	;# 
   447  030C                     	;# 
   448  030D                     	;# 
   449  030E                     	;# 
   450  030F                     	;# 
   451  0310                     	;# 
   452  0310                     	;# 
   453  0311                     	;# 
   454  0312                     	;# 
   455  0313                     	;# 
   456  0314                     	;# 
   457  0314                     	;# 
   458  0315                     	;# 
   459  0316                     	;# 
   460  0318                     	;# 
   461  0318                     	;# 
   462  0319                     	;# 
   463  031A                     	;# 
   464  031C                     	;# 
   465  031C                     	;# 
   466  031D                     	;# 
   467  031E                     	;# 
   468  038C                     	;# 
   469  038C                     	;# 
   470  038D                     	;# 
   471  038E                     	;# 
   472  058C                     	;# 
   473  058C                     	;# 
   474  058D                     	;# 
   475  058E                     	;# 
   476  058F                     	;# 
   477  058F                     	;# 
   478  0590                     	;# 
   479  0591                     	;# 
   480  0592                     	;# 
   481  0593                     	;# 
   482  059C                     	;# 
   483  059C                     	;# 
   484  059D                     	;# 
   485  059D                     	;# 
   486  059E                     	;# 
   487  059F                     	;# 
   488  060C                     	;# 
   489  060D                     	;# 
   490  060E                     	;# 
   491  060F                     	;# 
   492  0610                     	;# 
   493  0611                     	;# 
   494  0612                     	;# 
   495  0613                     	;# 
   496  0614                     	;# 
   497  070C                     	;# 
   498  070D                     	;# 
   499  070E                     	;# 
   500  070F                     	;# 
   501  0710                     	;# 
   502  0711                     	;# 
   503  0712                     	;# 
   504  0713                     	;# 
   505  0716                     	;# 
   506  0717                     	;# 
   507  0718                     	;# 
   508  0719                     	;# 
   509  071A                     	;# 
   510  071B                     	;# 
   511  071C                     	;# 
   512  071D                     	;# 
   513  0796                     	;# 
   514  0797                     	;# 
   515  0798                     	;# 
   516  0799                     	;# 
   517  079A                     	;# 
   518  079B                     	;# 
   519  080C                     	;# 
   520  080D                     	;# 
   521  080E                     	;# 
   522  080F                     	;# 
   523  0810                     	;# 
   524  0811                     	;# 
   525  0812                     	;# 
   526  0813                     	;# 
   527  0814                     	;# 
   528  081A                     	;# 
   529  081A                     	;# 
   530  081B                     	;# 
   531  081C                     	;# 
   532  081C                     	;# 
   533  081D                     	;# 
   534  081E                     	;# 
   535  081F                     	;# 
   536  088C                     	;# 
   537  088D                     	;# 
   538  088E                     	;# 
   539  088F                     	;# 
   540  0890                     	;# 
   541  0891                     	;# 
   542  0892                     	;# 
   543  0893                     	;# 
   544  0895                     	;# 
   545  0896                     	;# 
   546  090C                     	;# 
   547  090E                     	;# 
   548  090F                     	;# 
   549  091F                     	;# 
   550  098F                     	;# 
   551  098F                     	;# 
   552  0990                     	;# 
   553  0991                     	;# 
   554  0992                     	;# 
   555  0993                     	;# 
   556  0994                     	;# 
   557  0995                     	;# 
   558  0996                     	;# 
   559  0997                     	;# 
   560  0A19                     	;# 
   561  0A19                     	;# 
   562  0A1A                     	;# 
   563  0A1A                     	;# 
   564  0A1B                     	;# 
   565  0A1B                     	;# 
   566  0A1B                     	;# 
   567  0A1C                     	;# 
   568  0A1C                     	;# 
   569  0A1D                     	;# 
   570  0A1D                     	;# 
   571  0A1E                     	;# 
   572  0A1E                     	;# 
   573  0A1F                     	;# 
   574  0A1F                     	;# 
   575  0A1F                     	;# 
   576  1E0F                     	;# 
   577  1E10                     	;# 
   578  1E11                     	;# 
   579  1E12                     	;# 
   580  1E13                     	;# 
   581  1E14                     	;# 
   582  1E15                     	;# 
   583  1E16                     	;# 
   584  1E17                     	;# 
   585  1E18                     	;# 
   586  1E19                     	;# 
   587  1E1A                     	;# 
   588  1E1B                     	;# 
   589  1E1C                     	;# 
   590  1E1D                     	;# 
   591  1E1E                     	;# 
   592  1E1F                     	;# 
   593  1E20                     	;# 
   594  1E21                     	;# 
   595  1E22                     	;# 
   596  1E23                     	;# 
   597  1E24                     	;# 
   598  1E25                     	;# 
   599  1E26                     	;# 
   600  1E27                     	;# 
   601  1E28                     	;# 
   602  1E29                     	;# 
   603  1E2A                     	;# 
   604  1E2B                     	;# 
   605  1E2C                     	;# 
   606  1E2D                     	;# 
   607  1E2E                     	;# 
   608  1E2F                     	;# 
   609  1E30                     	;# 
   610  1E31                     	;# 
   611  1E32                     	;# 
   612  1E33                     	;# 
   613  1E34                     	;# 
   614  1E35                     	;# 
   615  1E36                     	;# 
   616  1E37                     	;# 
   617  1E8F                     	;# 
   618  1E90                     	;# 
   619  1E91                     	;# 
   620  1E92                     	;# 
   621  1E93                     	;# 
   622  1E9C                     	;# 
   623  1EA1                     	;# 
   624  1EA2                     	;# 
   625  1EB1                     	;# 
   626  1EBB                     	;# 
   627  1EBC                     	;# 
   628  1EBD                     	;# 
   629  1EBE                     	;# 
   630  1EC3                     	;# 
   631  1EC5                     	;# 
   632  1EC6                     	;# 
   633  1EC7                     	;# 
   634  1ECB                     	;# 
   635  1ECC                     	;# 
   636  1ECD                     	;# 
   637  1ECE                     	;# 
   638  1F10                     	;# 
   639  1F11                     	;# 
   640  1F12                     	;# 
   641  1F13                     	;# 
   642  1F14                     	;# 
   643  1F15                     	;# 
   644  1F20                     	;# 
   645  1F21                     	;# 
   646  1F22                     	;# 
   647  1F23                     	;# 
   648  1F24                     	;# 
   649  1F25                     	;# 
   650  1F38                     	;# 
   651  1F39                     	;# 
   652  1F3A                     	;# 
   653  1F3B                     	;# 
   654  1F3C                     	;# 
   655  1F3D                     	;# 
   656  1F3E                     	;# 
   657  1F3F                     	;# 
   658  1F4E                     	;# 
   659  1F4F                     	;# 
   660  1F50                     	;# 
   661  1F51                     	;# 
   662  1F52                     	;# 
   663  1F53                     	;# 
   664  1F54                     	;# 
   665  1F55                     	;# 
   666  1FE4                     	;# 
   667  1FE5                     	;# 
   668  1FE6                     	;# 
   669  1FE7                     	;# 
   670  1FE8                     	;# 
   671  1FE8                     	;# 
   672  1FE9                     	;# 
   673  1FEA                     	;# 
   674  1FEA                     	;# 
   675  1FEB                     	;# 
   676  1FED                     	;# 
   677  1FEE                     	;# 
   678  1FEF                     	;# 
   679  0000                     	;# 
   680  0001                     	;# 
   681  0002                     	;# 
   682  0003                     	;# 
   683  0004                     	;# 
   684  0005                     	;# 
   685  0006                     	;# 
   686  0007                     	;# 
   687  0008                     	;# 
   688  0009                     	;# 
   689  000A                     	;# 
   690  000B                     	;# 
   691  000C                     	;# 
   692  000E                     	;# 
   693  0012                     	;# 
   694  0014                     	;# 
   695  0018                     	;# 
   696  001A                     	;# 
   697  009B                     	;# 
   698  009B                     	;# 
   699  009C                     	;# 
   700  009D                     	;# 
   701  009E                     	;# 
   702  009F                     	;# 
   703  0119                     	;# 
   704  0119                     	;# 
   705  0119                     	;# 
   706  011A                     	;# 
   707  011A                     	;# 
   708  011A                     	;# 
   709  011B                     	;# 
   710  011B                     	;# 
   711  011B                     	;# 
   712  011B                     	;# 
   713  011B                     	;# 
   714  011C                     	;# 
   715  011C                     	;# 
   716  011C                     	;# 
   717  011D                     	;# 
   718  011D                     	;# 
   719  011D                     	;# 
   720  011E                     	;# 
   721  011E                     	;# 
   722  011E                     	;# 
   723  011F                     	;# 
   724  011F                     	;# 
   725  011F                     	;# 
   726  011F                     	;# 
   727  011F                     	;# 
   728  018C                     	;# 
   729  018D                     	;# 
   730  018E                     	;# 
   731  018F                     	;# 
   732  0190                     	;# 
   733  0191                     	;# 
   734  0192                     	;# 
   735  020C                     	;# 
   736  020C                     	;# 
   737  020D                     	;# 
   738  020E                     	;# 
   739  020F                     	;# 
   740  020F                     	;# 
   741  0210                     	;# 
   742  0210                     	;# 
   743  0211                     	;# 
   744  0211                     	;# 
   745  028C                     	;# 
   746  028C                     	;# 
   747  028D                     	;# 
   748  028D                     	;# 
   749  028E                     	;# 
   750  028F                     	;# 
   751  0290                     	;# 
   752  0291                     	;# 
   753  030C                     	;# 
   754  030C                     	;# 
   755  030D                     	;# 
   756  030E                     	;# 
   757  030F                     	;# 
   758  0310                     	;# 
   759  0310                     	;# 
   760  0311                     	;# 
   761  0312                     	;# 
   762  0313                     	;# 
   763  0314                     	;# 
   764  0314                     	;# 
   765  0315                     	;# 
   766  0316                     	;# 
   767  0318                     	;# 
   768  0318                     	;# 
   769  0319                     	;# 
   770  031A                     	;# 
   771  031C                     	;# 
   772  031C                     	;# 
   773  031D                     	;# 
   774  031E                     	;# 
   775  038C                     	;# 
   776  038C                     	;# 
   777  038D                     	;# 
   778  038E                     	;# 
   779  058C                     	;# 
   780  058C                     	;# 
   781  058D                     	;# 
   782  058E                     	;# 
   783  058F                     	;# 
   784  058F                     	;# 
   785  0590                     	;# 
   786  0591                     	;# 
   787  0592                     	;# 
   788  0593                     	;# 
   789  059C                     	;# 
   790  059C                     	;# 
   791  059D                     	;# 
   792  059D                     	;# 
   793  059E                     	;# 
   794  059F                     	;# 
   795  060C                     	;# 
   796  060D                     	;# 
   797  060E                     	;# 
   798  060F                     	;# 
   799  0610                     	;# 
   800  0611                     	;# 
   801  0612                     	;# 
   802  0613                     	;# 
   803  0614                     	;# 
   804  070C                     	;# 
   805  070D                     	;# 
   806  070E                     	;# 
   807  070F                     	;# 
   808  0710                     	;# 
   809  0711                     	;# 
   810  0712                     	;# 
   811  0713                     	;# 
   812  0716                     	;# 
   813  0717                     	;# 
   814  0718                     	;# 
   815  0719                     	;# 
   816  071A                     	;# 
   817  071B                     	;# 
   818  071C                     	;# 
   819  071D                     	;# 
   820  0796                     	;# 
   821  0797                     	;# 
   822  0798                     	;# 
   823  0799                     	;# 
   824  079A                     	;# 
   825  079B                     	;# 
   826  080C                     	;# 
   827  080D                     	;# 
   828  080E                     	;# 
   829  080F                     	;# 
   830  0810                     	;# 
   831  0811                     	;# 
   832  0812                     	;# 
   833  0813                     	;# 
   834  0814                     	;# 
   835  081A                     	;# 
   836  081A                     	;# 
   837  081B                     	;# 
   838  081C                     	;# 
   839  081C                     	;# 
   840  081D                     	;# 
   841  081E                     	;# 
   842  081F                     	;# 
   843  088C                     	;# 
   844  088D                     	;# 
   845  088E                     	;# 
   846  088F                     	;# 
   847  0890                     	;# 
   848  0891                     	;# 
   849  0892                     	;# 
   850  0893                     	;# 
   851  0895                     	;# 
   852  0896                     	;# 
   853  090C                     	;# 
   854  090E                     	;# 
   855  090F                     	;# 
   856  091F                     	;# 
   857  098F                     	;# 
   858  098F                     	;# 
   859  0990                     	;# 
   860  0991                     	;# 
   861  0992                     	;# 
   862  0993                     	;# 
   863  0994                     	;# 
   864  0995                     	;# 
   865  0996                     	;# 
   866  0997                     	;# 
   867  0A19                     	;# 
   868  0A19                     	;# 
   869  0A1A                     	;# 
   870  0A1A                     	;# 
   871  0A1B                     	;# 
   872  0A1B                     	;# 
   873  0A1B                     	;# 
   874  0A1C                     	;# 
   875  0A1C                     	;# 
   876  0A1D                     	;# 
   877  0A1D                     	;# 
   878  0A1E                     	;# 
   879  0A1E                     	;# 
   880  0A1F                     	;# 
   881  0A1F                     	;# 
   882  0A1F                     	;# 
   883  1E0F                     	;# 
   884  1E10                     	;# 
   885  1E11                     	;# 
   886  1E12                     	;# 
   887  1E13                     	;# 
   888  1E14                     	;# 
   889  1E15                     	;# 
   890  1E16                     	;# 
   891  1E17                     	;# 
   892  1E18                     	;# 
   893  1E19                     	;# 
   894  1E1A                     	;# 
   895  1E1B                     	;# 
   896  1E1C                     	;# 
   897  1E1D                     	;# 
   898  1E1E                     	;# 
   899  1E1F                     	;# 
   900  1E20                     	;# 
   901  1E21                     	;# 
   902  1E22                     	;# 
   903  1E23                     	;# 
   904  1E24                     	;# 
   905  1E25                     	;# 
   906  1E26                     	;# 
   907  1E27                     	;# 
   908  1E28                     	;# 
   909  1E29                     	;# 
   910  1E2A                     	;# 
   911  1E2B                     	;# 
   912  1E2C                     	;# 
   913  1E2D                     	;# 
   914  1E2E                     	;# 
   915  1E2F                     	;# 
   916  1E30                     	;# 
   917  1E31                     	;# 
   918  1E32                     	;# 
   919  1E33                     	;# 
   920  1E34                     	;# 
   921  1E35                     	;# 
   922  1E36                     	;# 
   923  1E37                     	;# 
   924  1E8F                     	;# 
   925  1E90                     	;# 
   926  1E91                     	;# 
   927  1E92                     	;# 
   928  1E93                     	;# 
   929  1E9C                     	;# 
   930  1EA1                     	;# 
   931  1EA2                     	;# 
   932  1EB1                     	;# 
   933  1EBB                     	;# 
   934  1EBC                     	;# 
   935  1EBD                     	;# 
   936  1EBE                     	;# 
   937  1EC3                     	;# 
   938  1EC5                     	;# 
   939  1EC6                     	;# 
   940  1EC7                     	;# 
   941  1ECB                     	;# 
   942  1ECC                     	;# 
   943  1ECD                     	;# 
   944  1ECE                     	;# 
   945  1F10                     	;# 
   946  1F11                     	;# 
   947  1F12                     	;# 
   948  1F13                     	;# 
   949  1F14                     	;# 
   950  1F15                     	;# 
   951  1F20                     	;# 
   952  1F21                     	;# 
   953  1F22                     	;# 
   954  1F23                     	;# 
   955  1F24                     	;# 
   956  1F25                     	;# 
   957  1F38                     	;# 
   958  1F39                     	;# 
   959  1F3A                     	;# 
   960  1F3B                     	;# 
   961  1F3C                     	;# 
   962  1F3D                     	;# 
   963  1F3E                     	;# 
   964  1F3F                     	;# 
   965  1F4E                     	;# 
   966  1F4F                     	;# 
   967  1F50                     	;# 
   968  1F51                     	;# 
   969  1F52                     	;# 
   970  1F53                     	;# 
   971  1F54                     	;# 
   972  1F55                     	;# 
   973  1FE4                     	;# 
   974  1FE5                     	;# 
   975  1FE6                     	;# 
   976  1FE7                     	;# 
   977  1FE8                     	;# 
   978  1FE8                     	;# 
   979  1FE9                     	;# 
   980  1FEA                     	;# 
   981  1FEA                     	;# 
   982  1FEB                     	;# 
   983  1FED                     	;# 
   984  1FEE                     	;# 
   985  1FEF                     	;# 
   986  0000                     	;# 
   987  0001                     	;# 
   988  0002                     	;# 
   989  0003                     	;# 
   990  0004                     	;# 
   991  0005                     	;# 
   992  0006                     	;# 
   993  0007                     	;# 
   994  0008                     	;# 
   995  0009                     	;# 
   996  000A                     	;# 
   997  000B                     	;# 
   998  000C                     	;# 
   999  000E                     	;# 
  1000  0012                     	;# 
  1001  0014                     	;# 
  1002  0018                     	;# 
  1003  001A                     	;# 
  1004  009B                     	;# 
  1005  009B                     	;# 
  1006  009C                     	;# 
  1007  009D                     	;# 
  1008  009E                     	;# 
  1009  009F                     	;# 
  1010  0119                     	;# 
  1011  0119                     	;# 
  1012  0119                     	;# 
  1013  011A                     	;# 
  1014  011A                     	;# 
  1015  011A                     	;# 
  1016  011B                     	;# 
  1017  011B                     	;# 
  1018  011B                     	;# 
  1019  011B                     	;# 
  1020  011B                     	;# 
  1021  011C                     	;# 
  1022  011C                     	;# 
  1023  011C                     	;# 
  1024  011D                     	;# 
  1025  011D                     	;# 
  1026  011D                     	;# 
  1027  011E                     	;# 
  1028  011E                     	;# 
  1029  011E                     	;# 
  1030  011F                     	;# 
  1031  011F                     	;# 
  1032  011F                     	;# 
  1033  011F                     	;# 
  1034  011F                     	;# 
  1035  018C                     	;# 
  1036  018D                     	;# 
  1037  018E                     	;# 
  1038  018F                     	;# 
  1039  0190                     	;# 
  1040  0191                     	;# 
  1041  0192                     	;# 
  1042  020C                     	;# 
  1043  020C                     	;# 
  1044  020D                     	;# 
  1045  020E                     	;# 
  1046  020F                     	;# 
  1047  020F                     	;# 
  1048  0210                     	;# 
  1049  0210                     	;# 
  1050  0211                     	;# 
  1051  0211                     	;# 
  1052  028C                     	;# 
  1053  028C                     	;# 
  1054  028D                     	;# 
  1055  028D                     	;# 
  1056  028E                     	;# 
  1057  028F                     	;# 
  1058  0290                     	;# 
  1059  0291                     	;# 
  1060  030C                     	;# 
  1061  030C                     	;# 
  1062  030D                     	;# 
  1063  030E                     	;# 
  1064  030F                     	;# 
  1065  0310                     	;# 
  1066  0310                     	;# 
  1067  0311                     	;# 
  1068  0312                     	;# 
  1069  0313                     	;# 
  1070  0314                     	;# 
  1071  0314                     	;# 
  1072  0315                     	;# 
  1073  0316                     	;# 
  1074  0318                     	;# 
  1075  0318                     	;# 
  1076  0319                     	;# 
  1077  031A                     	;# 
  1078  031C                     	;# 
  1079  031C                     	;# 
  1080  031D                     	;# 
  1081  031E                     	;# 
  1082  038C                     	;# 
  1083  038C                     	;# 
  1084  038D                     	;# 
  1085  038E                     	;# 
  1086  058C                     	;# 
  1087  058C                     	;# 
  1088  058D                     	;# 
  1089  058E                     	;# 
  1090  058F                     	;# 
  1091  058F                     	;# 
  1092  0590                     	;# 
  1093  0591                     	;# 
  1094  0592                     	;# 
  1095  0593                     	;# 
  1096  059C                     	;# 
  1097  059C                     	;# 
  1098  059D                     	;# 
  1099  059D                     	;# 
  1100  059E                     	;# 
  1101  059F                     	;# 
  1102  060C                     	;# 
  1103  060D                     	;# 
  1104  060E                     	;# 
  1105  060F                     	;# 
  1106  0610                     	;# 
  1107  0611                     	;# 
  1108  0612                     	;# 
  1109  0613                     	;# 
  1110  0614                     	;# 
  1111  070C                     	;# 
  1112  070D                     	;# 
  1113  070E                     	;# 
  1114  070F                     	;# 
  1115  0710                     	;# 
  1116  0711                     	;# 
  1117  0712                     	;# 
  1118  0713                     	;# 
  1119  0716                     	;# 
  1120  0717                     	;# 
  1121  0718                     	;# 
  1122  0719                     	;# 
  1123  071A                     	;# 
  1124  071B                     	;# 
  1125  071C                     	;# 
  1126  071D                     	;# 
  1127  0796                     	;# 
  1128  0797                     	;# 
  1129  0798                     	;# 
  1130  0799                     	;# 
  1131  079A                     	;# 
  1132  079B                     	;# 
  1133  080C                     	;# 
  1134  080D                     	;# 
  1135  080E                     	;# 
  1136  080F                     	;# 
  1137  0810                     	;# 
  1138  0811                     	;# 
  1139  0812                     	;# 
  1140  0813                     	;# 
  1141  0814                     	;# 
  1142  081A                     	;# 
  1143  081A                     	;# 
  1144  081B                     	;# 
  1145  081C                     	;# 
  1146  081C                     	;# 
  1147  081D                     	;# 
  1148  081E                     	;# 
  1149  081F                     	;# 
  1150  088C                     	;# 
  1151  088D                     	;# 
  1152  088E                     	;# 
  1153  088F                     	;# 
  1154  0890                     	;# 
  1155  0891                     	;# 
  1156  0892                     	;# 
  1157  0893                     	;# 
  1158  0895                     	;# 
  1159  0896                     	;# 
  1160  090C                     	;# 
  1161  090E                     	;# 
  1162  090F                     	;# 
  1163  091F                     	;# 
  1164  098F                     	;# 
  1165  098F                     	;# 
  1166  0990                     	;# 
  1167  0991                     	;# 
  1168  0992                     	;# 
  1169  0993                     	;# 
  1170  0994                     	;# 
  1171  0995                     	;# 
  1172  0996                     	;# 
  1173  0997                     	;# 
  1174  0A19                     	;# 
  1175  0A19                     	;# 
  1176  0A1A                     	;# 
  1177  0A1A                     	;# 
  1178  0A1B                     	;# 
  1179  0A1B                     	;# 
  1180  0A1B                     	;# 
  1181  0A1C                     	;# 
  1182  0A1C                     	;# 
  1183  0A1D                     	;# 
  1184  0A1D                     	;# 
  1185  0A1E                     	;# 
  1186  0A1E                     	;# 
  1187  0A1F                     	;# 
  1188  0A1F                     	;# 
  1189  0A1F                     	;# 
  1190  1E0F                     	;# 
  1191  1E10                     	;# 
  1192  1E11                     	;# 
  1193  1E12                     	;# 
  1194  1E13                     	;# 
  1195  1E14                     	;# 
  1196  1E15                     	;# 
  1197  1E16                     	;# 
  1198  1E17                     	;# 
  1199  1E18                     	;# 
  1200  1E19                     	;# 
  1201  1E1A                     	;# 
  1202  1E1B                     	;# 
  1203  1E1C                     	;# 
  1204  1E1D                     	;# 
  1205  1E1E                     	;# 
  1206  1E1F                     	;# 
  1207  1E20                     	;# 
  1208  1E21                     	;# 
  1209  1E22                     	;# 
  1210  1E23                     	;# 
  1211  1E24                     	;# 
  1212  1E25                     	;# 
  1213  1E26                     	;# 
  1214  1E27                     	;# 
  1215  1E28                     	;# 
  1216  1E29                     	;# 
  1217  1E2A                     	;# 
  1218  1E2B                     	;# 
  1219  1E2C                     	;# 
  1220  1E2D                     	;# 
  1221  1E2E                     	;# 
  1222  1E2F                     	;# 
  1223  1E30                     	;# 
  1224  1E31                     	;# 
  1225  1E32                     	;# 
  1226  1E33                     	;# 
  1227  1E34                     	;# 
  1228  1E35                     	;# 
  1229  1E36                     	;# 
  1230  1E37                     	;# 
  1231  1E8F                     	;# 
  1232  1E90                     	;# 
  1233  1E91                     	;# 
  1234  1E92                     	;# 
  1235  1E93                     	;# 
  1236  1E9C                     	;# 
  1237  1EA1                     	;# 
  1238  1EA2                     	;# 
  1239  1EB1                     	;# 
  1240  1EBB                     	;# 
  1241  1EBC                     	;# 
  1242  1EBD                     	;# 
  1243  1EBE                     	;# 
  1244  1EC3                     	;# 
  1245  1EC5                     	;# 
  1246  1EC6                     	;# 
  1247  1EC7                     	;# 
  1248  1ECB                     	;# 
  1249  1ECC                     	;# 
  1250  1ECD                     	;# 
  1251  1ECE                     	;# 
  1252  1F10                     	;# 
  1253  1F11                     	;# 
  1254  1F12                     	;# 
  1255  1F13                     	;# 
  1256  1F14                     	;# 
  1257  1F15                     	;# 
  1258  1F20                     	;# 
  1259  1F21                     	;# 
  1260  1F22                     	;# 
  1261  1F23                     	;# 
  1262  1F24                     	;# 
  1263  1F25                     	;# 
  1264  1F38                     	;# 
  1265  1F39                     	;# 
  1266  1F3A                     	;# 
  1267  1F3B                     	;# 
  1268  1F3C                     	;# 
  1269  1F3D                     	;# 
  1270  1F3E                     	;# 
  1271  1F3F                     	;# 
  1272  1F4E                     	;# 
  1273  1F4F                     	;# 
  1274  1F50                     	;# 
  1275  1F51                     	;# 
  1276  1F52                     	;# 
  1277  1F53                     	;# 
  1278  1F54                     	;# 
  1279  1F55                     	;# 
  1280  1FE4                     	;# 
  1281  1FE5                     	;# 
  1282  1FE6                     	;# 
  1283  1FE7                     	;# 
  1284  1FE8                     	;# 
  1285  1FE8                     	;# 
  1286  1FE9                     	;# 
  1287  1FEA                     	;# 
  1288  1FEA                     	;# 
  1289  1FEB                     	;# 
  1290  1FED                     	;# 
  1291  1FEE                     	;# 
  1292  1FEF                     	;# 
  1293  0000                     	;# 
  1294  0001                     	;# 
  1295  0002                     	;# 
  1296  0003                     	;# 
  1297  0004                     	;# 
  1298  0005                     	;# 
  1299  0006                     	;# 
  1300  0007                     	;# 
  1301  0008                     	;# 
  1302  0009                     	;# 
  1303  000A                     	;# 
  1304  000B                     	;# 
  1305  000C                     	;# 
  1306  000E                     	;# 
  1307  0012                     	;# 
  1308  0014                     	;# 
  1309  0018                     	;# 
  1310  001A                     	;# 
  1311  009B                     	;# 
  1312  009B                     	;# 
  1313  009C                     	;# 
  1314  009D                     	;# 
  1315  009E                     	;# 
  1316  009F                     	;# 
  1317  0119                     	;# 
  1318  0119                     	;# 
  1319  0119                     	;# 
  1320  011A                     	;# 
  1321  011A                     	;# 
  1322  011A                     	;# 
  1323  011B                     	;# 
  1324  011B                     	;# 
  1325  011B                     	;# 
  1326  011B                     	;# 
  1327  011B                     	;# 
  1328  011C                     	;# 
  1329  011C                     	;# 
  1330  011C                     	;# 
  1331  011D                     	;# 
  1332  011D                     	;# 
  1333  011D                     	;# 
  1334  011E                     	;# 
  1335  011E                     	;# 
  1336  011E                     	;# 
  1337  011F                     	;# 
  1338  011F                     	;# 
  1339  011F                     	;# 
  1340  011F                     	;# 
  1341  011F                     	;# 
  1342  018C                     	;# 
  1343  018D                     	;# 
  1344  018E                     	;# 
  1345  018F                     	;# 
  1346  0190                     	;# 
  1347  0191                     	;# 
  1348  0192                     	;# 
  1349  020C                     	;# 
  1350  020C                     	;# 
  1351  020D                     	;# 
  1352  020E                     	;# 
  1353  020F                     	;# 
  1354  020F                     	;# 
  1355  0210                     	;# 
  1356  0210                     	;# 
  1357  0211                     	;# 
  1358  0211                     	;# 
  1359  028C                     	;# 
  1360  028C                     	;# 
  1361  028D                     	;# 
  1362  028D                     	;# 
  1363  028E                     	;# 
  1364  028F                     	;# 
  1365  0290                     	;# 
  1366  0291                     	;# 
  1367  030C                     	;# 
  1368  030C                     	;# 
  1369  030D                     	;# 
  1370  030E                     	;# 
  1371  030F                     	;# 
  1372  0310                     	;# 
  1373  0310                     	;# 
  1374  0311                     	;# 
  1375  0312                     	;# 
  1376  0313                     	;# 
  1377  0314                     	;# 
  1378  0314                     	;# 
  1379  0315                     	;# 
  1380  0316                     	;# 
  1381  0318                     	;# 
  1382  0318                     	;# 
  1383  0319                     	;# 
  1384  031A                     	;# 
  1385  031C                     	;# 
  1386  031C                     	;# 
  1387  031D                     	;# 
  1388  031E                     	;# 
  1389  038C                     	;# 
  1390  038C                     	;# 
  1391  038D                     	;# 
  1392  038E                     	;# 
  1393  058C                     	;# 
  1394  058C                     	;# 
  1395  058D                     	;# 
  1396  058E                     	;# 
  1397  058F                     	;# 
  1398  058F                     	;# 
  1399  0590                     	;# 
  1400  0591                     	;# 
  1401  0592                     	;# 
  1402  0593                     	;# 
  1403  059C                     	;# 
  1404  059C                     	;# 
  1405  059D                     	;# 
  1406  059D                     	;# 
  1407  059E                     	;# 
  1408  059F                     	;# 
  1409  060C                     	;# 
  1410  060D                     	;# 
  1411  060E                     	;# 
  1412  060F                     	;# 
  1413  0610                     	;# 
  1414  0611                     	;# 
  1415  0612                     	;# 
  1416  0613                     	;# 
  1417  0614                     	;# 
  1418  070C                     	;# 
  1419  070D                     	;# 
  1420  070E                     	;# 
  1421  070F                     	;# 
  1422  0710                     	;# 
  1423  0711                     	;# 
  1424  0712                     	;# 
  1425  0713                     	;# 
  1426  0716                     	;# 
  1427  0717                     	;# 
  1428  0718                     	;# 
  1429  0719                     	;# 
  1430  071A                     	;# 
  1431  071B                     	;# 
  1432  071C                     	;# 
  1433  071D                     	;# 
  1434  0796                     	;# 
  1435  0797                     	;# 
  1436  0798                     	;# 
  1437  0799                     	;# 
  1438  079A                     	;# 
  1439  079B                     	;# 
  1440  080C                     	;# 
  1441  080D                     	;# 
  1442  080E                     	;# 
  1443  080F                     	;# 
  1444  0810                     	;# 
  1445  0811                     	;# 
  1446  0812                     	;# 
  1447  0813                     	;# 
  1448  0814                     	;# 
  1449  081A                     	;# 
  1450  081A                     	;# 
  1451  081B                     	;# 
  1452  081C                     	;# 
  1453  081C                     	;# 
  1454  081D                     	;# 
  1455  081E                     	;# 
  1456  081F                     	;# 
  1457  088C                     	;# 
  1458  088D                     	;# 
  1459  088E                     	;# 
  1460  088F                     	;# 
  1461  0890                     	;# 
  1462  0891                     	;# 
  1463  0892                     	;# 
  1464  0893                     	;# 
  1465  0895                     	;# 
  1466  0896                     	;# 
  1467  090C                     	;# 
  1468  090E                     	;# 
  1469  090F                     	;# 
  1470  091F                     	;# 
  1471  098F                     	;# 
  1472  098F                     	;# 
  1473  0990                     	;# 
  1474  0991                     	;# 
  1475  0992                     	;# 
  1476  0993                     	;# 
  1477  0994                     	;# 
  1478  0995                     	;# 
  1479  0996                     	;# 
  1480  0997                     	;# 
  1481  0A19                     	;# 
  1482  0A19                     	;# 
  1483  0A1A                     	;# 
  1484  0A1A                     	;# 
  1485  0A1B                     	;# 
  1486  0A1B                     	;# 
  1487  0A1B                     	;# 
  1488  0A1C                     	;# 
  1489  0A1C                     	;# 
  1490  0A1D                     	;# 
  1491  0A1D                     	;# 
  1492  0A1E                     	;# 
  1493  0A1E                     	;# 
  1494  0A1F                     	;# 
  1495  0A1F                     	;# 
  1496  0A1F                     	;# 
  1497  1E0F                     	;# 
  1498  1E10                     	;# 
  1499  1E11                     	;# 
  1500  1E12                     	;# 
  1501  1E13                     	;# 
  1502  1E14                     	;# 
  1503  1E15                     	;# 
  1504  1E16                     	;# 
  1505  1E17                     	;# 
  1506  1E18                     	;# 
  1507  1E19                     	;# 
  1508  1E1A                     	;# 
  1509  1E1B                     	;# 
  1510  1E1C                     	;# 
  1511  1E1D                     	;# 
  1512  1E1E                     	;# 
  1513  1E1F                     	;# 
  1514  1E20                     	;# 
  1515  1E21                     	;# 
  1516  1E22                     	;# 
  1517  1E23                     	;# 
  1518  1E24                     	;# 
  1519  1E25                     	;# 
  1520  1E26                     	;# 
  1521  1E27                     	;# 
  1522  1E28                     	;# 
  1523  1E29                     	;# 
  1524  1E2A                     	;# 
  1525  1E2B                     	;# 
  1526  1E2C                     	;# 
  1527  1E2D                     	;# 
  1528  1E2E                     	;# 
  1529  1E2F                     	;# 
  1530  1E30                     	;# 
  1531  1E31                     	;# 
  1532  1E32                     	;# 
  1533  1E33                     	;# 
  1534  1E34                     	;# 
  1535  1E35                     	;# 
  1536  1E36                     	;# 
  1537  1E37                     	;# 
  1538  1E8F                     	;# 
  1539  1E90                     	;# 
  1540  1E91                     	;# 
  1541  1E92                     	;# 
  1542  1E93                     	;# 
  1543  1E9C                     	;# 
  1544  1EA1                     	;# 
  1545  1EA2                     	;# 
  1546  1EB1                     	;# 
  1547  1EBB                     	;# 
  1548  1EBC                     	;# 
  1549  1EBD                     	;# 
  1550  1EBE                     	;# 
  1551  1EC3                     	;# 
  1552  1EC5                     	;# 
  1553  1EC6                     	;# 
  1554  1EC7                     	;# 
  1555  1ECB                     	;# 
  1556  1ECC                     	;# 
  1557  1ECD                     	;# 
  1558  1ECE                     	;# 
  1559  1F10                     	;# 
  1560  1F11                     	;# 
  1561  1F12                     	;# 
  1562  1F13                     	;# 
  1563  1F14                     	;# 
  1564  1F15                     	;# 
  1565  1F20                     	;# 
  1566  1F21                     	;# 
  1567  1F22                     	;# 
  1568  1F23                     	;# 
  1569  1F24                     	;# 
  1570  1F25                     	;# 
  1571  1F38                     	;# 
  1572  1F39                     	;# 
  1573  1F3A                     	;# 
  1574  1F3B                     	;# 
  1575  1F3C                     	;# 
  1576  1F3D                     	;# 
  1577  1F3E                     	;# 
  1578  1F3F                     	;# 
  1579  1F4E                     	;# 
  1580  1F4F                     	;# 
  1581  1F50                     	;# 
  1582  1F51                     	;# 
  1583  1F52                     	;# 
  1584  1F53                     	;# 
  1585  1F54                     	;# 
  1586  1F55                     	;# 
  1587  1FE4                     	;# 
  1588  1FE5                     	;# 
  1589  1FE6                     	;# 
  1590  1FE7                     	;# 
  1591  1FE8                     	;# 
  1592  1FE8                     	;# 
  1593  1FE9                     	;# 
  1594  1FEA                     	;# 
  1595  1FEA                     	;# 
  1596  1FEB                     	;# 
  1597  1FED                     	;# 
  1598  1FEE                     	;# 
  1599  1FEF                     	;# 
  1600                           
  1601                           	psect	idataBANK0
  1602  04B2                     __pidataBANK0:	
  1603                           
  1604                           ;initializer for _volume_hp_prev
  1605  04B2  340A               	retlw	10
  1606                           
  1607                           ;initializer for _volume_hp
  1608  04B3  340A               	retlw	10
  1609                           
  1610                           ;initializer for _volume_sp_prev
  1611  04B4  340A               	retlw	10
  1612                           
  1613                           ;initializer for _volume_sp
  1614  04B5  340A               	retlw	10
  1615  0014                     _TRISCbits	set	20
  1616  000B                     _INTCONbits	set	11
  1617  0014                     _TRISC	set	20
  1618  0012                     _TRISA	set	18
  1619  0070                     _RC0	set	112
  1620  0071                     _RC1	set	113
  1621  0064                     _RA4	set	100
  1622  0065                     _RA5	set	101
  1623  0072                     _RC2	set	114
  1624  0073                     _RC3	set	115
  1625  0074                     _RC4	set	116
  1626  018C                     _SSP1BUF	set	396
  1627  0191                     _SSP1CON2bits	set	401
  1628  018F                     _SSP1STAT	set	399
  1629  018D                     _SSP1ADD	set	397
  1630  0191                     _SSP1CON2	set	401
  1631  0190                     _SSP1CON1	set	400
  1632  020C                     _TMR1	set	524
  1633  0211                     _T1CLK	set	529
  1634  020F                     _T1GCONbits	set	527
  1635  020E                     _T1CONbits	set	526
  1636  071A                     _PIE4bits	set	1818
  1637  3880                     _TMR1IF	set	14464
  1638  1E8F                     _PPSLOCK	set	7823
  1639  1EC5                     _SSP1CLKPPS	set	7877
  1640  1EC6                     _SSP1DATPPS	set	7878
  1641  1F20                     _RC0PPS	set	7968
  1642  1F21                     _RC1PPS	set	7969
  1643  1F4F                     _WPUC	set	8015
  1644  1F39                     _WPUA	set	7993
  1645  1F4E                     _ANSELC	set	8014
  1646  1F38                     _ANSELA	set	7992
  1647                           
  1648                           ; #config settings
  1649  0000                     
  1650                           	psect	cinit
  1651  001E                     start_initialization:	
  1652  001E                     __initialization:	
  1653                           
  1654                           ; Initialize objects allocated to BANK0
  1655  001E  3184  24B2  3180   	fcall	__pidataBANK0	;fetch initializer
  1656  0021  00C6               	movwf	__pdataBANK0& (0+127)
  1657  0022  3184  24B3  3180   	fcall	__pidataBANK0+1	;fetch initializer
  1658  0025  00C7               	movwf	(__pdataBANK0+1)& (0+127)
  1659  0026  3184  24B4  3180   	fcall	__pidataBANK0+2	;fetch initializer
  1660  0029  00C8               	movwf	(__pdataBANK0+2)& (0+127)
  1661  002A  3184  24B5  3180   	fcall	__pidataBANK0+3	;fetch initializer
  1662  002D  00C9               	movwf	(__pdataBANK0+3)& (0+127)
  1663                           
  1664                           ; Clear objects allocated to BANK0
  1665  002E  3020               	movlw	low __pbssBANK0
  1666  002F  0084               	movwf	4
  1667  0030  3000               	movlw	high __pbssBANK0
  1668  0031  0085               	movwf	5
  1669  0032  301D               	movlw	29
  1670  0033  3184  24A0  3180   	fcall	clear_ram0
  1671  0036                     end_of_initialization:	
  1672                           ;End of C runtime variable initialization code
  1673                           
  1674  0036                     __end_of__initialization:	
  1675  0036  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1676  0037  0140               	movlb	0
  1677  0038  3180  283A         	ljmp	_main	;jump to C main() function
  1678                           
  1679                           	psect	bssBANK0
  1680  0020                     __pbssBANK0:	
  1681  0020                     _vol_minus_time_hold:	
  1682  0020                     	ds	4
  1683  0024                     _vol_minus_time_start:	
  1684  0024                     	ds	4
  1685  0028                     _vol_plus_time_hold:	
  1686  0028                     	ds	4
  1687  002C                     _vol_plus_time_start:	
  1688  002C                     	ds	4
  1689  0030                     _HPS_time_start:	
  1690  0030                     	ds	4
  1691  0034                     _timer_counter:	
  1692  0034                     	ds	4
  1693  0038                     _vol_minus_state:	
  1694  0038                     	ds	1
  1695  0039                     _vol_plus_state:	
  1696  0039                     	ds	1
  1697  003A                     _HPS_state:	
  1698  003A                     	ds	1
  1699  003B                     _mute_state:	
  1700  003B                     	ds	1
  1701  003C                     _mute_config:	
  1702  003C                     	ds	1
  1703                           
  1704                           	psect	dataBANK0
  1705  0046                     __pdataBANK0:	
  1706  0046                     _volume_hp_prev:	
  1707  0046                     	ds	1
  1708  0047                     _volume_hp:	
  1709  0047                     	ds	1
  1710  0048                     _volume_sp_prev:	
  1711  0048                     	ds	1
  1712  0049                     _volume_sp:	
  1713  0049                     	ds	1
  1714                           
  1715                           	psect	clrtext
  1716  04A0                     clear_ram0:	
  1717                           ;	Called with FSR0 containing the base address, and
  1718                           ;	WREG with the size to clear
  1719                           
  1720  04A0  0064               	clrwdt	;clear the watchdog before getting into this loop
  1721  04A1                     clrloop0:	
  1722  04A1  0180               	clrf	0	;clear RAM location pointed to by FSR
  1723  04A2  3101               	addfsr 0,1
  1724  04A3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1725  04A4  2CA1               	goto	clrloop0	;have we reached the end yet?
  1726  04A5  3400               	retlw	0	;all done for this memory range, return
  1727                           
  1728                           	psect	cstackCOMMON
  1729  0070                     __pcstackCOMMON:	
  1730  0070                     ?_PPS_unlock:	
  1731  0070                     ??_PPS_unlock:	
  1732                           ; 1 bytes @ 0x0
  1733                           
  1734  0070                     ?_PPS_lock:	
  1735                           ; 1 bytes @ 0x0
  1736                           
  1737  0070                     ??_PPS_lock:	
  1738                           ; 1 bytes @ 0x0
  1739                           
  1740  0070                     ?_LM49450_Wii_init:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0070                     ?_LM49450_PS2_init:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0070                     ?_LM49450_analog_init:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0070                     ?_LM49450_DC_init:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752  0070                     ?_PIC_SETUP:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0070                     ??_PIC_SETUP:	
  1756                           ; 1 bytes @ 0x0
  1757                           
  1758  0070                     ?_ISR:	
  1759                           ; 1 bytes @ 0x0
  1760                           
  1761  0070                     ??_ISR:	
  1762                           ; 1 bytes @ 0x0
  1763                           
  1764  0070                     ?_main:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0070                     ?_I2C_Master_Wait:	
  1768                           ; 1 bytes @ 0x0
  1769                           
  1770  0070                     ??_I2C_Master_Wait:	
  1771                           ; 1 bytes @ 0x0
  1772                           
  1773  0070                     ?_I2C_Master_Start:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0070                     ??_I2C_Master_Start:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0070                     ?_I2C_Master_Stop:	
  1780                           ; 1 bytes @ 0x0
  1781                           
  1782  0070                     ??_I2C_Master_Stop:	
  1783                           ; 1 bytes @ 0x0
  1784                           
  1785  0070                     ?_I2C_Master_Write:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788  0070                     ??_I2C_Master_Write:	
  1789                           ; 1 bytes @ 0x0
  1790                           
  1791  0070                     ?_get_time:	
  1792                           ; 1 bytes @ 0x0
  1793                           
  1794  0070                     ?_timer_diff:	
  1795                           ; 4 bytes @ 0x0
  1796                           
  1797  0070                     ?___lldiv:	
  1798                           ; 4 bytes @ 0x0
  1799                           
  1800  0070                     I2C_Master_Write@data:	
  1801                           ; 4 bytes @ 0x0
  1802                           
  1803  0070                     timer_diff@t:	
  1804                           ; 1 bytes @ 0x0
  1805                           
  1806  0070                     ___lldiv@divisor:	
  1807                           ; 4 bytes @ 0x0
  1808                           
  1809                           
  1810                           ; 4 bytes @ 0x0
  1811  0070                     	ds	1
  1812  0071                     ?_LM49450_write:	
  1813  0071                     LM49450_write@data:	
  1814                           ; 1 bytes @ 0x1
  1815                           
  1816                           
  1817                           ; 1 bytes @ 0x1
  1818  0071                     	ds	1
  1819  0072                     ??_LM49450_write:	
  1820  0072                     LM49450_write@reg:	
  1821                           ; 1 bytes @ 0x2
  1822                           
  1823                           
  1824                           ; 1 bytes @ 0x2
  1825  0072                     	ds	1
  1826  0073                     ??_LM49450_Wii_init:	
  1827  0073                     ??_LM49450_PS2_init:	
  1828                           ; 1 bytes @ 0x3
  1829                           
  1830  0073                     ??_LM49450_analog_init:	
  1831                           ; 1 bytes @ 0x3
  1832                           
  1833  0073                     ??_LM49450_DC_init:	
  1834                           ; 1 bytes @ 0x3
  1835                           
  1836                           
  1837                           ; 1 bytes @ 0x3
  1838  0073                     	ds	1
  1839  0074                     ??_get_time:	
  1840  0074                     ??_timer_diff:	
  1841                           ; 1 bytes @ 0x4
  1842                           
  1843  0074                     ___lldiv@dividend:	
  1844                           ; 1 bytes @ 0x4
  1845                           
  1846                           
  1847                           ; 4 bytes @ 0x4
  1848  0074                     	ds	4
  1849  0078                     ??___lldiv:	
  1850                           
  1851                           ; 1 bytes @ 0x8
  1852  0078                     	ds	1
  1853  0079                     ___lldiv@quotient:	
  1854                           
  1855                           ; 4 bytes @ 0x9
  1856  0079                     	ds	4
  1857  007D                     ___lldiv@counter:	
  1858                           
  1859                           ; 1 bytes @ 0xD
  1860  007D                     	ds	1
  1861                           
  1862                           	psect	cstackBANK0
  1863  003D                     __pcstackBANK0:	
  1864  003D                     ?_I2C_Master_Init:	
  1865  003D                     I2C_Master_Init@clk:	
  1866                           ; 1 bytes @ 0x0
  1867                           
  1868                           
  1869                           ; 4 bytes @ 0x0
  1870  003D                     	ds	4
  1871  0041                     ??_I2C_Master_Init:	
  1872                           
  1873                           ; 1 bytes @ 0x4
  1874  0041                     	ds	4
  1875  0045                     ??_main:	
  1876                           
  1877                           ; 1 bytes @ 0x8
  1878  0045                     	ds	1
  1879                           
  1880                           	psect	maintext
  1881  003A                     __pmaintext:	
  1882 ;;
  1883 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1884 ;;
  1885 ;; *************** function _main *****************
  1886 ;; Defined at:
  1887 ;;		line 75 in file "main.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;		None
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;		None
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : B3F/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1901 ;;      Params:         0       0       0       0       0       0       0       0
  1902 ;;      Locals:         0       0       0       0       0       0       0       0
  1903 ;;      Temps:          0       1       0       0       0       0       0       0
  1904 ;;      Totals:         0       1       0       0       0       0       0       0
  1905 ;;Total ram usage:        1 bytes
  1906 ;; Hardware stack levels required when called:    5
  1907 ;; This function calls:
  1908 ;;		_I2C_Master_Init
  1909 ;;		_LM49450_DC_init
  1910 ;;		_LM49450_PS2_init
  1911 ;;		_LM49450_Wii_init
  1912 ;;		_LM49450_analog_init
  1913 ;;		_LM49450_write
  1914 ;;		_PIC_SETUP
  1915 ;;		_PPS_lock
  1916 ;;		_PPS_unlock
  1917 ;;		_get_time
  1918 ;;		_timer_diff
  1919 ;; This function is called by:
  1920 ;;		Startup code after reset
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           
  1925                           ;psect for function _main
  1926  003A                     _main:	
  1927  003A                     l1421:	
  1928                           ;incstack = 0
  1929                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1930                           
  1931                           
  1932                           ;main.c: 77: PIC_SETUP();
  1933  003A  3184  2420  3180   	fcall	_PIC_SETUP
  1934                           
  1935                           ;main.c: 80: PPS_unlock();
  1936  003D  3184  2499  3180   	fcall	_PPS_unlock
  1937  0040                     l1423:	
  1938                           
  1939                           ;main.c: 81: SSP1DATPPS = 0x11;
  1940  0040  3011               	movlw	17
  1941  0041  017D               	movlb	61	; select bank61
  1942  0042  00C6               	movwf	70	;volatile
  1943  0043                     l1425:	
  1944                           
  1945                           ;main.c: 82: RC1PPS = 0x16;
  1946  0043  3016               	movlw	22
  1947  0044  017E               	movlb	62	; select bank62
  1948  0045  00A1               	movwf	33	;volatile
  1949  0046                     l1427:	
  1950                           
  1951                           ;main.c: 83: SSP1CLKPPS = 0x10;
  1952  0046  3010               	movlw	16
  1953  0047  017D               	movlb	61	; select bank61
  1954  0048  00C5               	movwf	69	;volatile
  1955  0049                     l1429:	
  1956                           
  1957                           ;main.c: 84: RC0PPS = 0x15;
  1958  0049  3015               	movlw	21
  1959  004A  017E               	movlb	62	; select bank62
  1960  004B  00A0               	movwf	32	;volatile
  1961                           
  1962                           ;main.c: 85: PPS_lock();
  1963  004C  3184  2489  3180   	fcall	_PPS_lock
  1964                           
  1965                           ;main.c: 86: I2C_Master_Init(100000);
  1966  004F  3000               	movlw	0
  1967  0050  0140               	movlb	0	; select bank0
  1968  0051  00C0               	movwf	I2C_Master_Init@clk+3
  1969  0052  3001               	movlw	1
  1970  0053  00BF               	movwf	I2C_Master_Init@clk+2
  1971  0054  3086               	movlw	134
  1972  0055  00BE               	movwf	I2C_Master_Init@clk+1
  1973  0056  30A0               	movlw	160
  1974  0057  00BD               	movwf	I2C_Master_Init@clk
  1975  0058  3183  2381  3180   	fcall	_I2C_Master_Init
  1976  005B                     l1431:	
  1977                           
  1978                           ;main.c: 89: if(RC4 && RC3) {
  1979  005B  0140               	movlb	0	; select bank0
  1980  005C  1E0E               	btfss	14,4	;volatile
  1981  005D  285F               	goto	u811
  1982  005E  2860               	goto	u810
  1983  005F                     u811:	
  1984  005F  286C               	goto	l108
  1985  0060                     u810:	
  1986  0060                     l1433:	
  1987  0060  1D8E               	btfss	14,3	;volatile
  1988  0061  2863               	goto	u821
  1989  0062  2864               	goto	u820
  1990  0063                     u821:	
  1991  0063  286C               	goto	l108
  1992  0064                     u820:	
  1993  0064                     l1435:	
  1994                           
  1995                           ;main.c: 90: mute_config = LM49450_Wii_init();
  1996  0064  3183  23D6  3180   	fcall	_LM49450_Wii_init
  1997  0067  0140               	movlb	0	; select bank0
  1998  0068  00C5               	movwf	??_main
  1999  0069  0845               	movf	??_main,w
  2000  006A  00BC               	movwf	_mute_config
  2001                           
  2002                           ;main.c: 91: }
  2003  006B  289B               	goto	l109
  2004  006C                     l108:	
  2005                           
  2006                           ;main.c: 92: else if(RC4 && !RC3) {
  2007  006C  1E0E               	btfss	14,4	;volatile
  2008  006D  286F               	goto	u831
  2009  006E  2870               	goto	u830
  2010  006F                     u831:	
  2011  006F  287C               	goto	l110
  2012  0070                     u830:	
  2013  0070                     l1437:	
  2014  0070  198E               	btfsc	14,3	;volatile
  2015  0071  2873               	goto	u841
  2016  0072  2874               	goto	u840
  2017  0073                     u841:	
  2018  0073  287C               	goto	l110
  2019  0074                     u840:	
  2020  0074                     l1439:	
  2021                           
  2022                           ;main.c: 93: mute_config = LM49450_PS2_init();
  2023  0074  3183  23AF  3180   	fcall	_LM49450_PS2_init
  2024  0077  0140               	movlb	0	; select bank0
  2025  0078  00C5               	movwf	??_main
  2026  0079  0845               	movf	??_main,w
  2027  007A  00BC               	movwf	_mute_config
  2028                           
  2029                           ;main.c: 94: }
  2030  007B  289B               	goto	l109
  2031  007C                     l110:	
  2032                           
  2033                           ;main.c: 95: else if(!RC4 && !RC3) {
  2034  007C  1A0E               	btfsc	14,4	;volatile
  2035  007D  287F               	goto	u851
  2036  007E  2880               	goto	u850
  2037  007F                     u851:	
  2038  007F  288C               	goto	l112
  2039  0080                     u850:	
  2040  0080                     l1441:	
  2041  0080  198E               	btfsc	14,3	;volatile
  2042  0081  2883               	goto	u861
  2043  0082  2884               	goto	u860
  2044  0083                     u861:	
  2045  0083  288C               	goto	l112
  2046  0084                     u860:	
  2047  0084                     l1443:	
  2048                           
  2049                           ;main.c: 96: mute_config = LM49450_analog_init();
  2050  0084  3184  247F  3180   	fcall	_LM49450_analog_init
  2051  0087  0140               	movlb	0	; select bank0
  2052  0088  00C5               	movwf	??_main
  2053  0089  0845               	movf	??_main,w
  2054  008A  00BC               	movwf	_mute_config
  2055                           
  2056                           ;main.c: 97: }
  2057  008B  289B               	goto	l109
  2058  008C                     l112:	
  2059                           
  2060                           ;main.c: 98: else if(!RC4 && RC3) {
  2061  008C  1A0E               	btfsc	14,4	;volatile
  2062  008D  288F               	goto	u871
  2063  008E  2890               	goto	u870
  2064  008F                     u871:	
  2065  008F  289B               	goto	l109
  2066  0090                     u870:	
  2067  0090                     l1445:	
  2068  0090  1D8E               	btfss	14,3	;volatile
  2069  0091  2893               	goto	u881
  2070  0092  2894               	goto	u880
  2071  0093                     u881:	
  2072  0093  289B               	goto	l109
  2073  0094                     u880:	
  2074  0094                     l1447:	
  2075                           
  2076                           ;main.c: 99: mute_config = LM49450_DC_init();
  2077  0094  3183  23FB  3180   	fcall	_LM49450_DC_init
  2078  0097  0140               	movlb	0	; select bank0
  2079  0098  00C5               	movwf	??_main
  2080  0099  0845               	movf	??_main,w
  2081  009A  00BC               	movwf	_mute_config
  2082  009B                     l109:	
  2083                           
  2084                           ;main.c: 100: };main.c: 103: LM49450_write(0x08, volume_sp);
  2085  009B  0849               	movf	_volume_sp,w
  2086  009C  00C5               	movwf	??_main
  2087  009D  0845               	movf	??_main,w
  2088  009E  00F1               	movwf	LM49450_write@data
  2089  009F  3008               	movlw	8
  2090  00A0  3184  2455  3180   	fcall	_LM49450_write
  2091                           
  2092                           ;main.c: 104: LM49450_write(0x07, volume_hp);
  2093  00A3  0140               	movlb	0	; select bank0
  2094  00A4  0847               	movf	_volume_hp,w
  2095  00A5  00C5               	movwf	??_main
  2096  00A6  0845               	movf	??_main,w
  2097  00A7  00F1               	movwf	LM49450_write@data
  2098  00A8  3007               	movlw	7
  2099  00A9  3184  2455  3180   	fcall	_LM49450_write
  2100  00AC                     l1449:	
  2101                           
  2102                           ;main.c: 109: if(RC2) {
  2103  00AC  0140               	movlb	0	; select bank0
  2104  00AD  1D0E               	btfss	14,2	;volatile
  2105  00AE  28B0               	goto	u891
  2106  00AF  28B1               	goto	u890
  2107  00B0                     u891:	
  2108  00B0  28FD               	goto	l1469
  2109  00B1                     u890:	
  2110  00B1                     l1451:	
  2111                           
  2112                           ;main.c: 110: if(HPS_state == 0) {
  2113  00B1  083A               	movf	_HPS_state,w
  2114  00B2  1D03               	btfss	3,2
  2115  00B3  28B5               	goto	u901
  2116  00B4  28B6               	goto	u900
  2117  00B5                     u901:	
  2118  00B5  28C5               	goto	l1457
  2119  00B6                     u900:	
  2120  00B6                     l1453:	
  2121                           
  2122                           ;main.c: 111: HPS_time_start = get_time();
  2123  00B6  3184  2475  3180   	fcall	_get_time
  2124  00B9  0873               	movf	?_get_time+3,w
  2125  00BA  0140               	movlb	0	; select bank0
  2126  00BB  00B3               	movwf	_HPS_time_start+3
  2127  00BC  0872               	movf	?_get_time+2,w
  2128  00BD  00B2               	movwf	_HPS_time_start+2
  2129  00BE  0871               	movf	?_get_time+1,w
  2130  00BF  00B1               	movwf	_HPS_time_start+1
  2131  00C0  0870               	movf	?_get_time,w
  2132  00C1  00B0               	movwf	_HPS_time_start
  2133  00C2                     l1455:	
  2134                           
  2135                           ;main.c: 112: HPS_state = 1;
  2136  00C2  01BA               	clrf	_HPS_state
  2137  00C3  0ABA               	incf	_HPS_state,f
  2138                           
  2139                           ;main.c: 113: }
  2140  00C4  2917               	goto	l1479
  2141  00C5                     l1457:	
  2142                           
  2143                           ;main.c: 114: else if(HPS_state == 1) {
  2144  00C5  033A               	decf	_HPS_state,w
  2145  00C6  1D03               	btfss	3,2
  2146  00C7  28C9               	goto	u911
  2147  00C8  28CA               	goto	u910
  2148  00C9                     u911:	
  2149  00C9  2917               	goto	l1479
  2150  00CA                     u910:	
  2151  00CA                     l1459:	
  2152                           
  2153                           ;main.c: 115: if(timer_diff(HPS_time_start) >= 4) {
  2154  00CA  0833               	movf	_HPS_time_start+3,w
  2155  00CB  00F3               	movwf	timer_diff@t+3
  2156  00CC  0832               	movf	_HPS_time_start+2,w
  2157  00CD  00F2               	movwf	timer_diff@t+2
  2158  00CE  0831               	movf	_HPS_time_start+1,w
  2159  00CF  00F1               	movwf	timer_diff@t+1
  2160  00D0  0830               	movf	_HPS_time_start,w
  2161  00D1  00F0               	movwf	timer_diff@t
  2162  00D2  3184  243F  3180   	fcall	_timer_diff
  2163  00D5  0873               	movf	?_timer_diff+3,w
  2164  00D6  1D03               	btfss	3,2
  2165  00D7  28E4               	goto	u920
  2166  00D8  0872               	movf	?_timer_diff+2,w
  2167  00D9  1D03               	btfss	3,2
  2168  00DA  28E4               	goto	u920
  2169  00DB  0871               	movf	?_timer_diff+1,w
  2170  00DC  1D03               	btfss	3,2
  2171  00DD  28E4               	goto	u920
  2172  00DE  3004               	movlw	4
  2173  00DF  0270               	subwf	?_timer_diff,w
  2174  00E0  1C03               	btfss	3,0
  2175  00E1  28E3               	goto	u921
  2176  00E2  28E4               	goto	u920
  2177  00E3                     u921:	
  2178  00E3  2917               	goto	l1479
  2179  00E4                     u920:	
  2180  00E4                     l1461:	
  2181                           
  2182                           ;main.c: 116: HPS_state = 2;
  2183  00E4  3002               	movlw	2
  2184  00E5  0140               	movlb	0	; select bank0
  2185  00E6  00C5               	movwf	??_main
  2186  00E7  0845               	movf	??_main,w
  2187  00E8  00BA               	movwf	_HPS_state
  2188  00E9                     l1463:	
  2189                           
  2190                           ;main.c: 117: if(volume_sp == 0 && mute_state == 0) {
  2191  00E9  0849               	movf	_volume_sp,w
  2192  00EA  1D03               	btfss	3,2
  2193  00EB  28ED               	goto	u931
  2194  00EC  28EE               	goto	u930
  2195  00ED                     u931:	
  2196  00ED  28FC               	goto	l118
  2197  00EE                     u930:	
  2198  00EE                     l1465:	
  2199  00EE  083B               	movf	_mute_state,w
  2200  00EF  1D03               	btfss	3,2
  2201  00F0  28F2               	goto	u941
  2202  00F1  28F3               	goto	u940
  2203  00F2                     u941:	
  2204  00F2  28FC               	goto	l118
  2205  00F3                     u940:	
  2206  00F3                     l1467:	
  2207                           
  2208                           ;main.c: 119: LM49450_write(0x00, mute_config);
  2209  00F3  083C               	movf	_mute_config,w
  2210  00F4  00C5               	movwf	??_main
  2211  00F5  0845               	movf	??_main,w
  2212  00F6  00F1               	movwf	LM49450_write@data
  2213  00F7  3000               	movlw	0
  2214  00F8  3184  2455  3180   	fcall	_LM49450_write
  2215  00FB  2917               	goto	l1479
  2216  00FC                     l118:	
  2217                           
  2218                           ;main.c: 120: };main.c: 121: };main.c: 122: };main.c: 123: }
  2219  00FC  2917               	goto	l1479
  2220  00FD                     l1469:	
  2221                           
  2222                           ;main.c: 124: else {;main.c: 125: if(HPS_state == 2) {
  2223  00FD  3002               	movlw	2
  2224  00FE  063A               	xorwf	_HPS_state,w
  2225  00FF  1D03               	btfss	3,2
  2226  0100  2902               	goto	u951
  2227  0101  2903               	goto	u950
  2228  0102                     u951:	
  2229  0102  2915               	goto	l1477
  2230  0103                     u950:	
  2231  0103                     l1471:	
  2232                           
  2233                           ;main.c: 126: if(volume_hp == 0 && mute_state == 0) {
  2234  0103  0847               	movf	_volume_hp,w
  2235  0104  1D03               	btfss	3,2
  2236  0105  2907               	goto	u961
  2237  0106  2908               	goto	u960
  2238  0107                     u961:	
  2239  0107  2915               	goto	l1477
  2240  0108                     u960:	
  2241  0108                     l1473:	
  2242  0108  083B               	movf	_mute_state,w
  2243  0109  1D03               	btfss	3,2
  2244  010A  290C               	goto	u971
  2245  010B  290D               	goto	u970
  2246  010C                     u971:	
  2247  010C  2915               	goto	l1477
  2248  010D                     u970:	
  2249  010D                     l1475:	
  2250                           
  2251                           ;main.c: 128: LM49450_write(0x00, mute_config);
  2252  010D  083C               	movf	_mute_config,w
  2253  010E  00C5               	movwf	??_main
  2254  010F  0845               	movf	??_main,w
  2255  0110  00F1               	movwf	LM49450_write@data
  2256  0111  3000               	movlw	0
  2257  0112  3184  2455  3180   	fcall	_LM49450_write
  2258  0115                     l1477:	
  2259                           
  2260                           ;main.c: 129: };main.c: 130: };main.c: 131: HPS_state = 0;
  2261  0115  0140               	movlb	0	; select bank0
  2262  0116  01BA               	clrf	_HPS_state
  2263  0117                     l1479:	
  2264                           
  2265                           ;main.c: 132: };main.c: 134: if(!RA5) {
  2266  0117  0140               	movlb	0	; select bank0
  2267  0118  1A8C               	btfsc	12,5	;volatile
  2268  0119  291B               	goto	u981
  2269  011A  291C               	goto	u980
  2270  011B                     u981:	
  2271  011B  29C0               	goto	l1525
  2272  011C                     u980:	
  2273  011C  29C2               	goto	l1527
  2274  011D                     l1483:	
  2275                           
  2276                           ;main.c: 138: vol_plus_time_start = get_time();
  2277  011D  3184  2475  3180   	fcall	_get_time
  2278  0120  0873               	movf	?_get_time+3,w
  2279  0121  0140               	movlb	0	; select bank0
  2280  0122  00AF               	movwf	_vol_plus_time_start+3
  2281  0123  0872               	movf	?_get_time+2,w
  2282  0124  00AE               	movwf	_vol_plus_time_start+2
  2283  0125  0871               	movf	?_get_time+1,w
  2284  0126  00AD               	movwf	_vol_plus_time_start+1
  2285  0127  0870               	movf	?_get_time,w
  2286  0128  00AC               	movwf	_vol_plus_time_start
  2287  0129                     l1485:	
  2288                           
  2289                           ;main.c: 139: vol_plus_state = 1;
  2290  0129  01B9               	clrf	_vol_plus_state
  2291  012A  0AB9               	incf	_vol_plus_state,f
  2292                           
  2293                           ;main.c: 140: break;
  2294  012B  29CD               	goto	l1531
  2295  012C                     l1487:	
  2296                           
  2297                           ;main.c: 143: if(timer_diff(vol_plus_time_start) >= 4) {
  2298  012C  082F               	movf	_vol_plus_time_start+3,w
  2299  012D  00F3               	movwf	timer_diff@t+3
  2300  012E  082E               	movf	_vol_plus_time_start+2,w
  2301  012F  00F2               	movwf	timer_diff@t+2
  2302  0130  082D               	movf	_vol_plus_time_start+1,w
  2303  0131  00F1               	movwf	timer_diff@t+1
  2304  0132  082C               	movf	_vol_plus_time_start,w
  2305  0133  00F0               	movwf	timer_diff@t
  2306  0134  3184  243F  3180   	fcall	_timer_diff
  2307  0137  0873               	movf	?_timer_diff+3,w
  2308  0138  1D03               	btfss	3,2
  2309  0139  2946               	goto	u990
  2310  013A  0872               	movf	?_timer_diff+2,w
  2311  013B  1D03               	btfss	3,2
  2312  013C  2946               	goto	u990
  2313  013D  0871               	movf	?_timer_diff+1,w
  2314  013E  1D03               	btfss	3,2
  2315  013F  2946               	goto	u990
  2316  0140  3004               	movlw	4
  2317  0141  0270               	subwf	?_timer_diff,w
  2318  0142  1C03               	btfss	3,0
  2319  0143  2945               	goto	u991
  2320  0144  2946               	goto	u990
  2321  0145                     u991:	
  2322  0145  29CD               	goto	l1531
  2323  0146                     u990:	
  2324  0146                     l1489:	
  2325                           
  2326                           ;main.c: 144: vol_plus_time_hold = get_time();
  2327  0146  3184  2475  3180   	fcall	_get_time
  2328  0149  0873               	movf	?_get_time+3,w
  2329  014A  0140               	movlb	0	; select bank0
  2330  014B  00AB               	movwf	_vol_plus_time_hold+3
  2331  014C  0872               	movf	?_get_time+2,w
  2332  014D  00AA               	movwf	_vol_plus_time_hold+2
  2333  014E  0871               	movf	?_get_time+1,w
  2334  014F  00A9               	movwf	_vol_plus_time_hold+1
  2335  0150  0870               	movf	?_get_time,w
  2336  0151  00A8               	movwf	_vol_plus_time_hold
  2337  0152                     l1491:	
  2338                           
  2339                           ;main.c: 145: vol_plus_state = 2;
  2340  0152  3002               	movlw	2
  2341  0153  00C5               	movwf	??_main
  2342  0154  0845               	movf	??_main,w
  2343  0155  00B9               	movwf	_vol_plus_state
  2344  0156                     l1493:	
  2345                           
  2346                           ;main.c: 146: if(HPS_state == 2) {
  2347  0156  3002               	movlw	2
  2348  0157  063A               	xorwf	_HPS_state,w
  2349  0158  1D03               	btfss	3,2
  2350  0159  295B               	goto	u1001
  2351  015A  295C               	goto	u1000
  2352  015B                     u1001:	
  2353  015B  296C               	goto	l1501
  2354  015C                     u1000:	
  2355  015C                     l1495:	
  2356                           
  2357                           ;main.c: 147: if((volume_hp < 31) && mute_state == 0) volume_hp++;
  2358  015C  301F               	movlw	31
  2359  015D  0247               	subwf	_volume_hp,w
  2360  015E  1803               	skipnc
  2361  015F  2961               	goto	u1011
  2362  0160  2962               	goto	u1010
  2363  0161                     u1011:	
  2364  0161  29CD               	goto	l128
  2365  0162                     u1010:	
  2366  0162                     l1497:	
  2367  0162  083B               	movf	_mute_state,w
  2368  0163  1D03               	btfss	3,2
  2369  0164  2966               	goto	u1021
  2370  0165  2967               	goto	u1020
  2371  0166                     u1021:	
  2372  0166  29CD               	goto	l128
  2373  0167                     u1020:	
  2374  0167                     l1499:	
  2375  0167  3001               	movlw	1
  2376  0168  00C5               	movwf	??_main
  2377  0169  0845               	movf	??_main,w
  2378  016A  07C7               	addwf	_volume_hp,f
  2379  016B  29CD               	goto	l1531
  2380  016C                     l1501:	
  2381                           
  2382                           ;main.c: 149: else if((volume_sp < 31) && mute_state == 0) volume_sp++;
  2383  016C  301F               	movlw	31
  2384  016D  0249               	subwf	_volume_sp,w
  2385  016E  1803               	skipnc
  2386  016F  2971               	goto	u1031
  2387  0170  2972               	goto	u1030
  2388  0171                     u1031:	
  2389  0171  29CD               	goto	l128
  2390  0172                     u1030:	
  2391  0172                     l1503:	
  2392  0172  083B               	movf	_mute_state,w
  2393  0173  1D03               	btfss	3,2
  2394  0174  2976               	goto	u1041
  2395  0175  2977               	goto	u1040
  2396  0176                     u1041:	
  2397  0176  29CD               	goto	l128
  2398  0177                     u1040:	
  2399  0177                     l1505:	
  2400  0177  3001               	movlw	1
  2401  0178  00C5               	movwf	??_main
  2402  0179  0845               	movf	??_main,w
  2403  017A  07C9               	addwf	_volume_sp,f
  2404  017B  29CD               	goto	l1531
  2405  017C                     l1507:	
  2406                           
  2407                           ;main.c: 154: if(timer_diff(vol_plus_time_hold) >= 20) {
  2408  017C  082B               	movf	_vol_plus_time_hold+3,w
  2409  017D  00F3               	movwf	timer_diff@t+3
  2410  017E  082A               	movf	_vol_plus_time_hold+2,w
  2411  017F  00F2               	movwf	timer_diff@t+2
  2412  0180  0829               	movf	_vol_plus_time_hold+1,w
  2413  0181  00F1               	movwf	timer_diff@t+1
  2414  0182  0828               	movf	_vol_plus_time_hold,w
  2415  0183  00F0               	movwf	timer_diff@t
  2416  0184  3184  243F  3180   	fcall	_timer_diff
  2417  0187  0873               	movf	?_timer_diff+3,w
  2418  0188  1D03               	btfss	3,2
  2419  0189  2996               	goto	u1050
  2420  018A  0872               	movf	?_timer_diff+2,w
  2421  018B  1D03               	btfss	3,2
  2422  018C  2996               	goto	u1050
  2423  018D  0871               	movf	?_timer_diff+1,w
  2424  018E  1D03               	btfss	3,2
  2425  018F  2996               	goto	u1050
  2426  0190  3014               	movlw	20
  2427  0191  0270               	subwf	?_timer_diff,w
  2428  0192  1C03               	btfss	3,0
  2429  0193  2995               	goto	u1051
  2430  0194  2996               	goto	u1050
  2431  0195                     u1051:	
  2432  0195  29CD               	goto	l1531
  2433  0196                     u1050:	
  2434  0196                     l1509:	
  2435                           
  2436                           ;main.c: 155: vol_plus_time_hold = get_time();
  2437  0196  3184  2475  3180   	fcall	_get_time
  2438  0199  0873               	movf	?_get_time+3,w
  2439  019A  0140               	movlb	0	; select bank0
  2440  019B  00AB               	movwf	_vol_plus_time_hold+3
  2441  019C  0872               	movf	?_get_time+2,w
  2442  019D  00AA               	movwf	_vol_plus_time_hold+2
  2443  019E  0871               	movf	?_get_time+1,w
  2444  019F  00A9               	movwf	_vol_plus_time_hold+1
  2445  01A0  0870               	movf	?_get_time,w
  2446  01A1  00A8               	movwf	_vol_plus_time_hold
  2447  01A2                     l1511:	
  2448                           
  2449                           ;main.c: 156: if(HPS_state == 2) {
  2450  01A2  3002               	movlw	2
  2451  01A3  063A               	xorwf	_HPS_state,w
  2452  01A4  1D03               	btfss	3,2
  2453  01A5  29A7               	goto	u1061
  2454  01A6  29A8               	goto	u1060
  2455  01A7                     u1061:	
  2456  01A7  29B4               	goto	l1519
  2457  01A8                     u1060:	
  2458  01A8                     l1513:	
  2459                           
  2460                           ;main.c: 157: if((volume_hp < 31) && mute_state == 0) volume_hp++;
  2461  01A8  301F               	movlw	31
  2462  01A9  0247               	subwf	_volume_hp,w
  2463  01AA  1803               	skipnc
  2464  01AB  29AD               	goto	u1071
  2465  01AC  29AE               	goto	u1070
  2466  01AD                     u1071:	
  2467  01AD  29CD               	goto	l1531
  2468  01AE                     u1070:	
  2469  01AE                     l1515:	
  2470  01AE  083B               	movf	_mute_state,w
  2471  01AF  1D03               	btfss	3,2
  2472  01B0  29B2               	goto	u1081
  2473  01B1  29B3               	goto	u1080
  2474  01B2                     u1081:	
  2475  01B2  29CD               	goto	l1531
  2476  01B3                     u1080:	
  2477  01B3  2967               	goto	l1499
  2478  01B4                     l1519:	
  2479                           
  2480                           ;main.c: 159: else if((volume_sp < 31) && mute_state == 0) volume_sp++;
  2481  01B4  301F               	movlw	31
  2482  01B5  0249               	subwf	_volume_sp,w
  2483  01B6  1803               	skipnc
  2484  01B7  29B9               	goto	u1091
  2485  01B8  29BA               	goto	u1090
  2486  01B9                     u1091:	
  2487  01B9  29CD               	goto	l1531
  2488  01BA                     u1090:	
  2489  01BA                     l1521:	
  2490  01BA  083B               	movf	_mute_state,w
  2491  01BB  1D03               	btfss	3,2
  2492  01BC  29BE               	goto	u1101
  2493  01BD  29BF               	goto	u1100
  2494  01BE                     u1101:	
  2495  01BE  29CD               	goto	l1531
  2496  01BF                     u1100:	
  2497  01BF  2977               	goto	l1505
  2498  01C0                     l1525:	
  2499                           
  2500                           ;main.c: 163: vol_plus_state = 0;
  2501  01C0  01B9               	clrf	_vol_plus_state
  2502                           
  2503                           ;main.c: 164: }
  2504  01C1  29CD               	goto	l1531
  2505  01C2                     l1527:	
  2506  01C2  0839               	movf	_vol_plus_state,w
  2507                           
  2508                           ; Switch size 1, requested type "simple"
  2509                           ; Number of cases is 3, Range of values is 0 to 2
  2510                           ; switch strategies available:
  2511                           ; Name         Instructions Cycles
  2512                           ; simple_byte           10     6 (average)
  2513                           ; direct_byte           12     6 (fixed)
  2514                           ; jumptable            260     6 (fixed)
  2515                           ;	Chosen strategy is simple_byte
  2516  01C3  3A00               	xorlw	0	; case 0
  2517  01C4  1903               	skipnz
  2518  01C5  291D               	goto	l1483
  2519  01C6  3A01               	xorlw	1	; case 1
  2520  01C7  1903               	skipnz
  2521  01C8  292C               	goto	l1487
  2522  01C9  3A03               	xorlw	3	; case 2
  2523  01CA  1903               	skipnz
  2524  01CB  297C               	goto	l1507
  2525  01CC  29C0               	goto	l1525
  2526  01CD                     l128:	
  2527  01CD                     l1531:	
  2528                           ;main.c: 165: }
  2529                           
  2530                           
  2531                           ;main.c: 168: };main.c: 170: if(!RA4) {
  2532  01CD  0140               	movlb	0	; select bank0
  2533  01CE  1A0C               	btfsc	12,4	;volatile
  2534  01CF  29D1               	goto	u1111
  2535  01D0  29D2               	goto	u1110
  2536  01D1                     u1111:	
  2537  01D1  2A6E               	goto	l1577
  2538  01D2                     u1110:	
  2539  01D2  2A70               	goto	l1579
  2540  01D3                     l1535:	
  2541                           
  2542                           ;main.c: 173: vol_minus_time_start = get_time();
  2543  01D3  3184  2475  3180   	fcall	_get_time
  2544  01D6  0873               	movf	?_get_time+3,w
  2545  01D7  0140               	movlb	0	; select bank0
  2546  01D8  00A7               	movwf	_vol_minus_time_start+3
  2547  01D9  0872               	movf	?_get_time+2,w
  2548  01DA  00A6               	movwf	_vol_minus_time_start+2
  2549  01DB  0871               	movf	?_get_time+1,w
  2550  01DC  00A5               	movwf	_vol_minus_time_start+1
  2551  01DD  0870               	movf	?_get_time,w
  2552  01DE  00A4               	movwf	_vol_minus_time_start
  2553  01DF                     l1537:	
  2554                           
  2555                           ;main.c: 174: vol_minus_state = 1;
  2556  01DF  01B8               	clrf	_vol_minus_state
  2557  01E0  0AB8               	incf	_vol_minus_state,f
  2558                           
  2559                           ;main.c: 175: break;
  2560  01E1  2A7B               	goto	l1583
  2561  01E2                     l1539:	
  2562                           
  2563                           ;main.c: 177: if(timer_diff(vol_minus_time_start) >= 4) {
  2564  01E2  0827               	movf	_vol_minus_time_start+3,w
  2565  01E3  00F3               	movwf	timer_diff@t+3
  2566  01E4  0826               	movf	_vol_minus_time_start+2,w
  2567  01E5  00F2               	movwf	timer_diff@t+2
  2568  01E6  0825               	movf	_vol_minus_time_start+1,w
  2569  01E7  00F1               	movwf	timer_diff@t+1
  2570  01E8  0824               	movf	_vol_minus_time_start,w
  2571  01E9  00F0               	movwf	timer_diff@t
  2572  01EA  3184  243F  3180   	fcall	_timer_diff
  2573  01ED  0873               	movf	?_timer_diff+3,w
  2574  01EE  1D03               	btfss	3,2
  2575  01EF  29FC               	goto	u1120
  2576  01F0  0872               	movf	?_timer_diff+2,w
  2577  01F1  1D03               	btfss	3,2
  2578  01F2  29FC               	goto	u1120
  2579  01F3  0871               	movf	?_timer_diff+1,w
  2580  01F4  1D03               	btfss	3,2
  2581  01F5  29FC               	goto	u1120
  2582  01F6  3004               	movlw	4
  2583  01F7  0270               	subwf	?_timer_diff,w
  2584  01F8  1C03               	btfss	3,0
  2585  01F9  29FB               	goto	u1121
  2586  01FA  29FC               	goto	u1120
  2587  01FB                     u1121:	
  2588  01FB  2A7B               	goto	l1583
  2589  01FC                     u1120:	
  2590  01FC                     l1541:	
  2591                           
  2592                           ;main.c: 178: vol_minus_time_hold = get_time();
  2593  01FC  3184  2475  3180   	fcall	_get_time
  2594  01FF  0873               	movf	?_get_time+3,w
  2595  0200  0140               	movlb	0	; select bank0
  2596  0201  00A3               	movwf	_vol_minus_time_hold+3
  2597  0202  0872               	movf	?_get_time+2,w
  2598  0203  00A2               	movwf	_vol_minus_time_hold+2
  2599  0204  0871               	movf	?_get_time+1,w
  2600  0205  00A1               	movwf	_vol_minus_time_hold+1
  2601  0206  0870               	movf	?_get_time,w
  2602  0207  00A0               	movwf	_vol_minus_time_hold
  2603  0208                     l1543:	
  2604                           
  2605                           ;main.c: 179: vol_minus_state = 2;
  2606  0208  3002               	movlw	2
  2607  0209  00C5               	movwf	??_main
  2608  020A  0845               	movf	??_main,w
  2609  020B  00B8               	movwf	_vol_minus_state
  2610  020C                     l1545:	
  2611                           
  2612                           ;main.c: 180: if(HPS_state == 2) {
  2613  020C  3002               	movlw	2
  2614  020D  063A               	xorwf	_HPS_state,w
  2615  020E  1D03               	btfss	3,2
  2616  020F  2A11               	goto	u1131
  2617  0210  2A12               	goto	u1130
  2618  0211                     u1131:	
  2619  0211  2A1F               	goto	l1553
  2620  0212                     u1130:	
  2621  0212                     l1547:	
  2622                           
  2623                           ;main.c: 181: if((volume_hp > 0) && mute_state == 0) volume_hp--;
  2624  0212  0847               	movf	_volume_hp,w
  2625  0213  1903               	btfsc	3,2
  2626  0214  2A16               	goto	u1141
  2627  0215  2A17               	goto	u1140
  2628  0216                     u1141:	
  2629  0216  2A7B               	goto	l146
  2630  0217                     u1140:	
  2631  0217                     l1549:	
  2632  0217  083B               	movf	_mute_state,w
  2633  0218  1D03               	btfss	3,2
  2634  0219  2A1B               	goto	u1151
  2635  021A  2A1C               	goto	u1150
  2636  021B                     u1151:	
  2637  021B  2A7B               	goto	l146
  2638  021C                     u1150:	
  2639  021C                     l1551:	
  2640  021C  3001               	movlw	1
  2641  021D  02C7               	subwf	_volume_hp,f
  2642  021E  2A7B               	goto	l1583
  2643  021F                     l1553:	
  2644                           
  2645                           ;main.c: 183: else if((volume_sp > 0) && mute_state == 0) volume_sp--;
  2646  021F  0849               	movf	_volume_sp,w
  2647  0220  1903               	btfsc	3,2
  2648  0221  2A23               	goto	u1161
  2649  0222  2A24               	goto	u1160
  2650  0223                     u1161:	
  2651  0223  2A7B               	goto	l146
  2652  0224                     u1160:	
  2653  0224                     l1555:	
  2654  0224  083B               	movf	_mute_state,w
  2655  0225  1D03               	btfss	3,2
  2656  0226  2A28               	goto	u1171
  2657  0227  2A29               	goto	u1170
  2658  0228                     u1171:	
  2659  0228  2A7B               	goto	l146
  2660  0229                     u1170:	
  2661  0229                     l1557:	
  2662  0229  3001               	movlw	1
  2663  022A  02C9               	subwf	_volume_sp,f
  2664  022B  2A7B               	goto	l1583
  2665  022C                     l1559:	
  2666                           
  2667                           ;main.c: 187: if(timer_diff(vol_minus_time_hold) >= 20) {
  2668  022C  0823               	movf	_vol_minus_time_hold+3,w
  2669  022D  00F3               	movwf	timer_diff@t+3
  2670  022E  0822               	movf	_vol_minus_time_hold+2,w
  2671  022F  00F2               	movwf	timer_diff@t+2
  2672  0230  0821               	movf	_vol_minus_time_hold+1,w
  2673  0231  00F1               	movwf	timer_diff@t+1
  2674  0232  0820               	movf	_vol_minus_time_hold,w
  2675  0233  00F0               	movwf	timer_diff@t
  2676  0234  3184  243F  3180   	fcall	_timer_diff
  2677  0237  0873               	movf	?_timer_diff+3,w
  2678  0238  1D03               	btfss	3,2
  2679  0239  2A46               	goto	u1180
  2680  023A  0872               	movf	?_timer_diff+2,w
  2681  023B  1D03               	btfss	3,2
  2682  023C  2A46               	goto	u1180
  2683  023D  0871               	movf	?_timer_diff+1,w
  2684  023E  1D03               	btfss	3,2
  2685  023F  2A46               	goto	u1180
  2686  0240  3014               	movlw	20
  2687  0241  0270               	subwf	?_timer_diff,w
  2688  0242  1C03               	btfss	3,0
  2689  0243  2A45               	goto	u1181
  2690  0244  2A46               	goto	u1180
  2691  0245                     u1181:	
  2692  0245  2A7B               	goto	l1583
  2693  0246                     u1180:	
  2694  0246                     l1561:	
  2695                           
  2696                           ;main.c: 188: vol_minus_time_hold = get_time();
  2697  0246  3184  2475  3180   	fcall	_get_time
  2698  0249  0873               	movf	?_get_time+3,w
  2699  024A  0140               	movlb	0	; select bank0
  2700  024B  00A3               	movwf	_vol_minus_time_hold+3
  2701  024C  0872               	movf	?_get_time+2,w
  2702  024D  00A2               	movwf	_vol_minus_time_hold+2
  2703  024E  0871               	movf	?_get_time+1,w
  2704  024F  00A1               	movwf	_vol_minus_time_hold+1
  2705  0250  0870               	movf	?_get_time,w
  2706  0251  00A0               	movwf	_vol_minus_time_hold
  2707  0252                     l1563:	
  2708                           
  2709                           ;main.c: 189: if(HPS_state == 2) {
  2710  0252  3002               	movlw	2
  2711  0253  063A               	xorwf	_HPS_state,w
  2712  0254  1D03               	btfss	3,2
  2713  0255  2A57               	goto	u1191
  2714  0256  2A58               	goto	u1190
  2715  0257                     u1191:	
  2716  0257  2A63               	goto	l1571
  2717  0258                     u1190:	
  2718  0258                     l1565:	
  2719                           
  2720                           ;main.c: 190: if((volume_hp > 0) && mute_state == 0) volume_hp--;
  2721  0258  0847               	movf	_volume_hp,w
  2722  0259  1903               	btfsc	3,2
  2723  025A  2A5C               	goto	u1201
  2724  025B  2A5D               	goto	u1200
  2725  025C                     u1201:	
  2726  025C  2A7B               	goto	l1583
  2727  025D                     u1200:	
  2728  025D                     l1567:	
  2729  025D  083B               	movf	_mute_state,w
  2730  025E  1D03               	btfss	3,2
  2731  025F  2A61               	goto	u1211
  2732  0260  2A62               	goto	u1210
  2733  0261                     u1211:	
  2734  0261  2A7B               	goto	l1583
  2735  0262                     u1210:	
  2736  0262  2A1C               	goto	l1551
  2737  0263                     l1571:	
  2738                           
  2739                           ;main.c: 192: else if((volume_sp > 0) && mute_state == 0) volume_sp--;
  2740  0263  0849               	movf	_volume_sp,w
  2741  0264  1903               	btfsc	3,2
  2742  0265  2A67               	goto	u1221
  2743  0266  2A68               	goto	u1220
  2744  0267                     u1221:	
  2745  0267  2A7B               	goto	l1583
  2746  0268                     u1220:	
  2747  0268                     l1573:	
  2748  0268  083B               	movf	_mute_state,w
  2749  0269  1D03               	btfss	3,2
  2750  026A  2A6C               	goto	u1231
  2751  026B  2A6D               	goto	u1230
  2752  026C                     u1231:	
  2753  026C  2A7B               	goto	l1583
  2754  026D                     u1230:	
  2755  026D  2A29               	goto	l1557
  2756  026E                     l1577:	
  2757                           
  2758                           ;main.c: 196: vol_minus_state = 0;
  2759  026E  01B8               	clrf	_vol_minus_state
  2760                           
  2761                           ;main.c: 197: }
  2762  026F  2A7B               	goto	l1583
  2763  0270                     l1579:	
  2764  0270  0838               	movf	_vol_minus_state,w
  2765                           
  2766                           ; Switch size 1, requested type "simple"
  2767                           ; Number of cases is 3, Range of values is 0 to 2
  2768                           ; switch strategies available:
  2769                           ; Name         Instructions Cycles
  2770                           ; simple_byte           10     6 (average)
  2771                           ; direct_byte           12     6 (fixed)
  2772                           ; jumptable            260     6 (fixed)
  2773                           ;	Chosen strategy is simple_byte
  2774  0271  3A00               	xorlw	0	; case 0
  2775  0272  1903               	skipnz
  2776  0273  29D3               	goto	l1535
  2777  0274  3A01               	xorlw	1	; case 1
  2778  0275  1903               	skipnz
  2779  0276  29E2               	goto	l1539
  2780  0277  3A03               	xorlw	3	; case 2
  2781  0278  1903               	skipnz
  2782  0279  2A2C               	goto	l1559
  2783  027A  2A6E               	goto	l1577
  2784  027B                     l146:	
  2785  027B                     l1583:	
  2786                           ;main.c: 198: }
  2787                           
  2788                           
  2789                           ;main.c: 201: };main.c: 204: if((vol_plus_state == 2) && (vol_minus_state == 2)) {
  2790  027B  3002               	movlw	2
  2791  027C  0140               	movlb	0	; select bank0
  2792  027D  0639               	xorwf	_vol_plus_state,w
  2793  027E  1D03               	btfss	3,2
  2794  027F  2A81               	goto	u1241
  2795  0280  2A82               	goto	u1240
  2796  0281                     u1241:	
  2797  0281  2AB4               	goto	l1601
  2798  0282                     u1240:	
  2799  0282                     l1585:	
  2800  0282  3002               	movlw	2
  2801  0283  0638               	xorwf	_vol_minus_state,w
  2802  0284  1D03               	btfss	3,2
  2803  0285  2A87               	goto	u1251
  2804  0286  2A88               	goto	u1250
  2805  0287                     u1251:	
  2806  0287  2AB4               	goto	l1601
  2807  0288                     u1250:	
  2808  0288  2AA6               	goto	l1599
  2809  0289                     l1589:	
  2810                           
  2811                           ;main.c: 208: LM49450_write(0x00, (mute_config | 0b100));
  2812  0289  083C               	movf	_mute_config,w
  2813  028A  3804               	iorlw	4
  2814  028B  00C5               	movwf	??_main
  2815  028C  0845               	movf	??_main,w
  2816  028D  00F1               	movwf	LM49450_write@data
  2817  028E  3000               	movlw	0
  2818  028F  3184  2455  3180   	fcall	_LM49450_write
  2819  0292                     l1591:	
  2820                           
  2821                           ;main.c: 209: mute_state = 1;
  2822  0292  0140               	movlb	0	; select bank0
  2823  0293  01BB               	clrf	_mute_state
  2824  0294  0ABB               	incf	_mute_state,f
  2825                           
  2826                           ;main.c: 210: break;
  2827  0295  2AC4               	goto	l1609
  2828  0296                     l1593:	
  2829                           
  2830                           ;main.c: 215: LM49450_write(0x00, mute_config);
  2831  0296  083C               	movf	_mute_config,w
  2832  0297  00C5               	movwf	??_main
  2833  0298  0845               	movf	??_main,w
  2834  0299  00F1               	movwf	LM49450_write@data
  2835  029A  3000               	movlw	0
  2836  029B  3184  2455  3180   	fcall	_LM49450_write
  2837  029E                     l1595:	
  2838                           
  2839                           ;main.c: 216: mute_state = 3;
  2840  029E  3003               	movlw	3
  2841  029F  0140               	movlb	0	; select bank0
  2842  02A0  00C5               	movwf	??_main
  2843  02A1  0845               	movf	??_main,w
  2844  02A2  00BB               	movwf	_mute_state
  2845                           
  2846                           ;main.c: 217: break;
  2847  02A3  2AC4               	goto	l1609
  2848  02A4                     l1597:	
  2849                           
  2850                           ;main.c: 222: mute_state = 0;
  2851  02A4  01BB               	clrf	_mute_state
  2852                           
  2853                           ;main.c: 223: }
  2854  02A5  2AC4               	goto	l1609
  2855  02A6                     l1599:	
  2856  02A6  083B               	movf	_mute_state,w
  2857                           
  2858                           ; Switch size 1, requested type "simple"
  2859                           ; Number of cases is 4, Range of values is 0 to 3
  2860                           ; switch strategies available:
  2861                           ; Name         Instructions Cycles
  2862                           ; simple_byte           13     7 (average)
  2863                           ; direct_byte           14     6 (fixed)
  2864                           ; jumptable            260     6 (fixed)
  2865                           ;	Chosen strategy is simple_byte
  2866  02A7  3A00               	xorlw	0	; case 0
  2867  02A8  1903               	skipnz
  2868  02A9  2A89               	goto	l1589
  2869  02AA  3A01               	xorlw	1	; case 1
  2870  02AB  1903               	skipnz
  2871  02AC  2AC4               	goto	l1609
  2872  02AD  3A03               	xorlw	3	; case 2
  2873  02AE  1903               	skipnz
  2874  02AF  2A96               	goto	l1593
  2875  02B0  3A01               	xorlw	1	; case 3
  2876  02B1  1903               	skipnz
  2877  02B2  2AC4               	goto	l1609
  2878  02B3  2AA4               	goto	l1597
  2879  02B4                     l1601:	
  2880                           
  2881                           ;main.c: 225: else {;main.c: 226: if(mute_state == 1) {
  2882  02B4  033B               	decf	_mute_state,w
  2883  02B5  1D03               	btfss	3,2
  2884  02B6  2AB8               	goto	u1261
  2885  02B7  2AB9               	goto	u1260
  2886  02B8                     u1261:	
  2887  02B8  2ABD               	goto	l1605
  2888  02B9                     u1260:	
  2889  02B9                     l1603:	
  2890                           
  2891                           ;main.c: 227: mute_state = 2;
  2892  02B9  3002               	movlw	2
  2893  02BA  00C5               	movwf	??_main
  2894  02BB  0845               	movf	??_main,w
  2895  02BC  00BB               	movwf	_mute_state
  2896  02BD                     l1605:	
  2897                           
  2898                           ;main.c: 228: };main.c: 229: if(mute_state == 3) {
  2899  02BD  3003               	movlw	3
  2900  02BE  063B               	xorwf	_mute_state,w
  2901  02BF  1D03               	btfss	3,2
  2902  02C0  2AC2               	goto	u1271
  2903  02C1  2AC3               	goto	u1270
  2904  02C2                     u1271:	
  2905  02C2  2AC4               	goto	l1609
  2906  02C3                     u1270:	
  2907  02C3  2AA4               	goto	l1597
  2908  02C4                     l1609:	
  2909                           
  2910                           ;main.c: 231: };main.c: 232: };main.c: 235: if((volume_sp != volume_sp_prev) && mute_sta
      +                          te == 0) {
  2911  02C4  0849               	movf	_volume_sp,w
  2912  02C5  0648               	xorwf	_volume_sp_prev,w
  2913  02C6  1903               	skipnz
  2914  02C7  2AC9               	goto	u1281
  2915  02C8  2ACA               	goto	u1280
  2916  02C9                     u1281:	
  2917  02C9  2AEF               	goto	l1621
  2918  02CA                     u1280:	
  2919  02CA                     l1611:	
  2920  02CA  083B               	movf	_mute_state,w
  2921  02CB  1D03               	btfss	3,2
  2922  02CC  2ACE               	goto	u1291
  2923  02CD  2ACF               	goto	u1290
  2924  02CE                     u1291:	
  2925  02CE  2AEF               	goto	l1621
  2926  02CF                     u1290:	
  2927  02CF                     l1613:	
  2928                           
  2929                           ;main.c: 236: LM49450_write(0x08, volume_sp);
  2930  02CF  0849               	movf	_volume_sp,w
  2931  02D0  00C5               	movwf	??_main
  2932  02D1  0845               	movf	??_main,w
  2933  02D2  00F1               	movwf	LM49450_write@data
  2934  02D3  3008               	movlw	8
  2935  02D4  3184  2455  3180   	fcall	_LM49450_write
  2936  02D7                     l1615:	
  2937                           
  2938                           ;main.c: 237: if(volume_sp == 0) {
  2939  02D7  0140               	movlb	0	; select bank0
  2940  02D8  0849               	movf	_volume_sp,w
  2941  02D9  1D03               	btfss	3,2
  2942  02DA  2ADC               	goto	u1301
  2943  02DB  2ADD               	goto	u1300
  2944  02DC                     u1301:	
  2945  02DC  2AE7               	goto	l1619
  2946  02DD                     u1300:	
  2947  02DD                     l1617:	
  2948                           
  2949                           ;main.c: 238: LM49450_write(0x00, (mute_config | 0b00000100));
  2950  02DD  083C               	movf	_mute_config,w
  2951  02DE  3804               	iorlw	4
  2952  02DF  00C5               	movwf	??_main
  2953  02E0  0845               	movf	??_main,w
  2954  02E1  00F1               	movwf	LM49450_write@data
  2955  02E2  3000               	movlw	0
  2956  02E3  3184  2455  3180   	fcall	_LM49450_write
  2957                           
  2958                           ;main.c: 239: }
  2959  02E6  2AEF               	goto	l1621
  2960  02E7                     l1619:	
  2961                           
  2962                           ;main.c: 240: else {;main.c: 241: LM49450_write(0x00, mute_config);
  2963  02E7  083C               	movf	_mute_config,w
  2964  02E8  00C5               	movwf	??_main
  2965  02E9  0845               	movf	??_main,w
  2966  02EA  00F1               	movwf	LM49450_write@data
  2967  02EB  3000               	movlw	0
  2968  02EC  3184  2455  3180   	fcall	_LM49450_write
  2969  02EF                     l1621:	
  2970                           
  2971                           ;main.c: 242: };main.c: 243: };main.c: 245: if((volume_hp != volume_hp_prev) && mute_sta
      +                          te == 0) {
  2972  02EF  0140               	movlb	0	; select bank0
  2973  02F0  0847               	movf	_volume_hp,w
  2974  02F1  0646               	xorwf	_volume_hp_prev,w
  2975  02F2  1903               	skipnz
  2976  02F3  2AF5               	goto	u1311
  2977  02F4  2AF6               	goto	u1310
  2978  02F5                     u1311:	
  2979  02F5  2B1B               	goto	l1633
  2980  02F6                     u1310:	
  2981  02F6                     l1623:	
  2982  02F6  083B               	movf	_mute_state,w
  2983  02F7  1D03               	btfss	3,2
  2984  02F8  2AFA               	goto	u1321
  2985  02F9  2AFB               	goto	u1320
  2986  02FA                     u1321:	
  2987  02FA  2B1B               	goto	l1633
  2988  02FB                     u1320:	
  2989  02FB                     l1625:	
  2990                           
  2991                           ;main.c: 246: LM49450_write(0x07, volume_hp);
  2992  02FB  0847               	movf	_volume_hp,w
  2993  02FC  00C5               	movwf	??_main
  2994  02FD  0845               	movf	??_main,w
  2995  02FE  00F1               	movwf	LM49450_write@data
  2996  02FF  3007               	movlw	7
  2997  0300  3184  2455  3180   	fcall	_LM49450_write
  2998  0303                     l1627:	
  2999                           
  3000                           ;main.c: 247: if(volume_hp == 0) {
  3001  0303  0140               	movlb	0	; select bank0
  3002  0304  0847               	movf	_volume_hp,w
  3003  0305  1D03               	btfss	3,2
  3004  0306  2B08               	goto	u1331
  3005  0307  2B09               	goto	u1330
  3006  0308                     u1331:	
  3007  0308  2B13               	goto	l1631
  3008  0309                     u1330:	
  3009  0309                     l1629:	
  3010                           
  3011                           ;main.c: 248: LM49450_write(0x00, (mute_config | 0b00000100));
  3012  0309  083C               	movf	_mute_config,w
  3013  030A  3804               	iorlw	4
  3014  030B  00C5               	movwf	??_main
  3015  030C  0845               	movf	??_main,w
  3016  030D  00F1               	movwf	LM49450_write@data
  3017  030E  3000               	movlw	0
  3018  030F  3184  2455  3180   	fcall	_LM49450_write
  3019                           
  3020                           ;main.c: 249: }
  3021  0312  2B1B               	goto	l1633
  3022  0313                     l1631:	
  3023                           
  3024                           ;main.c: 250: else {;main.c: 251: LM49450_write(0x00, mute_config);
  3025  0313  083C               	movf	_mute_config,w
  3026  0314  00C5               	movwf	??_main
  3027  0315  0845               	movf	??_main,w
  3028  0316  00F1               	movwf	LM49450_write@data
  3029  0317  3000               	movlw	0
  3030  0318  3184  2455  3180   	fcall	_LM49450_write
  3031  031B                     l1633:	
  3032                           
  3033                           ;main.c: 252: };main.c: 253: };main.c: 255: volume_sp_prev = volume_sp;
  3034  031B  0140               	movlb	0	; select bank0
  3035  031C  0849               	movf	_volume_sp,w
  3036  031D  00C5               	movwf	??_main
  3037  031E  0845               	movf	??_main,w
  3038  031F  00C8               	movwf	_volume_sp_prev
  3039  0320                     l1635:	
  3040                           
  3041                           ;main.c: 256: volume_hp_prev = volume_hp;
  3042  0320  0847               	movf	_volume_hp,w
  3043  0321  00C5               	movwf	??_main
  3044  0322  0845               	movf	??_main,w
  3045  0323  00C6               	movwf	_volume_hp_prev
  3046  0324  28AC               	goto	l1449
  3047  0325  3180  281C         	ljmp	start
  3048  0327                     __end_of_main:	
  3049                           
  3050                           	psect	text1
  3051  043F                     __ptext1:	
  3052 ;; *************** function _timer_diff *****************
  3053 ;; Defined at:
  3054 ;;		line 17 in file "time.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  t               4    0[COMMON] unsigned long 
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;		None
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  4    0[COMMON] unsigned long 
  3061 ;; Registers used:
  3062 ;;		wreg
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3068 ;;      Params:         4       0       0       0       0       0       0       0
  3069 ;;      Locals:         0       0       0       0       0       0       0       0
  3070 ;;      Temps:          4       0       0       0       0       0       0       0
  3071 ;;      Totals:         8       0       0       0       0       0       0       0
  3072 ;;Total ram usage:        8 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    1
  3075 ;; This function calls:
  3076 ;;		Nothing
  3077 ;; This function is called by:
  3078 ;;		_main
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           
  3083                           ;psect for function _timer_diff
  3084  043F                     _timer_diff:	
  3085  043F                     l1411:	
  3086                           ;incstack = 0
  3087                           ; Regs used in _timer_diff: [wreg]
  3088                           
  3089                           
  3090                           ;time.c: 18: return timer_counter - t;
  3091  043F  0870               	movf	timer_diff@t,w
  3092  0440  0140               	movlb	0	; select bank0
  3093  0441  0234               	subwf	_timer_counter,w
  3094  0442  00F4               	movwf	??_timer_diff
  3095  0443  0871               	movf	timer_diff@t+1,w
  3096  0444  3B35               	subwfb	_timer_counter+1,w
  3097  0445  00F5               	movwf	??_timer_diff+1
  3098  0446  0872               	movf	timer_diff@t+2,w
  3099  0447  3B36               	subwfb	_timer_counter+2,w
  3100  0448  00F6               	movwf	??_timer_diff+2
  3101  0449  0873               	movf	timer_diff@t+3,w
  3102  044A  3B37               	subwfb	_timer_counter+3,w
  3103  044B  00F7               	movwf	??_timer_diff+3
  3104  044C  0877               	movf	??_timer_diff+3,w
  3105  044D  00F3               	movwf	?_timer_diff+3
  3106  044E  0876               	movf	??_timer_diff+2,w
  3107  044F  00F2               	movwf	?_timer_diff+2
  3108  0450  0875               	movf	??_timer_diff+1,w
  3109  0451  00F1               	movwf	?_timer_diff+1
  3110  0452  0874               	movf	??_timer_diff,w
  3111  0453  00F0               	movwf	?_timer_diff
  3112  0454                     l260:	
  3113  0454  0008               	return
  3114  0455                     __end_of_timer_diff:	
  3115                           
  3116                           	psect	text2
  3117  0475                     __ptext2:	
  3118 ;; *************** function _get_time *****************
  3119 ;; Defined at:
  3120 ;;		line 13 in file "time.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;		None
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;		None
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  4    0[COMMON] unsigned long 
  3127 ;; Registers used:
  3128 ;;		wreg
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3134 ;;      Params:         4       0       0       0       0       0       0       0
  3135 ;;      Locals:         0       0       0       0       0       0       0       0
  3136 ;;      Temps:          0       0       0       0       0       0       0       0
  3137 ;;      Totals:         4       0       0       0       0       0       0       0
  3138 ;;Total ram usage:        4 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    1
  3141 ;; This function calls:
  3142 ;;		Nothing
  3143 ;; This function is called by:
  3144 ;;		_main
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           
  3149                           ;psect for function _get_time
  3150  0475                     _get_time:	
  3151  0475                     l1407:	
  3152                           ;incstack = 0
  3153                           ; Regs used in _get_time: [wreg]
  3154                           
  3155                           
  3156                           ;time.c: 14: return timer_counter;
  3157  0475  0140               	movlb	0	; select bank0
  3158  0476  0837               	movf	_timer_counter+3,w
  3159  0477  00F3               	movwf	?_get_time+3
  3160  0478  0836               	movf	_timer_counter+2,w
  3161  0479  00F2               	movwf	?_get_time+2
  3162  047A  0835               	movf	_timer_counter+1,w
  3163  047B  00F1               	movwf	?_get_time+1
  3164  047C  0834               	movf	_timer_counter,w
  3165  047D  00F0               	movwf	?_get_time
  3166  047E                     l257:	
  3167  047E  0008               	return
  3168  047F                     __end_of_get_time:	
  3169                           
  3170                           	psect	text3
  3171  0499                     __ptext3:	
  3172 ;; *************** function _PPS_unlock *****************
  3173 ;; Defined at:
  3174 ;;		line 11 in file "PPS.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;		None
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;		None
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      void 
  3181 ;; Registers used:
  3182 ;;		wreg, status,2
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3188 ;;      Params:         0       0       0       0       0       0       0       0
  3189 ;;      Locals:         0       0       0       0       0       0       0       0
  3190 ;;      Temps:          0       0       0       0       0       0       0       0
  3191 ;;      Totals:         0       0       0       0       0       0       0       0
  3192 ;;Total ram usage:        0 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    1
  3195 ;; This function calls:
  3196 ;;		Nothing
  3197 ;; This function is called by:
  3198 ;;		_main
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           
  3203                           ;psect for function _PPS_unlock
  3204  0499                     _PPS_unlock:	
  3205  0499                     l1337:	
  3206                           ;incstack = 0
  3207                           ; Regs used in _PPS_unlock: [wreg+status,2]
  3208                           
  3209                           
  3210                           ;PPS.c: 12: PPSLOCK = 0x55;
  3211  0499  3055               	movlw	85
  3212  049A  017D               	movlb	61	; select bank61
  3213  049B  008F               	movwf	15	;volsfr
  3214                           
  3215                           ;PPS.c: 13: PPSLOCK = 0xAA;
  3216  049C  30AA               	movlw	170
  3217  049D  008F               	movwf	15	;volsfr
  3218  049E                     l1339:	
  3219                           
  3220                           ;PPS.c: 14: PPSLOCK = 0;
  3221  049E  018F               	clrf	15	;volsfr
  3222  049F                     l185:	
  3223  049F  0008               	return
  3224  04A0                     __end_of_PPS_unlock:	
  3225                           
  3226                           	psect	text4
  3227  0489                     __ptext4:	
  3228 ;; *************** function _PPS_lock *****************
  3229 ;; Defined at:
  3230 ;;		line 17 in file "PPS.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;		None
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;		None
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      void 
  3237 ;; Registers used:
  3238 ;;		wreg
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3244 ;;      Params:         0       0       0       0       0       0       0       0
  3245 ;;      Locals:         0       0       0       0       0       0       0       0
  3246 ;;      Temps:          0       0       0       0       0       0       0       0
  3247 ;;      Totals:         0       0       0       0       0       0       0       0
  3248 ;;Total ram usage:        0 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    1
  3251 ;; This function calls:
  3252 ;;		Nothing
  3253 ;; This function is called by:
  3254 ;;		_main
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           
  3259                           ;psect for function _PPS_lock
  3260  0489                     _PPS_lock:	
  3261  0489                     l1341:	
  3262                           ;incstack = 0
  3263                           ; Regs used in _PPS_lock: [wreg]
  3264                           
  3265                           
  3266                           ;PPS.c: 18: PPSLOCK = 0x55;
  3267  0489  3055               	movlw	85
  3268  048A  017D               	movlb	61	; select bank61
  3269  048B  008F               	movwf	15	;volsfr
  3270                           
  3271                           ;PPS.c: 19: PPSLOCK = 0xAA;
  3272  048C  30AA               	movlw	170
  3273  048D  008F               	movwf	15	;volsfr
  3274                           
  3275                           ;PPS.c: 20: PPSLOCK = 1;
  3276  048E  3001               	movlw	1
  3277  048F  008F               	movwf	15	;volsfr
  3278  0490                     l188:	
  3279  0490  0008               	return
  3280  0491                     __end_of_PPS_lock:	
  3281                           
  3282                           	psect	text5
  3283  0420                     __ptext5:	
  3284 ;; *************** function _PIC_SETUP *****************
  3285 ;; Defined at:
  3286 ;;		line 16 in file "main.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;		None
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      void 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3300 ;;      Params:         0       0       0       0       0       0       0       0
  3301 ;;      Locals:         0       0       0       0       0       0       0       0
  3302 ;;      Temps:          0       0       0       0       0       0       0       0
  3303 ;;      Totals:         0       0       0       0       0       0       0       0
  3304 ;;Total ram usage:        0 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    1
  3307 ;; This function calls:
  3308 ;;		Nothing
  3309 ;; This function is called by:
  3310 ;;		_main
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           
  3315                           ;psect for function _PIC_SETUP
  3316  0420                     _PIC_SETUP:	
  3317  0420                     l1311:	
  3318                           ;incstack = 0
  3319                           ; Regs used in _PIC_SETUP: [wreg+status,2+status,0]
  3320                           
  3321                           
  3322                           ;main.c: 19: TRISA = 0xFF;
  3323  0420  30FF               	movlw	255
  3324  0421  0140               	movlb	0	; select bank0
  3325  0422  0092               	movwf	18	;volatile
  3326                           
  3327                           ;main.c: 20: TRISC = 0xFF;
  3328  0423  30FF               	movlw	255
  3329  0424  0094               	movwf	20	;volatile
  3330  0425                     l1313:	
  3331                           
  3332                           ;main.c: 21: ANSELA = 0;
  3333  0425  017E               	movlb	62	; select bank62
  3334  0426  01B8               	clrf	56	;volatile
  3335  0427                     l1315:	
  3336                           
  3337                           ;main.c: 22: ANSELC = 0;
  3338  0427  01CE               	clrf	78	;volatile
  3339                           
  3340                           ;main.c: 23: WPUA = 0b00110000;
  3341  0428  3030               	movlw	48
  3342  0429  00B9               	movwf	57	;volatile
  3343                           
  3344                           ;main.c: 24: WPUC = 0b00011000;
  3345  042A  3018               	movlw	24
  3346  042B  00CF               	movwf	79	;volatile
  3347  042C                     l1317:	
  3348                           
  3349                           ;main.c: 27: T1CONbits.CKPS = 0b00;
  3350  042C  30CF               	movlw	-49
  3351  042D  0144               	movlb	4	; select bank4
  3352  042E  058E               	andwf	14,f	;volatile
  3353  042F                     l1319:	
  3354                           
  3355                           ;main.c: 28: T1CONbits.nSYNC = 0;
  3356  042F  110E               	bcf	14,2	;volatile
  3357  0430                     l1321:	
  3358                           
  3359                           ;main.c: 29: T1CONbits.RD16 = 1;
  3360  0430  148E               	bsf	14,1	;volatile
  3361  0431                     l1323:	
  3362                           
  3363                           ;main.c: 30: T1GCONbits.GE = 0;
  3364  0431  138F               	bcf	15,7	;volatile
  3365  0432                     l1325:	
  3366                           
  3367                           ;main.c: 31: T1CLK = 0b00000100;
  3368  0432  3004               	movlw	4
  3369  0433  0091               	movwf	17	;volatile
  3370  0434                     l1327:	
  3371                           
  3372                           ;main.c: 32: TMR1 = 65228;
  3373  0434  30FE               	movlw	254
  3374  0435  008D               	movwf	13	;volatile
  3375  0436  30CC               	movlw	204
  3376  0437  008C               	movwf	12	;volatile
  3377  0438                     l1329:	
  3378                           
  3379                           ;main.c: 33: PIE4bits.TMR1IE = 1;
  3380  0438  014E               	movlb	14	; select bank14
  3381  0439  141A               	bsf	26,0	;volatile
  3382  043A                     l1331:	
  3383                           
  3384                           ;main.c: 34: T1CONbits.ON = 1;
  3385  043A  0144               	movlb	4	; select bank4
  3386  043B  140E               	bsf	14,0	;volatile
  3387  043C                     l1333:	
  3388                           
  3389                           ;main.c: 36: INTCONbits.GIE = 1;
  3390  043C  178B               	bsf	11,7	;volatile
  3391  043D                     l1335:	
  3392                           
  3393                           ;main.c: 37: INTCONbits.PEIE = 1;
  3394  043D  170B               	bsf	11,6	;volatile
  3395  043E                     l69:	
  3396  043E  0008               	return
  3397  043F                     __end_of_PIC_SETUP:	
  3398                           
  3399                           	psect	text6
  3400  047F                     __ptext6:	
  3401 ;; *************** function _LM49450_analog_init *****************
  3402 ;; Defined at:
  3403 ;;		line 90 in file "LM49450.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;		None
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  reg0_analog     1    0        unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      unsigned char 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2, status,0, pclath, cstack
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3417 ;;      Params:         0       0       0       0       0       0       0       0
  3418 ;;      Locals:         1       0       0       0       0       0       0       0
  3419 ;;      Temps:          1       0       0       0       0       0       0       0
  3420 ;;      Totals:         2       0       0       0       0       0       0       0
  3421 ;;Total ram usage:        2 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    4
  3424 ;; This function calls:
  3425 ;;		_LM49450_write
  3426 ;; This function is called by:
  3427 ;;		_main
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           
  3432                           ;psect for function _LM49450_analog_init
  3433  047F                     _LM49450_analog_init:	
  3434  047F                     l1383:	
  3435                           ;incstack = 0
  3436                           ; Regs used in _LM49450_analog_init: [wreg+status,2+status,0+pclath+cstack]
  3437                           
  3438  047F                     l1385:	
  3439                           
  3440                           ;LM49450.c: 97: LM49450_write(0x00, reg0_analog);
  3441  047F  302B               	movlw	43
  3442  0480  00F3               	movwf	??_LM49450_analog_init
  3443  0481  0873               	movf	??_LM49450_analog_init,w
  3444  0482  00F1               	movwf	LM49450_write@data
  3445  0483  3000               	movlw	0
  3446  0484  3184  2455  3184   	fcall	_LM49450_write
  3447  0487                     l1387:	
  3448                           
  3449                           ;LM49450.c: 99: return reg0_analog;
  3450  0487  302B               	movlw	43
  3451  0488                     l281:	
  3452  0488  0008               	return
  3453  0489                     __end_of_LM49450_analog_init:	
  3454                           
  3455                           	psect	text7
  3456  03D6                     __ptext7:	
  3457 ;; *************** function _LM49450_Wii_init *****************
  3458 ;; Defined at:
  3459 ;;		line 46 in file "LM49450.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;		None
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  reg0_Wii        1    0        unsigned char 
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      unsigned char 
  3466 ;; Registers used:
  3467 ;;		wreg, status,2, status,0, pclath, cstack
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3473 ;;      Params:         0       0       0       0       0       0       0       0
  3474 ;;      Locals:         1       0       0       0       0       0       0       0
  3475 ;;      Temps:          1       0       0       0       0       0       0       0
  3476 ;;      Totals:         2       0       0       0       0       0       0       0
  3477 ;;Total ram usage:        2 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:    4
  3480 ;; This function calls:
  3481 ;;		_LM49450_write
  3482 ;; This function is called by:
  3483 ;;		_main
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           
  3488                           ;psect for function _LM49450_Wii_init
  3489  03D6                     _LM49450_Wii_init:	
  3490  03D6                     l1351:	
  3491                           ;incstack = 0
  3492                           ; Regs used in _LM49450_Wii_init: [wreg+status,2+status,0+pclath+cstack]
  3493                           
  3494  03D6                     l1353:	
  3495                           
  3496                           ;LM49450.c: 52: LM49450_write(0x00, reg0_Wii);
  3497  03D6  3029               	movlw	41
  3498  03D7  00F3               	movwf	??_LM49450_Wii_init
  3499  03D8  0873               	movf	??_LM49450_Wii_init,w
  3500  03D9  00F1               	movwf	LM49450_write@data
  3501  03DA  3000               	movlw	0
  3502  03DB  3184  2455  3183   	fcall	_LM49450_write
  3503  03DE                     l1355:	
  3504                           
  3505                           ;LM49450.c: 55: LM49450_write(0x01, 0b00000001);
  3506  03DE  01F1               	clrf	LM49450_write@data
  3507  03DF  0AF1               	incf	LM49450_write@data,f
  3508  03E0  3001               	movlw	1
  3509  03E1  3184  2455  3183   	fcall	_LM49450_write
  3510  03E4                     l1357:	
  3511                           
  3512                           ;LM49450.c: 56: LM49450_write(0x02, 0x4B);
  3513  03E4  304B               	movlw	75
  3514  03E5  00F3               	movwf	??_LM49450_Wii_init
  3515  03E6  0873               	movf	??_LM49450_Wii_init,w
  3516  03E7  00F1               	movwf	LM49450_write@data
  3517  03E8  3002               	movlw	2
  3518  03E9  3184  2455  3183   	fcall	_LM49450_write
  3519  03EC                     l1359:	
  3520                           
  3521                           ;LM49450.c: 61: LM49450_write(0x03, 0b01110001);
  3522  03EC  3071               	movlw	113
  3523  03ED  00F3               	movwf	??_LM49450_Wii_init
  3524  03EE  0873               	movf	??_LM49450_Wii_init,w
  3525  03EF  00F1               	movwf	LM49450_write@data
  3526  03F0  3003               	movlw	3
  3527  03F1  3184  2455  3183   	fcall	_LM49450_write
  3528  03F4                     l1361:	
  3529                           
  3530                           ;LM49450.c: 63: LM49450_write(0x04, 0b00000000);
  3531  03F4  01F1               	clrf	LM49450_write@data
  3532  03F5  3004               	movlw	4
  3533  03F6  3184  2455  3183   	fcall	_LM49450_write
  3534  03F9                     l1363:	
  3535                           
  3536                           ;LM49450.c: 65: return reg0_Wii;
  3537  03F9  3029               	movlw	41
  3538  03FA                     l275:	
  3539  03FA  0008               	return
  3540  03FB                     __end_of_LM49450_Wii_init:	
  3541                           
  3542                           	psect	text8
  3543  03AF                     __ptext8:	
  3544 ;; *************** function _LM49450_PS2_init *****************
  3545 ;; Defined at:
  3546 ;;		line 68 in file "LM49450.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;		None
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  reg0_PS2        1    0        unsigned char 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      unsigned char 
  3553 ;; Registers used:
  3554 ;;		wreg, status,2, status,0, pclath, cstack
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3560 ;;      Params:         0       0       0       0       0       0       0       0
  3561 ;;      Locals:         1       0       0       0       0       0       0       0
  3562 ;;      Temps:          1       0       0       0       0       0       0       0
  3563 ;;      Totals:         2       0       0       0       0       0       0       0
  3564 ;;Total ram usage:        2 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    4
  3567 ;; This function calls:
  3568 ;;		_LM49450_write
  3569 ;; This function is called by:
  3570 ;;		_main
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           
  3575                           ;psect for function _LM49450_PS2_init
  3576  03AF                     _LM49450_PS2_init:	
  3577  03AF                     l1367:	
  3578                           ;incstack = 0
  3579                           ; Regs used in _LM49450_PS2_init: [wreg+status,2+status,0+pclath+cstack]
  3580                           
  3581  03AF                     l1369:	
  3582                           
  3583                           ;LM49450.c: 74: LM49450_write(0x00, reg0_PS2);
  3584  03AF  3029               	movlw	41
  3585  03B0  00F3               	movwf	??_LM49450_PS2_init
  3586  03B1  0873               	movf	??_LM49450_PS2_init,w
  3587  03B2  00F1               	movwf	LM49450_write@data
  3588  03B3  3000               	movlw	0
  3589  03B4  3184  2455  3183   	fcall	_LM49450_write
  3590  03B7                     l1371:	
  3591                           
  3592                           ;LM49450.c: 77: LM49450_write(0x01, 0b00000010);
  3593  03B7  3002               	movlw	2
  3594  03B8  00F3               	movwf	??_LM49450_PS2_init
  3595  03B9  0873               	movf	??_LM49450_PS2_init,w
  3596  03BA  00F1               	movwf	LM49450_write@data
  3597  03BB  3001               	movlw	1
  3598  03BC  3184  2455  3183   	fcall	_LM49450_write
  3599  03BF                     l1373:	
  3600                           
  3601                           ;LM49450.c: 79: LM49450_write(0x02, 0x4B);
  3602  03BF  304B               	movlw	75
  3603  03C0  00F3               	movwf	??_LM49450_PS2_init
  3604  03C1  0873               	movf	??_LM49450_PS2_init,w
  3605  03C2  00F1               	movwf	LM49450_write@data
  3606  03C3  3002               	movlw	2
  3607  03C4  3184  2455  3183   	fcall	_LM49450_write
  3608  03C7                     l1375:	
  3609                           
  3610                           ;LM49450.c: 83: LM49450_write(0x03, 0b01110000);
  3611  03C7  3070               	movlw	112
  3612  03C8  00F3               	movwf	??_LM49450_PS2_init
  3613  03C9  0873               	movf	??_LM49450_PS2_init,w
  3614  03CA  00F1               	movwf	LM49450_write@data
  3615  03CB  3003               	movlw	3
  3616  03CC  3184  2455  3183   	fcall	_LM49450_write
  3617  03CF                     l1377:	
  3618                           
  3619                           ;LM49450.c: 85: LM49450_write(0x04, 0b00000000);
  3620  03CF  01F1               	clrf	LM49450_write@data
  3621  03D0  3004               	movlw	4
  3622  03D1  3184  2455  3183   	fcall	_LM49450_write
  3623  03D4                     l1379:	
  3624                           
  3625                           ;LM49450.c: 87: return reg0_PS2;
  3626  03D4  3029               	movlw	41
  3627  03D5                     l278:	
  3628  03D5  0008               	return
  3629  03D6                     __end_of_LM49450_PS2_init:	
  3630                           
  3631                           	psect	text9
  3632  03FB                     __ptext9:	
  3633 ;; *************** function _LM49450_DC_init *****************
  3634 ;; Defined at:
  3635 ;;		line 22 in file "LM49450.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;		None
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;  reg0_DC         1    0        unsigned char 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      unsigned char 
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0, pclath, cstack
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3649 ;;      Params:         0       0       0       0       0       0       0       0
  3650 ;;      Locals:         1       0       0       0       0       0       0       0
  3651 ;;      Temps:          1       0       0       0       0       0       0       0
  3652 ;;      Totals:         2       0       0       0       0       0       0       0
  3653 ;;Total ram usage:        2 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    4
  3656 ;; This function calls:
  3657 ;;		_LM49450_write
  3658 ;; This function is called by:
  3659 ;;		_main
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           
  3664                           ;psect for function _LM49450_DC_init
  3665  03FB                     _LM49450_DC_init:	
  3666  03FB                     l1391:	
  3667                           ;incstack = 0
  3668                           ; Regs used in _LM49450_DC_init: [wreg+status,2+status,0+pclath+cstack]
  3669                           
  3670  03FB                     l1393:	
  3671                           
  3672                           ;LM49450.c: 29: LM49450_write(0x00, reg0_DC);
  3673  03FB  3029               	movlw	41
  3674  03FC  00F3               	movwf	??_LM49450_DC_init
  3675  03FD  0873               	movf	??_LM49450_DC_init,w
  3676  03FE  00F1               	movwf	LM49450_write@data
  3677  03FF  3000               	movlw	0
  3678  0400  3184  2455  3183   	fcall	_LM49450_write
  3679  0403                     l1395:	
  3680                           
  3681                           ;LM49450.c: 32: LM49450_write(0x01, 0b00000001);
  3682  0403  01F1               	clrf	LM49450_write@data
  3683  0404  0AF1               	incf	LM49450_write@data,f
  3684  0405  3001               	movlw	1
  3685  0406  3184  2455  3183   	fcall	_LM49450_write
  3686  0409                     l1397:	
  3687                           
  3688                           ;LM49450.c: 38: LM49450_write(0x04, 0b00000000);
  3689  0409  01F1               	clrf	LM49450_write@data
  3690  040A  3004               	movlw	4
  3691  040B  3184  2455  3183   	fcall	_LM49450_write
  3692  040E                     l1399:	
  3693                           
  3694                           ;LM49450.c: 40: LM49450_write(0x02, 0x44);
  3695  040E  3044               	movlw	68
  3696  040F  00F3               	movwf	??_LM49450_DC_init
  3697  0410  0873               	movf	??_LM49450_DC_init,w
  3698  0411  00F1               	movwf	LM49450_write@data
  3699  0412  3002               	movlw	2
  3700  0413  3184  2455  3183   	fcall	_LM49450_write
  3701  0416                     l1401:	
  3702                           
  3703                           ;LM49450.c: 41: LM49450_write(0x03, 0b00000010);
  3704  0416  3002               	movlw	2
  3705  0417  00F3               	movwf	??_LM49450_DC_init
  3706  0418  0873               	movf	??_LM49450_DC_init,w
  3707  0419  00F1               	movwf	LM49450_write@data
  3708  041A  3003               	movlw	3
  3709  041B  3184  2455  3183   	fcall	_LM49450_write
  3710  041E                     l1403:	
  3711                           
  3712                           ;LM49450.c: 43: return reg0_DC;
  3713  041E  3029               	movlw	41
  3714  041F                     l272:	
  3715  041F  0008               	return
  3716  0420                     __end_of_LM49450_DC_init:	
  3717                           
  3718                           	psect	text10
  3719  0455                     __ptext10:	
  3720 ;; *************** function _LM49450_write *****************
  3721 ;; Defined at:
  3722 ;;		line 14 in file "LM49450.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;  reg             1    wreg     unsigned char 
  3725 ;;  data            1    1[COMMON] unsigned char 
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;  reg             1    2[COMMON] unsigned char 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0, pclath, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3737 ;;      Params:         1       0       0       0       0       0       0       0
  3738 ;;      Locals:         1       0       0       0       0       0       0       0
  3739 ;;      Temps:          0       0       0       0       0       0       0       0
  3740 ;;      Totals:         2       0       0       0       0       0       0       0
  3741 ;;Total ram usage:        2 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    3
  3744 ;; This function calls:
  3745 ;;		_I2C_Master_Start
  3746 ;;		_I2C_Master_Stop
  3747 ;;		_I2C_Master_Write
  3748 ;; This function is called by:
  3749 ;;		_main
  3750 ;;		_LM49450_DC_init
  3751 ;;		_LM49450_Wii_init
  3752 ;;		_LM49450_PS2_init
  3753 ;;		_LM49450_analog_init
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           
  3758                           ;psect for function _LM49450_write
  3759  0455                     _LM49450_write:	
  3760                           
  3761                           ;incstack = 0
  3762                           ; Regs used in _LM49450_write: [wreg+status,2+status,0+pclath+cstack]
  3763                           ;LM49450_write@reg stored from wreg
  3764  0455  00F2               	movwf	LM49450_write@reg
  3765  0456                     l1285:	
  3766                           
  3767                           ;LM49450.c: 15: I2C_Master_Start();
  3768  0456  3184  24AC  3184   	fcall	_I2C_Master_Start
  3769                           
  3770                           ;LM49450.c: 16: I2C_Master_Write(0b1111101 << 1);
  3771  0459  30FA               	movlw	250
  3772  045A  3184  2491  3184   	fcall	_I2C_Master_Write
  3773                           
  3774                           ;LM49450.c: 17: I2C_Master_Write(reg);
  3775  045D  0872               	movf	LM49450_write@reg,w
  3776  045E  3184  2491  3184   	fcall	_I2C_Master_Write
  3777                           
  3778                           ;LM49450.c: 18: I2C_Master_Write(data);
  3779  0461  0871               	movf	LM49450_write@data,w
  3780  0462  3184  2491  3184   	fcall	_I2C_Master_Write
  3781                           
  3782                           ;LM49450.c: 19: I2C_Master_Stop();
  3783  0465  3184  24A6  3184   	fcall	_I2C_Master_Stop
  3784  0468                     l269:	
  3785  0468  0008               	return
  3786  0469                     __end_of_LM49450_write:	
  3787                           
  3788                           	psect	text11
  3789  0491                     __ptext11:	
  3790 ;; *************** function _I2C_Master_Write *****************
  3791 ;; Defined at:
  3792 ;;		line 76 in file "I2C.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;  data            1    wreg     unsigned char 
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  data            1    0[COMMON] unsigned char 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0, pclath, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3806 ;;      Params:         0       0       0       0       0       0       0       0
  3807 ;;      Locals:         1       0       0       0       0       0       0       0
  3808 ;;      Temps:          0       0       0       0       0       0       0       0
  3809 ;;      Totals:         1       0       0       0       0       0       0       0
  3810 ;;Total ram usage:        1 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    2
  3813 ;; This function calls:
  3814 ;;		_I2C_Master_Wait
  3815 ;; This function is called by:
  3816 ;;		_LM49450_write
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           
  3821                           ;psect for function _I2C_Master_Write
  3822  0491                     _I2C_Master_Write:	
  3823                           
  3824                           ;incstack = 0
  3825                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  3826                           ;I2C_Master_Write@data stored from wreg
  3827  0491  00F0               	movwf	I2C_Master_Write@data
  3828  0492                     l1281:	
  3829                           
  3830                           ;I2C.c: 78: I2C_Master_Wait();
  3831  0492  3184  2469  3184   	fcall	_I2C_Master_Wait
  3832  0495                     l1283:	
  3833                           
  3834                           ;I2C.c: 79: SSP1BUF = data;
  3835  0495  0870               	movf	I2C_Master_Write@data,w
  3836  0496  0143               	movlb	3	; select bank3
  3837  0497  008C               	movwf	12	;volatile
  3838  0498                     l241:	
  3839  0498  0008               	return
  3840  0499                     __end_of_I2C_Master_Write:	
  3841                           
  3842                           	psect	text12
  3843  04A6                     __ptext12:	
  3844 ;; *************** function _I2C_Master_Stop *****************
  3845 ;; Defined at:
  3846 ;;		line 70 in file "I2C.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;		None
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;		None
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, status,2, status,0, pclath, cstack
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3860 ;;      Params:         0       0       0       0       0       0       0       0
  3861 ;;      Locals:         0       0       0       0       0       0       0       0
  3862 ;;      Temps:          0       0       0       0       0       0       0       0
  3863 ;;      Totals:         0       0       0       0       0       0       0       0
  3864 ;;Total ram usage:        0 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    2
  3867 ;; This function calls:
  3868 ;;		_I2C_Master_Wait
  3869 ;; This function is called by:
  3870 ;;		_LM49450_write
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           
  3875                           ;psect for function _I2C_Master_Stop
  3876  04A6                     _I2C_Master_Stop:	
  3877  04A6                     l1277:	
  3878                           ;incstack = 0
  3879                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3880                           
  3881                           
  3882                           ;I2C.c: 72: I2C_Master_Wait();
  3883  04A6  3184  2469  3184   	fcall	_I2C_Master_Wait
  3884  04A9                     l1279:	
  3885                           
  3886                           ;I2C.c: 73: SSP1CON2bits.PEN = 1;
  3887  04A9  0143               	movlb	3	; select bank3
  3888  04AA  1511               	bsf	17,2	;volatile
  3889  04AB                     l238:	
  3890  04AB  0008               	return
  3891  04AC                     __end_of_I2C_Master_Stop:	
  3892                           
  3893                           	psect	text13
  3894  04AC                     __ptext13:	
  3895 ;; *************** function _I2C_Master_Start *****************
  3896 ;; Defined at:
  3897 ;;		line 58 in file "I2C.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;		None
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      void 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0, pclath, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3911 ;;      Params:         0       0       0       0       0       0       0       0
  3912 ;;      Locals:         0       0       0       0       0       0       0       0
  3913 ;;      Temps:          0       0       0       0       0       0       0       0
  3914 ;;      Totals:         0       0       0       0       0       0       0       0
  3915 ;;Total ram usage:        0 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    2
  3918 ;; This function calls:
  3919 ;;		_I2C_Master_Wait
  3920 ;; This function is called by:
  3921 ;;		_LM49450_write
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           
  3926                           ;psect for function _I2C_Master_Start
  3927  04AC                     _I2C_Master_Start:	
  3928  04AC                     l1273:	
  3929                           ;incstack = 0
  3930                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  3931                           
  3932                           
  3933                           ;I2C.c: 60: I2C_Master_Wait();
  3934  04AC  3184  2469  3184   	fcall	_I2C_Master_Wait
  3935  04AF                     l1275:	
  3936                           
  3937                           ;I2C.c: 61: SSP1CON2bits.SEN = 1;
  3938  04AF  0143               	movlb	3	; select bank3
  3939  04B0  1411               	bsf	17,0	;volatile
  3940  04B1                     l232:	
  3941  04B1  0008               	return
  3942  04B2                     __end_of_I2C_Master_Start:	
  3943                           
  3944                           	psect	text14
  3945  0469                     __ptext14:	
  3946 ;; *************** function _I2C_Master_Wait *****************
  3947 ;; Defined at:
  3948 ;;		line 53 in file "I2C.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;		None
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;		None
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      void 
  3955 ;; Registers used:
  3956 ;;		wreg, status,2
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3962 ;;      Params:         0       0       0       0       0       0       0       0
  3963 ;;      Locals:         0       0       0       0       0       0       0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0       0
  3965 ;;      Totals:         0       0       0       0       0       0       0       0
  3966 ;;Total ram usage:        0 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    1
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_I2C_Master_Start
  3973 ;;		_I2C_Master_Stop
  3974 ;;		_I2C_Master_Write
  3975 ;;		_I2C_Master_Repeated_Start
  3976 ;;		_I2C_Master_Read
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function _I2C_Master_Wait
  3982  0469                     _I2C_Master_Wait:	
  3983  0469                     l1269:	
  3984                           ;incstack = 0
  3985                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  3986                           
  3987  0469                     l226:	
  3988                           ;I2C.c: 55: while ((SSP1STAT & 0x04) || (SSP1CON2 & 0x1F));
  3989                           
  3990  0469  0143               	movlb	3	; select bank3
  3991  046A  190F               	btfsc	15,2	;volatile
  3992  046B  2C6D               	goto	u701
  3993  046C  2C6E               	goto	u700
  3994  046D                     u701:	
  3995  046D  2C69               	goto	l226
  3996  046E                     u700:	
  3997  046E                     l1271:	
  3998  046E  0811               	movf	17,w	;volatile
  3999  046F  391F               	andlw	31
  4000  0470  1D03               	btfss	3,2
  4001  0471  2C73               	goto	u711
  4002  0472  2C74               	goto	u710
  4003  0473                     u711:	
  4004  0473  2C69               	goto	l226
  4005  0474                     u710:	
  4006  0474                     l229:	
  4007  0474  0008               	return
  4008  0475                     __end_of_I2C_Master_Wait:	
  4009                           
  4010                           	psect	text15
  4011  0381                     __ptext15:	
  4012 ;; *************** function _I2C_Master_Init *****************
  4013 ;; Defined at:
  4014 ;;		line 45 in file "I2C.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;  clk             4    0[BANK0 ] const unsigned long 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;		None
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  1    wreg      void 
  4021 ;; Registers used:
  4022 ;;		wreg, status,2, status,0, pclath, cstack
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4028 ;;      Params:         0       4       0       0       0       0       0       0
  4029 ;;      Locals:         0       0       0       0       0       0       0       0
  4030 ;;      Temps:          0       4       0       0       0       0       0       0
  4031 ;;      Totals:         0       8       0       0       0       0       0       0
  4032 ;;Total ram usage:        8 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    2
  4035 ;; This function calls:
  4036 ;;		___lldiv
  4037 ;; This function is called by:
  4038 ;;		_main
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           
  4043                           ;psect for function _I2C_Master_Init
  4044  0381                     _I2C_Master_Init:	
  4045  0381                     l1343:	
  4046                           ;incstack = 0
  4047                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  4048                           
  4049                           
  4050                           ;I2C.c: 47: SSP1CON1 = 0b00101000;
  4051  0381  3028               	movlw	40
  4052  0382  0143               	movlb	3	; select bank3
  4053  0383  0090               	movwf	16	;volatile
  4054  0384                     l1345:	
  4055                           
  4056                           ;I2C.c: 48: SSP1CON2 = 0x00;
  4057  0384  0191               	clrf	17	;volatile
  4058  0385                     l1347:	
  4059                           
  4060                           ;I2C.c: 49: SSP1ADD = (32000000 / (4*clk)) - 1;
  4061  0385  0140               	movlb	0	; select bank0
  4062  0386  083D               	movf	I2C_Master_Init@clk,w
  4063  0387  00C1               	movwf	??_I2C_Master_Init
  4064  0388  083E               	movf	I2C_Master_Init@clk+1,w
  4065  0389  00C2               	movwf	??_I2C_Master_Init+1
  4066  038A  083F               	movf	I2C_Master_Init@clk+2,w
  4067  038B  00C3               	movwf	??_I2C_Master_Init+2
  4068  038C  0840               	movf	I2C_Master_Init@clk+3,w
  4069  038D  00C4               	movwf	??_I2C_Master_Init+3
  4070  038E  3002               	movlw	2
  4071  038F                     u795:	
  4072  038F  35C1               	lslf	??_I2C_Master_Init,f
  4073  0390  0DC2               	rlf	??_I2C_Master_Init+1,f
  4074  0391  0DC3               	rlf	??_I2C_Master_Init+2,f
  4075  0392  0DC4               	rlf	??_I2C_Master_Init+3,f
  4076  0393                     u790:	
  4077  0393  0B89               	decfsz	9,f
  4078  0394  2B8F               	goto	u795
  4079  0395  0844               	movf	??_I2C_Master_Init+3,w
  4080  0396  00F3               	movwf	___lldiv@divisor+3
  4081  0397  0843               	movf	??_I2C_Master_Init+2,w
  4082  0398  00F2               	movwf	___lldiv@divisor+2
  4083  0399  0842               	movf	??_I2C_Master_Init+1,w
  4084  039A  00F1               	movwf	___lldiv@divisor+1
  4085  039B  0841               	movf	??_I2C_Master_Init,w
  4086  039C  00F0               	movwf	___lldiv@divisor
  4087  039D  3001               	movlw	1
  4088  039E  00F7               	movwf	___lldiv@dividend+3
  4089  039F  30E8               	movlw	232
  4090  03A0  00F6               	movwf	___lldiv@dividend+2
  4091  03A1  3048               	movlw	72
  4092  03A2  00F5               	movwf	___lldiv@dividend+1
  4093  03A3  3000               	movlw	0
  4094  03A4  00F4               	movwf	___lldiv@dividend
  4095  03A5  3183  2327  3183   	fcall	___lldiv
  4096  03A8  0870               	movf	?___lldiv,w
  4097  03A9  3EFF               	addlw	255
  4098  03AA  0143               	movlb	3	; select bank3
  4099  03AB  008D               	movwf	13	;volatile
  4100  03AC                     l1349:	
  4101                           
  4102                           ;I2C.c: 50: SSP1STAT = 0b10000000;
  4103  03AC  3080               	movlw	128
  4104  03AD  008F               	movwf	15	;volatile
  4105  03AE                     l223:	
  4106  03AE  0008               	return
  4107  03AF                     __end_of_I2C_Master_Init:	
  4108                           
  4109                           	psect	text16
  4110  0327                     __ptext16:	
  4111 ;; *************** function ___lldiv *****************
  4112 ;; Defined at:
  4113 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\__lldiv.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;  divisor         4    0[COMMON] unsigned long 
  4116 ;;  dividend        4    4[COMMON] unsigned long 
  4117 ;; Auto vars:     Size  Location     Type
  4118 ;;  quotient        4    9[COMMON] unsigned long 
  4119 ;;  counter         1   13[COMMON] unsigned char 
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  4    0[COMMON] unsigned long 
  4122 ;; Registers used:
  4123 ;;		wreg, status,2, status,0
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4129 ;;      Params:         8       0       0       0       0       0       0       0
  4130 ;;      Locals:         5       0       0       0       0       0       0       0
  4131 ;;      Temps:          1       0       0       0       0       0       0       0
  4132 ;;      Totals:        14       0       0       0       0       0       0       0
  4133 ;;Total ram usage:       14 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    1
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_I2C_Master_Init
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           
  4144                           ;psect for function ___lldiv
  4145  0327                     ___lldiv:	
  4146  0327                     l1287:	
  4147                           ;incstack = 0
  4148                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4149                           
  4150  0327  3000               	movlw	0
  4151  0328  00FC               	movwf	___lldiv@quotient+3
  4152  0329  3000               	movlw	0
  4153  032A  00FB               	movwf	___lldiv@quotient+2
  4154  032B  3000               	movlw	0
  4155  032C  00FA               	movwf	___lldiv@quotient+1
  4156  032D  3000               	movlw	0
  4157  032E  00F9               	movwf	___lldiv@quotient
  4158  032F  0873               	movf	___lldiv@divisor+3,w
  4159  0330  0472               	iorwf	___lldiv@divisor+2,w
  4160  0331  0471               	iorwf	___lldiv@divisor+1,w
  4161  0332  0470               	iorwf	___lldiv@divisor,w
  4162  0333  1903               	skipnz
  4163  0334  2B36               	goto	u721
  4164  0335  2B37               	goto	u720
  4165  0336                     u721:	
  4166  0336  2B78               	goto	l1307
  4167  0337                     u720:	
  4168  0337                     l1289:	
  4169  0337  01FD               	clrf	___lldiv@counter
  4170  0338  0AFD               	incf	___lldiv@counter,f
  4171  0339  2B45               	goto	l1293
  4172  033A                     l1291:	
  4173  033A  3001               	movlw	1
  4174  033B                     u735:	
  4175  033B  35F0               	lslf	___lldiv@divisor,f
  4176  033C  0DF1               	rlf	___lldiv@divisor+1,f
  4177  033D  0DF2               	rlf	___lldiv@divisor+2,f
  4178  033E  0DF3               	rlf	___lldiv@divisor+3,f
  4179  033F  0B89               	decfsz	9,f
  4180  0340  2B3B               	goto	u735
  4181  0341  3001               	movlw	1
  4182  0342  00F8               	movwf	??___lldiv
  4183  0343  0878               	movf	??___lldiv,w
  4184  0344  07FD               	addwf	___lldiv@counter,f
  4185  0345                     l1293:	
  4186  0345  1FF3               	btfss	___lldiv@divisor+3,7
  4187  0346  2B48               	goto	u741
  4188  0347  2B49               	goto	u740
  4189  0348                     u741:	
  4190  0348  2B3A               	goto	l1291
  4191  0349                     u740:	
  4192  0349                     l1295:	
  4193  0349  3001               	movlw	1
  4194  034A                     u755:	
  4195  034A  35F9               	lslf	___lldiv@quotient,f
  4196  034B  0DFA               	rlf	___lldiv@quotient+1,f
  4197  034C  0DFB               	rlf	___lldiv@quotient+2,f
  4198  034D  0DFC               	rlf	___lldiv@quotient+3,f
  4199  034E  0B89               	decfsz	9,f
  4200  034F  2B4A               	goto	u755
  4201  0350                     l1297:	
  4202  0350  0873               	movf	___lldiv@divisor+3,w
  4203  0351  0277               	subwf	___lldiv@dividend+3,w
  4204  0352  1D03               	skipz
  4205  0353  2B5E               	goto	u765
  4206  0354  0872               	movf	___lldiv@divisor+2,w
  4207  0355  0276               	subwf	___lldiv@dividend+2,w
  4208  0356  1D03               	skipz
  4209  0357  2B5E               	goto	u765
  4210  0358  0871               	movf	___lldiv@divisor+1,w
  4211  0359  0275               	subwf	___lldiv@dividend+1,w
  4212  035A  1D03               	skipz
  4213  035B  2B5E               	goto	u765
  4214  035C  0870               	movf	___lldiv@divisor,w
  4215  035D  0274               	subwf	___lldiv@dividend,w
  4216  035E                     u765:	
  4217  035E  1C03               	skipc
  4218  035F  2B61               	goto	u761
  4219  0360  2B62               	goto	u760
  4220  0361                     u761:	
  4221  0361  2B6B               	goto	l1303
  4222  0362                     u760:	
  4223  0362                     l1299:	
  4224  0362  0870               	movf	___lldiv@divisor,w
  4225  0363  02F4               	subwf	___lldiv@dividend,f
  4226  0364  0871               	movf	___lldiv@divisor+1,w
  4227  0365  3BF5               	subwfb	___lldiv@dividend+1,f
  4228  0366  0872               	movf	___lldiv@divisor+2,w
  4229  0367  3BF6               	subwfb	___lldiv@dividend+2,f
  4230  0368  0873               	movf	___lldiv@divisor+3,w
  4231  0369  3BF7               	subwfb	___lldiv@dividend+3,f
  4232  036A                     l1301:	
  4233  036A  1479               	bsf	___lldiv@quotient,0
  4234  036B                     l1303:	
  4235  036B  3001               	movlw	1
  4236  036C                     u775:	
  4237  036C  36F3               	lsrf	___lldiv@divisor+3,f
  4238  036D  0CF2               	rrf	___lldiv@divisor+2,f
  4239  036E  0CF1               	rrf	___lldiv@divisor+1,f
  4240  036F  0CF0               	rrf	___lldiv@divisor,f
  4241  0370  0B89               	decfsz	9,f
  4242  0371  2B6C               	goto	u775
  4243  0372                     l1305:	
  4244  0372  3001               	movlw	1
  4245  0373  02FD               	subwf	___lldiv@counter,f
  4246  0374  1D03               	btfss	3,2
  4247  0375  2B77               	goto	u781
  4248  0376  2B78               	goto	u780
  4249  0377                     u781:	
  4250  0377  2B49               	goto	l1295
  4251  0378                     u780:	
  4252  0378                     l1307:	
  4253  0378  087C               	movf	___lldiv@quotient+3,w
  4254  0379  00F3               	movwf	?___lldiv+3
  4255  037A  087B               	movf	___lldiv@quotient+2,w
  4256  037B  00F2               	movwf	?___lldiv+2
  4257  037C  087A               	movf	___lldiv@quotient+1,w
  4258  037D  00F1               	movwf	?___lldiv+1
  4259  037E  0879               	movf	___lldiv@quotient,w
  4260  037F  00F0               	movwf	?___lldiv
  4261  0380                     l385:	
  4262  0380  0008               	return
  4263  0381                     __end_of___lldiv:	
  4264                           
  4265                           	psect	intentry
  4266  0004                     __pintentry:	
  4267 ;; *************** function _ISR *****************
  4268 ;; Defined at:
  4269 ;;		line 40 in file "main.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;		None
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;		None
  4274 ;; Return value:  Size  Location     Type
  4275 ;;                  1    wreg      void 
  4276 ;; Registers used:
  4277 ;;		wreg
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4283 ;;      Params:         0       0       0       0       0       0       0       0
  4284 ;;      Locals:         0       0       0       0       0       0       0       0
  4285 ;;      Temps:          0       0       0       0       0       0       0       0
  4286 ;;      Totals:         0       0       0       0       0       0       0       0
  4287 ;;Total ram usage:        0 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; This function calls:
  4290 ;;		Nothing
  4291 ;; This function is called by:
  4292 ;;		Interrupt level 1
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296  0004                     _ISR:	
  4297                           
  4298                           ;incstack = 0
  4299  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4300                           
  4301                           ; Regs used in _ISR: [wreg]
  4302  0005  3180               	pagesel	$
  4303  0006                     i1l1415:	
  4304                           
  4305                           ;main.c: 42: if(TMR1IF) {
  4306  0006  014E               	movlb	14	; select bank14
  4307  0007  1C10               	btfss	16,0	;volatile
  4308  0008  280A               	goto	u80_21
  4309  0009  280B               	goto	u80_20
  4310  000A                     u80_21:	
  4311  000A  281A               	goto	i1l75
  4312  000B                     u80_20:	
  4313  000B                     i1l1417:	
  4314                           
  4315                           ;main.c: 43: TMR1IF = 0;
  4316  000B  1010               	bcf	16,0	;volatile
  4317                           
  4318                           ;main.c: 44: TMR1 = 65228;
  4319  000C  30FE               	movlw	254
  4320  000D  0144               	movlb	4	; select bank4
  4321  000E  008D               	movwf	13	;volatile
  4322  000F  30CC               	movlw	204
  4323  0010  008C               	movwf	12	;volatile
  4324  0011                     i1l1419:	
  4325                           
  4326                           ;main.c: 45: timer_counter++;
  4327  0011  3001               	movlw	1
  4328  0012  0140               	movlb	0	; select bank0
  4329  0013  07B4               	addwf	_timer_counter,f
  4330  0014  3000               	movlw	0
  4331  0015  3DB5               	addwfc	_timer_counter+1,f
  4332  0016  3000               	movlw	0
  4333  0017  3DB6               	addwfc	_timer_counter+2,f
  4334  0018  3000               	movlw	0
  4335  0019  3DB7               	addwfc	_timer_counter+3,f
  4336  001A                     i1l75:	
  4337  001A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4338  001B  0009               	retfie
  4339  001C                     __end_of_ISR:	
  4340  007E                     btemp	set	126	;btemp
  4341  007E                     int$flags	set	126
  4342  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         29
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      9      42
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _LM49450_analog_init->_LM49450_write
    _LM49450_Wii_init->_LM49450_write
    _LM49450_PS2_init->_LM49450_write
    _LM49450_DC_init->_LM49450_write
    _LM49450_write->_I2C_Master_Write
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_I2C_Master_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11964
                                              8 BANK0      1     1      0
                    _I2C_Master_Init
                    _LM49450_DC_init
                   _LM49450_PS2_init
                   _LM49450_Wii_init
                _LM49450_analog_init
                      _LM49450_write
                          _PIC_SETUP
                           _PPS_lock
                         _PPS_unlock
                           _get_time
                         _timer_diff
 ---------------------------------------------------------------------------------
 (1) _timer_diff                                           8     4      4     402
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _get_time                                             4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) _PPS_unlock                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PPS_lock                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIC_SETUP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LM49450_analog_init                                  2     2      0    2239
                                              3 COMMON     2     2      0
                      _LM49450_write
 ---------------------------------------------------------------------------------
 (1) _LM49450_Wii_init                                     2     2      0    2239
                                              3 COMMON     2     2      0
                      _LM49450_write
 ---------------------------------------------------------------------------------
 (1) _LM49450_PS2_init                                     2     2      0    2239
                                              3 COMMON     2     2      0
                      _LM49450_write
 ---------------------------------------------------------------------------------
 (1) _LM49450_DC_init                                      2     2      0    2239
                                              3 COMMON     2     2      0
                      _LM49450_write
 ---------------------------------------------------------------------------------
 (1) _LM49450_write                                        2     1      1    2194
                                              1 COMMON     2     1      1
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     1     1      0      22
                                              0 COMMON     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _LM49450_DC_init
     _LM49450_write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _LM49450_PS2_init
     _LM49450_write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _LM49450_Wii_init
     _LM49450_write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _LM49450_analog_init
     _LM49450_write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _LM49450_write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _PIC_SETUP
   _PPS_lock
   _PPS_unlock
   _get_time
   _timer_diff

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      38       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      2A       6       52.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      38      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Nov 10 13:45:51 2019

       __end_of_LM49450_write 0469         ??_LM49450_analog_init 0073                   __CFG_CP$OFF 0000  
                          l69 043E                    _PPS_unlock 0499                           l110 007C  
                         l112 008C                           l108 006C                           l109 009B  
                         l118 00FC                           l223 03AE                           l232 04B1  
                         l128 01CD                           l241 0498                           l226 0469  
                         l146 027B                           l260 0454                           l229 0474  
                         l238 04AB                           l272 041F                           l281 0488  
                         l185 049F                           l257 047E                           l275 03FA  
                         l188 0490                           l269 0468                           l278 03D5  
                         l385 0380                           _RA4 0064                           _RC0 0070  
                         _RA5 0065                           _RC1 0071                           _RC2 0072  
                         _RC3 0073                           _RC4 0074                           u700 046E  
                         _ISR 0004                           u701 046D                           u710 0474  
                         u711 0473                           u720 0337                           u721 0336  
                         u810 0060                           u811 005F                           u740 0349  
                         u900 00B6                           u820 0064                           u741 0348  
                         u901 00B5                           u821 0063                           u910 00CA  
                         u830 0070                           u735 033B                           u911 00C9  
                         u831 006F                           u760 0362                           u920 00E4  
                         u840 0074                           u761 0361                           u921 00E3  
                         u841 0073                           u930 00EE                           u850 0080  
                         u755 034A                           u931 00ED                           u851 007F  
                         u780 0378                           u940 00F3                           u860 0084  
                         u781 0377                           u765 035E                           u941 00F2  
                         u861 0083                           u790 0393                           u950 0103  
                         u870 0090                           u775 036C                           u951 0102  
                         u871 008F                           u960 0108                           u880 0094  
                         u961 0107                           u881 0093                           u970 010D  
                         u890 00B1                           u795 038F                           u971 010C  
                         u891 00B0                           u980 011C                           u981 011B  
                         u990 0146                           u991 0145          _vol_minus_time_start 0024  
                __CFG_BORV$LO 0000                           wreg 0009                 __CFG_BBEN$OFF 0000  
                __CFG_LVP$OFF 0000                          ?_ISR 0070                  __CFG_ZCD$OFF 0000  
                        l1301 036A                          l1303 036B                          l1311 0420  
                        l1305 0372                          l1401 0416                          l1321 0430  
                        l1313 0425                          l1307 0378                          l1403 041E  
                        l1331 043A                          l1323 0431                          l1315 0427  
                        l1411 043F                          l1333 043C                          l1325 0432  
                        l1317 042C                          l1341 0489                          l1501 016C  
                        l1421 003A                          l1343 0381                          l1271 046E  
                        l1351 03D6                          l1335 043D                          l1327 0434  
                        l1319 042F                          l1407 0475                          l1511 01A2  
                        l1503 0172                          l1431 005B                          l1423 0040  
                        l1345 0384                          l1273 04AC                          l1281 0492  
                        l1361 03F4                          l1353 03D6                          l1329 0438  
                        l1337 0499                          l1601 02B4                          l1521 01BA  
                        l1513 01A8                          l1505 0177                          l1441 0080  
                        l1433 0060                          l1425 0043                          l1291 033A  
                        l1347 0385                          l1275 04AF                          l1283 0495  
                        l1371 03B7                          l1363 03F9                          l1355 03DE  
                        l1339 049E                          l1611 02CA                          l1603 02B9  
                        l1515 01AE                          l1507 017C                          l1531 01CD  
                        l1451 00B1                          l1443 0084                          l1435 0064  
                        l1427 0046                          l1293 0345                          l1349 03AC  
                        l1269 0469                          l1277 04A6                          l1285 0456  
                        l1373 03BF                          l1357 03E4                          l1613 02CF  
                        l1621 02EF                          l1605 02BD                          l1541 01FC  
                        l1509 0196                          l1525 01C0                          l1461 00E4  
                        l1453 00B6                          l1445 0090                          l1437 0070  
                        l1429 0049                          l1295 0349                          l1287 0327  
                        l1279 04A9                          l1391 03FB                          l1375 03C7  
                        l1367 03AF                          l1359 03EC                          l1383 047F  
                        l1631 0313                          l1623 02F6                          l1615 02D7  
                        l1551 021C                          l1543 0208                          l1535 01D3  
                        l1519 01B4                          l1527 01C2                          l1471 0103  
                        l1463 00E9                          l1455 00C2                          l1447 0094  
                        l1439 0074                          l1297 0350                          l1289 0337  
                        l1393 03FB                          l1377 03CF                          l1369 03AF  
                        l1385 047F                          l1625 02FB                          l1633 031B  
                        l1617 02DD                          l1609 02C4                          l1561 0246  
                        l1553 021F                          l1545 020C                          l1537 01DF  
                        l1473 0108                          l1465 00EE                          l1457 00C5  
                        l1449 00AC                          l1299 0362                          l1395 0403  
                        l1379 03D4                          l1387 0487                          l1635 0320  
                        l1627 0303                          l1619 02E7                          l1571 0263  
                        l1563 0252                          l1555 0224                          l1547 0212  
                        l1539 01E2                          l1491 0152                          l1483 011D  
                        l1475 010D                          l1467 00F3                          l1459 00CA  
                        l1397 0409                          l1629 0309                          l1573 0268  
                        l1565 0258                          l1557 0229                          l1549 0217  
                        l1493 0156                          l1485 0129                          l1477 0115  
                        l1469 00FD                          l1399 040E                          l1591 0292  
                        l1567 025D                          l1559 022C                          l1583 027B  
                        l1495 015C                          l1487 012C                          l1479 0117  
                        l1593 0296                          l1585 0282                          l1577 026E  
                        l1497 0162                          l1489 0146                          l1595 029E  
                        l1579 0270                          l1499 0167                          l1597 02A4  
                        l1589 0289                          l1599 02A6                          u1000 015C  
                        u1001 015B                          u1010 0162                          u1011 0161  
                        u1100 01BF                          u1020 0167                          u1101 01BE  
                        u1021 0166                          u1110 01D2                          u1030 0172  
                        u1111 01D1                          u1031 0171                          u1200 025D  
                        u1120 01FC                          u1040 0177                          u1201 025C  
                        u1121 01FB                          u1041 0176                          u1210 0262  
                        u1130 0212                          u1050 0196                          u1211 0261  
                        u1131 0211                          u1051 0195                          u1300 02DD  
                        u1220 0268                          u1140 0217                          u1060 01A8  
                        u1301 02DC                          u1221 0267                          u1141 0216  
                        u1061 01A7                          u1310 02F6                          u1230 026D  
                        u1150 021C                          u1070 01AE                          u1311 02F5  
                        u1231 026C                          u1151 021B                          u1071 01AD  
                        u1320 02FB                          u1240 0282                          u1160 0224  
                        u1080 01B3                          u1321 02FA                          u1241 0281  
                        u1161 0223                          u1081 01B2                          u1330 0309  
                        u1250 0288                          u1170 0229                          u1090 01BA  
                        u1331 0308                          u1251 0287                          u1171 0228  
                        u1091 01B9                          u1260 02B9                          u1180 0246  
                        u1261 02B8                          u1181 0245                          u1270 02C3  
                        u1190 0258                          u1271 02C2                          u1191 0257  
                        u1280 02CA                          u1281 02C9                          u1290 02CF  
                        u1291 02CE                          i1l75 001A                          _TMR1 020C  
                        _WPUA 1F39                          _WPUC 1F4F                 __CFG_FCMEN$ON 0000  
                        _main 003A                          fsr0h 0005                          indf0 0000  
                        fsr0l 0004                          btemp 007E                 __CFG_BOREN$ON 0000  
                        start 001C                 __CFG_CSWEN$ON 0000              ?_LM49450_DC_init 0070  
                       ??_ISR 0070            __size_of_PIC_SETUP 001F              ?_I2C_Master_Init 003D  
            ?_I2C_Master_Wait 0070              ?_I2C_Master_Stop 0070                         ?_main 0070  
               __CFG_WDTE$OFF 0000               __end_of___lldiv 0381                         _T1CLK 0211  
                       u80_20 000B                         u80_21 000A                         _TRISA 0012  
                       _TRISC 0014                 __CFG_WRTB$OFF 0000                 __CFG_WRTC$OFF 0000  
            __end_of_PPS_lock 0491                         status 0003                         wtemp0 007E  
              __CFG_MCLRE$OFF 0000               __initialization 001E                  __end_of_main 0327  
              __CFG_SAFEN$OFF 0000             ?_LM49450_PS2_init 0070                   ?_PPS_unlock 0070  
                      ??_main 0045            ??_LM49450_PS2_init 0073             ?_I2C_Master_Start 0070  
           ?_I2C_Master_Write 0070            ??_I2C_Master_Start 0070            ??_I2C_Master_Write 0070  
                      _ANSELA 1F38                        _ANSELC 1F4E                        _RC0PPS 1F20  
                      _RC1PPS 1F21                        i1l1415 0006                        i1l1417 000B  
                      i1l1419 0011             __end_of_PIC_SETUP 043F                        _TMR1IF 3880  
              _HPS_time_start 0030                __CFG_PWRTE$OFF 0000              __end_of_get_time 047F  
              __CFG_STVREN$ON 0000                     ??___lldiv 0078             ?_LM49450_Wii_init 0070  
          ??_LM49450_Wii_init 0073       __end_of__initialization 0036           __size_of_PPS_unlock 0007  
              __pcstackCOMMON 0070                  __pidataBANK0 04B2                     ?_PPS_lock 0070  
                  __pbssBANK0 0020   __end_of_LM49450_analog_init 0489                    __pmaintext 003A  
                  __pintentry 0004           __CFG_RSTOSC$HFINT32 0000                    ??_PPS_lock 0070  
                     _SSP1ADD 018D                       _PPSLOCK 1E8F                       _SSP1BUF 018C  
              _vol_plus_state 0039        __size_of_LM49450_write 0014                     ?_get_time 0070  
                     ___lldiv 0327                  ??_PPS_unlock 0070                       __ptext1 043F  
                     __ptext2 0475                       __ptext3 0499                       __ptext4 0489  
                     __ptext5 0420                       __ptext6 047F                       __ptext7 03D6  
                     __ptext8 03AF                       __ptext9 03FB      __size_of_LM49450_DC_init 0025  
             __CFG_WRTAPP$OFF 0000                  __size_of_ISR 0018                     _T1CONbits 020E  
             __CFG_WRTSAF$OFF 0000      __size_of_I2C_Master_Init 002E      __size_of_I2C_Master_Wait 000C  
    __size_of_I2C_Master_Stop 0006                       clrloop0 04A1                    ??_get_time 0074  
        end_of_initialization 0036     __size_of_LM49450_PS2_init 0027     __size_of_I2C_Master_Start 0006  
          __end_of_PPS_unlock 04A0                     _PIC_SETUP 0420     __size_of_I2C_Master_Write 0008  
             ___lldiv@divisor 0070               ___lldiv@counter 007D                 _LM49450_write 0455  
                   _HPS_state 003A         __CFG_WDTCPS$WDTCPS_13 0000                    _timer_diff 043F  
                  _mute_state 003B             LM49450_write@data 0071          __CFG_WDTCCS$LFINTOSC 0000  
                   _TRISCbits 0014                   timer_diff@t 0070              __CFG_FEXTOSC$OFF 0000  
         _vol_minus_time_hold 0020     __size_of_LM49450_Wii_init 0025                    ?_PIC_SETUP 0070  
              ?_LM49450_write 0071             __size_of_PPS_lock 0008           start_initialization 001E  
                 __end_of_ISR 001C             ??_LM49450_DC_init 0073             ??_I2C_Master_Init 0041  
           ??_I2C_Master_Wait 0070             ??_I2C_Master_Stop 0070              __CFG_LPBOREN$OFF 0000  
                 __pdataBANK0 0046                   ?_timer_diff 0070                     ___latbits 0001  
               __pcstackBANK0 003D                _volume_hp_prev 0046              _LM49450_PS2_init 03AF  
              _volume_sp_prev 0048             __size_of_get_time 000A               _vol_minus_state 0038  
            _I2C_Master_Start 04AC                   ??_PIC_SETUP 0070              _I2C_Master_Write 0491  
             ??_LM49450_write 0072                      ?___lldiv 0070              __CFG_PPS1WAY$OFF 0000  
__size_of_LM49450_analog_init 000A          I2C_Master_Write@data 0070              _LM49450_Wii_init 03D6  
         __size_of_timer_diff 0016                     clear_ram0 04A0                      _PIE4bits 071A  
           __CFG_BBSIZE$BB512 0000                      _SSP1CON1 0190                      _SSP1CON2 0191  
                    _SSP1STAT 018F              LM49450_write@reg 0072                      _PPS_lock 0489  
                   _volume_hp 0047                     _volume_sp 0049              __size_of___lldiv 005A  
             _LM49450_DC_init 03FB               _I2C_Master_Init 0381               _I2C_Master_Wait 0469  
             _I2C_Master_Stop 04A6                      __ptext10 0455                      __ptext11 0491  
                    __ptext12 04A6                      __ptext13 04AC                    _T1GCONbits 020F  
                    __ptext14 0469                      __ptext15 0381                      __ptext16 0327  
                _SSP1CON2bits 0191                      _get_time 0475                 __size_of_main 02ED  
        __CFG_WDTCWS$WDTCWS_7 0000                      int$flags 007E      __end_of_LM49450_PS2_init 03D6  
               _timer_counter 0034                  ??_timer_diff 0074            I2C_Master_Init@clk 003D  
    __end_of_I2C_Master_Start 04B2      __end_of_I2C_Master_Write 0499                    _INTCONbits 000B  
                    intlevel1 0000           _LM49450_analog_init 047F              ___lldiv@dividend 0074  
           __CFG_CLKOUTEN$OFF 0000            __end_of_timer_diff 0455       __end_of_LM49450_DC_init 0420  
         _vol_plus_time_start 002C       __end_of_I2C_Master_Init 03AF       __end_of_I2C_Master_Wait 0475  
        ?_LM49450_analog_init 0070       __end_of_I2C_Master_Stop 04AC      __end_of_LM49450_Wii_init 03FB  
                  _SSP1DATPPS 1EC6                    _SSP1CLKPPS 1EC5              ___lldiv@quotient 0079  
          _vol_plus_time_hold 0028                   _mute_config 003C  
